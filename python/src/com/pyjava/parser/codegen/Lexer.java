/* The following code was generated by JFlex 1.4.3 on 7/16/15 10:07 PM */

/*SECCIÓN DE CÓDIGO DE USUARIO*/
package com.pyjava.parser.codegen;
import java_cup.runtime.*;
import jflex.sym;
import java.util.Deque;
import java.util.LinkedList;
import com.pyjava.parser.codegen.LexerToken;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 7/16/15 10:07 PM from the specification file
 * <tt>./language/jflex/python.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int SINGLE_QUOTE_STRING = 2;
  public static final int TRIPLE_STRING_SINGLE_QUOTE = 6;
  public static final int TRIPLE_STRING_DOUBLE_QUOTE = 8;
  public static final int YYINITIAL = 0;
  public static final int INDENTATION_TAB = 10;
  public static final int DOUBLE_QUOTE_STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\32\1\4\1\2\2\0\1\1\16\32\4\0\1\3\1\74\1\16"+
    "\1\5\1\31\1\65\1\66\1\15\1\54\1\55\1\63\1\62\1\51"+
    "\1\14\1\12\1\64\12\7\1\52\1\53\1\72\1\6\1\73\2\0"+
    "\4\31\1\13\1\26\5\31\1\10\1\31\1\17\5\31\1\23\6\31"+
    "\1\56\1\75\1\57\1\70\1\31\1\0\1\27\1\42\1\50\1\33"+
    "\1\22\1\34\1\41\1\37\1\40\1\31\1\46\1\11\1\35\1\21"+
    "\1\20\1\44\1\31\1\24\1\30\1\43\1\25\1\31\1\36\1\47"+
    "\1\45\1\31\1\60\1\67\1\61\1\71\41\32\2\0\4\31\4\0"+
    "\1\31\2\0\1\32\7\0\1\31\4\0\1\31\5\0\27\31\1\0"+
    "\37\31\1\0\u01ca\31\4\0\14\31\16\0\5\31\7\0\1\31\1\0"+
    "\1\31\21\0\160\32\5\31\1\0\2\31\2\0\4\31\10\0\1\31"+
    "\1\0\3\31\1\0\1\31\1\0\24\31\1\0\123\31\1\0\213\31"+
    "\1\0\5\32\2\0\236\31\11\0\46\31\2\0\1\31\7\0\47\31"+
    "\7\0\1\31\1\0\55\32\1\0\1\32\1\0\2\32\1\0\2\32"+
    "\1\0\1\32\10\0\33\31\5\0\3\31\15\0\5\32\6\0\1\31"+
    "\4\0\13\32\5\0\53\31\37\32\4\0\2\31\1\32\143\31\1\0"+
    "\1\31\10\32\1\0\6\32\2\31\2\32\1\0\4\32\2\31\12\32"+
    "\3\31\2\0\1\31\17\0\1\32\1\31\1\32\36\31\33\32\2\0"+
    "\131\31\13\32\1\31\16\0\12\32\41\31\11\32\2\31\4\0\1\31"+
    "\5\0\26\31\4\32\1\31\11\32\1\31\3\32\1\31\5\32\22\0"+
    "\31\31\3\32\104\0\1\31\1\0\13\31\67\0\33\32\1\0\4\32"+
    "\66\31\3\32\1\31\22\32\1\31\7\32\12\31\2\32\2\0\12\32"+
    "\1\0\7\31\1\0\7\31\1\0\3\32\1\0\10\31\2\0\2\31"+
    "\2\0\26\31\1\0\7\31\1\0\1\31\3\0\4\31\2\0\1\32"+
    "\1\31\7\32\2\0\2\32\2\0\3\32\1\31\10\0\1\32\4\0"+
    "\2\31\1\0\3\31\2\32\2\0\12\32\4\31\7\0\1\31\5\0"+
    "\3\32\1\0\6\31\4\0\2\31\2\0\26\31\1\0\7\31\1\0"+
    "\2\31\1\0\2\31\1\0\2\31\2\0\1\32\1\0\5\32\4\0"+
    "\2\32\2\0\3\32\3\0\1\32\7\0\4\31\1\0\1\31\7\0"+
    "\14\32\3\31\1\32\13\0\3\32\1\0\11\31\1\0\3\31\1\0"+
    "\26\31\1\0\7\31\1\0\2\31\1\0\5\31\2\0\1\32\1\31"+
    "\10\32\1\0\3\32\1\0\3\32\2\0\1\31\17\0\2\31\2\32"+
    "\2\0\12\32\1\0\1\31\17\0\3\32\1\0\10\31\2\0\2\31"+
    "\2\0\26\31\1\0\7\31\1\0\2\31\1\0\5\31\2\0\1\32"+
    "\1\31\7\32\2\0\2\32\2\0\3\32\10\0\2\32\4\0\2\31"+
    "\1\0\3\31\2\32\2\0\12\32\1\0\1\31\20\0\1\32\1\31"+
    "\1\0\6\31\3\0\3\31\1\0\4\31\3\0\2\31\1\0\1\31"+
    "\1\0\2\31\3\0\2\31\3\0\3\31\3\0\14\31\4\0\5\32"+
    "\3\0\3\32\1\0\4\32\2\0\1\31\6\0\1\32\16\0\12\32"+
    "\11\0\1\31\7\0\3\32\1\0\10\31\1\0\3\31\1\0\27\31"+
    "\1\0\12\31\1\0\5\31\3\0\1\31\7\32\1\0\3\32\1\0"+
    "\4\32\7\0\2\32\1\0\2\31\6\0\2\31\2\32\2\0\12\32"+
    "\22\0\2\32\1\0\10\31\1\0\3\31\1\0\27\31\1\0\12\31"+
    "\1\0\5\31\2\0\1\32\1\31\7\32\1\0\3\32\1\0\4\32"+
    "\7\0\2\32\7\0\1\31\1\0\2\31\2\32\2\0\12\32\1\0"+
    "\2\31\17\0\2\32\1\0\10\31\1\0\3\31\1\0\51\31\2\0"+
    "\1\31\7\32\1\0\3\32\1\0\4\32\1\31\10\0\1\32\10\0"+
    "\2\31\2\32\2\0\12\32\12\0\6\31\2\0\2\32\1\0\22\31"+
    "\3\0\30\31\1\0\11\31\1\0\1\31\2\0\7\31\3\0\1\32"+
    "\4\0\6\32\1\0\1\32\1\0\10\32\22\0\2\32\15\0\60\31"+
    "\1\32\2\31\7\32\4\0\10\31\10\32\1\0\12\32\47\0\2\31"+
    "\1\0\1\31\2\0\2\31\1\0\1\31\2\0\1\31\6\0\4\31"+
    "\1\0\7\31\1\0\3\31\1\0\1\31\1\0\1\31\2\0\2\31"+
    "\1\0\4\31\1\32\2\31\6\32\1\0\2\32\1\31\2\0\5\31"+
    "\1\0\1\31\1\0\6\32\2\0\12\32\2\0\4\31\40\0\1\31"+
    "\27\0\2\32\6\0\12\32\13\0\1\32\1\0\1\32\1\0\1\32"+
    "\4\0\2\32\10\31\1\0\44\31\4\0\24\32\1\0\2\32\5\31"+
    "\13\32\1\0\44\32\11\0\1\32\71\0\53\31\24\32\1\31\12\32"+
    "\6\0\6\31\4\32\4\31\3\32\1\31\3\32\2\31\7\32\3\31"+
    "\4\32\15\31\14\32\1\31\17\32\2\0\46\31\1\0\1\31\5\0"+
    "\1\31\2\0\53\31\1\0\u014d\31\1\0\4\31\2\0\7\31\1\0"+
    "\1\31\1\0\4\31\2\0\51\31\1\0\4\31\2\0\41\31\1\0"+
    "\4\31\2\0\7\31\1\0\1\31\1\0\4\31\2\0\17\31\1\0"+
    "\71\31\1\0\4\31\2\0\103\31\2\0\3\32\40\0\20\31\20\0"+
    "\125\31\14\0\u026c\31\2\0\21\31\1\0\32\31\5\0\113\31\3\0"+
    "\3\31\17\0\15\31\1\0\4\31\3\32\13\0\22\31\3\32\13\0"+
    "\22\31\2\32\14\0\15\31\1\0\3\31\1\0\2\32\14\0\64\31"+
    "\40\32\3\0\1\31\3\0\2\31\1\32\2\0\12\32\41\0\3\32"+
    "\2\0\12\32\6\0\130\31\10\0\51\31\1\32\1\31\5\0\106\31"+
    "\12\0\35\31\3\0\14\32\4\0\14\32\12\0\12\32\36\31\2\0"+
    "\5\31\13\0\54\31\4\0\21\32\7\31\2\32\6\0\12\32\46\0"+
    "\27\31\5\32\4\0\65\31\12\32\1\0\35\32\2\0\13\32\6\0"+
    "\12\32\15\0\1\31\130\0\5\32\57\31\21\32\7\31\4\0\12\32"+
    "\21\0\11\32\14\0\3\32\36\31\15\32\2\31\12\32\54\31\16\32"+
    "\14\0\44\31\24\32\10\0\12\32\3\0\3\31\12\32\44\31\122\0"+
    "\3\32\1\0\25\32\4\31\1\32\4\31\3\32\2\31\11\0\300\31"+
    "\47\32\25\0\4\32\u0116\31\2\0\6\31\2\0\46\31\2\0\6\31"+
    "\2\0\10\31\1\0\1\31\1\0\1\31\1\0\1\31\1\0\37\31"+
    "\2\0\65\31\1\0\7\31\1\0\1\31\3\0\3\31\1\0\7\31"+
    "\3\0\4\31\2\0\6\31\4\0\15\31\5\0\3\31\1\0\7\31"+
    "\16\0\5\32\32\0\5\32\20\0\2\31\23\0\1\31\13\0\5\32"+
    "\5\0\6\32\1\0\1\31\15\0\1\31\20\0\15\31\3\0\33\31"+
    "\25\0\15\32\4\0\1\32\3\0\14\32\21\0\1\31\4\0\1\31"+
    "\2\0\12\31\1\0\1\31\3\0\5\31\6\0\1\31\1\0\1\31"+
    "\1\0\1\31\1\0\4\31\1\0\13\31\2\0\4\31\5\0\5\31"+
    "\4\0\1\31\21\0\51\31\u0a77\0\57\31\1\0\57\31\1\0\205\31"+
    "\6\0\4\31\3\32\2\31\14\0\46\31\1\0\1\31\5\0\1\31"+
    "\2\0\70\31\7\0\1\31\17\0\1\32\27\31\11\0\7\31\1\0"+
    "\7\31\1\0\7\31\1\0\7\31\1\0\7\31\1\0\7\31\1\0"+
    "\7\31\1\0\7\31\1\0\40\32\57\0\1\31\u01d5\0\3\31\31\0"+
    "\11\31\6\32\1\0\5\31\2\0\5\31\4\0\126\31\2\0\2\32"+
    "\2\0\3\31\1\0\132\31\1\0\4\31\5\0\51\31\3\0\136\31"+
    "\21\0\33\31\65\0\20\31\u0200\0\u19b6\31\112\0\u51cd\31\63\0\u048d\31"+
    "\103\0\56\31\2\0\u010d\31\3\0\20\31\12\32\2\31\24\0\57\31"+
    "\1\32\4\0\12\32\1\0\31\31\7\0\1\32\120\31\2\32\45\0"+
    "\11\31\2\0\147\31\2\0\4\31\1\0\4\31\14\0\13\31\115\0"+
    "\12\31\1\32\3\31\1\32\4\31\1\32\27\31\5\32\20\0\1\31"+
    "\7\0\64\31\14\0\2\32\62\31\21\32\13\0\12\32\6\0\22\32"+
    "\6\31\3\0\1\31\4\0\12\32\34\31\10\32\2\0\27\31\15\32"+
    "\14\0\35\31\3\0\4\32\57\31\16\32\16\0\1\31\12\32\46\0"+
    "\51\31\16\32\11\0\3\31\1\32\10\31\2\32\2\0\12\32\6\0"+
    "\27\31\3\0\1\31\1\32\4\0\60\31\1\32\1\31\3\32\2\31"+
    "\2\32\5\31\2\32\1\31\1\32\1\31\30\0\3\31\2\0\13\31"+
    "\5\32\2\0\3\31\2\32\12\0\6\31\2\0\6\31\2\0\6\31"+
    "\11\0\7\31\1\0\7\31\221\0\43\31\10\32\1\0\2\32\2\0"+
    "\12\32\6\0\u2ba4\31\14\0\27\31\4\0\61\31\u2104\0\u016e\31\2\0"+
    "\152\31\46\0\7\31\14\0\5\31\5\0\1\31\1\32\12\31\1\0"+
    "\15\31\1\0\5\31\1\0\1\31\1\0\2\31\1\0\2\31\1\0"+
    "\154\31\41\0\u016b\31\22\0\100\31\2\0\66\31\50\0\15\31\3\0"+
    "\20\32\20\0\7\32\14\0\2\31\30\0\3\31\31\0\1\31\6\0"+
    "\5\31\1\0\207\31\2\0\1\32\4\0\1\31\13\0\12\32\7\0"+
    "\32\31\4\0\1\31\1\0\32\31\13\0\131\31\3\0\6\31\2\0"+
    "\6\31\2\0\6\31\2\0\3\31\3\0\2\31\3\0\2\31\22\0"+
    "\3\32\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\2\2\1\3\1\4\1\3\1\5\1\6"+
    "\2\7\1\10\1\11\1\12\1\13\22\7\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\1\1\37\1\40\1\41\1\37\1\41\1\42"+
    "\2\1\1\42\1\1\1\43\2\44\1\45\2\46\1\47"+
    "\1\50\1\51\2\0\1\7\1\52\2\0\1\7\1\53"+
    "\10\7\1\54\6\7\1\55\1\56\1\57\11\7\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\2\0\1\52\1\0\1\7"+
    "\1\75\1\76\1\7\1\77\10\7\1\100\1\7\1\101"+
    "\1\102\1\103\7\7\1\104\5\7\1\105\1\7\1\106"+
    "\1\107\1\110\1\111\1\7\1\112\4\7\1\113\2\7"+
    "\1\114\4\7\1\115\6\7\1\116\1\117\2\7\1\120"+
    "\2\7\1\121\1\122\1\123\1\124\1\7\1\125\1\126"+
    "\1\127\1\130\1\7\1\131\1\132\1\7\1\133\1\7"+
    "\1\134";

  private static int [] zzUnpackAction() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u0174\0\u0174\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326"+
    "\0\u0364\0\u0174\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8"+
    "\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8"+
    "\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u0174\0\u0174"+
    "\0\u0174\0\u0174\0\u0174\0\u0174\0\u0174\0\u0174\0\u0174\0\u0174"+
    "\0\u087a\0\u08b8\0\u0174\0\u0174\0\u0174\0\u0174\0\u0174\0\u08f6"+
    "\0\u0934\0\u0972\0\u09b0\0\u0174\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8"+
    "\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0174\0\u0bde\0\u0174\0\u0c1c"+
    "\0\u0c5a\0\u01f0\0\u0c98\0\u0174\0\u0174\0\u0364\0\u0cd6\0\u0d14"+
    "\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u02e8\0\u0e4a\0\u0e88\0\u0ec6"+
    "\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6"+
    "\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u02e8\0\u02e8\0\u02e8\0\u11ec"+
    "\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc"+
    "\0\u0174\0\u0174\0\u0174\0\u0174\0\u0174\0\u0174\0\u0174\0\u0174"+
    "\0\u0174\0\u0174\0\u0174\0\u0174\0\u0174\0\u141a\0\u1458\0\u1496"+
    "\0\u1496\0\u14d4\0\u0174\0\u0174\0\u1512\0\u02e8\0\u1550\0\u158e"+
    "\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702\0\u02e8\0\u1740"+
    "\0\u02e8\0\u02e8\0\u02e8\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876"+
    "\0\u18b4\0\u18f2\0\u02e8\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28"+
    "\0\u0174\0\u1a66\0\u02e8\0\u02e8\0\u02e8\0\u02e8\0\u1aa4\0\u02e8"+
    "\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u02e8\0\u1bda\0\u1c18\0\u02e8"+
    "\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u02e8\0\u1d4e\0\u1d8c\0\u1dca"+
    "\0\u1e08\0\u1e46\0\u1e84\0\u02e8\0\u02e8\0\u1ec2\0\u1f00\0\u02e8"+
    "\0\u1f3e\0\u1f7c\0\u02e8\0\u02e8\0\u02e8\0\u02e8\0\u1fba\0\u02e8"+
    "\0\u02e8\0\u02e8\0\u02e8\0\u1ff8\0\u02e8\0\u02e8\0\u2036\0\u02e8"+
    "\0\u2074\0\u02e8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\17\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\17\1\33\1\34"+
    "\2\17\1\7\1\35\1\36\1\17\1\37\1\17\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\2\17\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\7\1\73\2\7\1\73\1\7"+
    "\10\73\1\74\57\73\1\75\1\76\2\7\1\76\1\7"+
    "\11\76\1\74\56\76\1\77\1\100\1\101\1\7\1\100"+
    "\1\7\10\100\1\102\36\100\2\7\17\100\1\75\1\103"+
    "\1\101\1\7\1\103\1\7\11\103\1\104\35\103\2\7"+
    "\17\103\1\77\1\105\1\106\1\107\1\105\1\110\71\105"+
    "\77\0\1\111\1\112\1\0\1\113\72\0\2\111\1\0"+
    "\1\113\71\0\1\14\2\0\73\14\6\0\1\114\76\0"+
    "\1\16\2\115\1\116\1\117\6\0\1\117\62\0\3\17"+
    "\1\0\1\17\3\0\32\17\34\0\3\17\1\0\1\17"+
    "\3\0\10\17\1\120\21\17\34\0\1\121\103\0\1\122"+
    "\76\0\1\123\66\0\3\17\1\0\1\17\3\0\1\17"+
    "\1\124\30\17\34\0\3\17\1\0\1\17\3\0\5\17"+
    "\1\125\24\17\34\0\3\17\1\0\1\17\3\0\1\17"+
    "\1\126\30\17\34\0\2\17\1\127\1\0\1\17\3\0"+
    "\30\17\1\130\1\17\34\0\3\17\1\0\1\17\3\0"+
    "\5\17\1\131\24\17\34\0\3\17\1\0\1\17\3\0"+
    "\3\17\1\132\4\17\1\133\21\17\34\0\3\17\1\0"+
    "\1\17\3\0\10\17\1\134\21\17\34\0\3\17\1\0"+
    "\1\17\3\0\2\17\1\135\6\17\1\136\20\17\34\0"+
    "\3\17\1\0\1\17\3\0\3\17\1\137\26\17\34\0"+
    "\3\17\1\0\1\17\3\0\1\17\1\140\3\17\1\141"+
    "\13\17\1\142\10\17\34\0\3\17\1\0\1\17\3\0"+
    "\20\17\1\143\1\144\10\17\34\0\3\17\1\0\1\17"+
    "\3\0\2\17\1\145\6\17\1\146\3\17\1\147\1\150"+
    "\13\17\34\0\2\17\1\151\1\0\1\17\3\0\32\17"+
    "\34\0\3\17\1\0\1\17\3\0\5\17\1\152\24\17"+
    "\34\0\3\17\1\0\1\17\3\0\5\17\1\153\24\17"+
    "\34\0\3\17\1\0\1\17\3\0\5\17\1\154\2\17"+
    "\1\155\21\17\34\0\3\17\1\0\1\17\3\0\21\17"+
    "\1\156\10\17\34\0\2\17\1\157\1\0\1\17\3\0"+
    "\1\17\1\160\30\17\110\0\1\161\76\0\1\162\17\0"+
    "\1\163\63\0\1\164\11\0\1\165\64\0\1\166\10\0"+
    "\1\167\67\0\1\73\2\0\1\73\1\0\10\73\1\0"+
    "\57\73\16\0\1\170\3\0\1\171\2\0\1\172\16\0"+
    "\1\173\32\0\1\76\2\0\1\76\1\0\11\76\1\0"+
    "\56\76\17\0\1\174\2\0\1\171\2\0\1\172\16\0"+
    "\1\173\32\0\1\100\2\0\1\100\1\0\10\100\1\0"+
    "\36\100\2\0\17\100\3\0\1\175\110\0\1\176\60\0"+
    "\1\103\2\0\1\103\1\0\11\103\1\0\35\103\2\0"+
    "\17\103\17\0\1\177\61\0\1\107\77\0\1\110\72\0"+
    "\2\111\77\0\1\113\100\0\1\200\4\0\1\201\45\0"+
    "\1\201\22\0\3\17\1\0\1\17\3\0\16\17\1\202"+
    "\13\17\34\0\1\121\3\0\1\117\6\0\1\117\70\0"+
    "\1\203\76\0\1\204\66\0\3\17\1\0\1\17\3\0"+
    "\2\17\1\205\27\17\34\0\3\17\1\0\1\17\3\0"+
    "\24\17\1\206\5\17\34\0\3\17\1\0\1\17\3\0"+
    "\11\17\1\207\7\17\1\210\10\17\34\0\3\17\1\0"+
    "\1\17\3\0\3\17\1\211\25\17\1\212\34\0\3\17"+
    "\1\0\1\17\3\0\6\17\1\213\23\17\34\0\3\17"+
    "\1\0\1\17\3\0\24\17\1\214\5\17\34\0\3\17"+
    "\1\0\1\17\3\0\21\17\1\215\10\17\34\0\2\17"+
    "\1\216\1\0\1\17\3\0\32\17\34\0\3\17\1\0"+
    "\1\17\3\0\14\17\1\217\15\17\34\0\3\17\1\0"+
    "\1\17\3\0\11\17\1\220\20\17\34\0\2\17\1\221"+
    "\1\0\1\17\3\0\15\17\1\222\14\17\34\0\3\17"+
    "\1\0\1\17\3\0\5\17\1\223\24\17\34\0\3\17"+
    "\1\0\1\17\3\0\1\17\1\224\30\17\34\0\3\17"+
    "\1\0\1\17\3\0\2\17\1\225\27\17\34\0\3\17"+
    "\1\0\1\17\3\0\21\17\1\226\10\17\34\0\3\17"+
    "\1\0\1\17\3\0\24\17\1\227\5\17\34\0\3\17"+
    "\1\0\1\17\3\0\25\17\1\230\4\17\34\0\3\17"+
    "\1\0\1\17\3\0\1\17\1\231\30\17\34\0\3\17"+
    "\1\0\1\17\3\0\3\17\1\232\26\17\34\0\3\17"+
    "\1\0\1\17\3\0\26\17\1\233\3\17\34\0\3\17"+
    "\1\0\1\17\3\0\21\17\1\234\10\17\34\0\3\17"+
    "\1\0\1\17\3\0\11\17\1\235\20\17\34\0\3\17"+
    "\1\0\1\17\3\0\3\17\1\236\26\17\34\0\3\17"+
    "\1\0\1\17\3\0\10\17\1\237\21\17\34\0\3\17"+
    "\1\0\1\17\3\0\2\17\1\240\27\17\42\0\1\241"+
    "\76\0\1\241\66\0\1\200\75\0\3\17\1\0\1\17"+
    "\3\0\23\17\1\242\6\17\34\0\3\17\1\0\1\17"+
    "\3\0\3\17\1\243\26\17\34\0\3\17\1\0\1\17"+
    "\3\0\3\17\1\244\26\17\34\0\3\17\1\0\1\17"+
    "\3\0\15\17\1\245\14\17\34\0\3\17\1\0\1\17"+
    "\3\0\31\17\1\246\34\0\3\17\1\0\1\17\3\0"+
    "\3\17\1\247\26\17\34\0\3\17\1\0\1\17\3\0"+
    "\3\17\1\250\26\17\34\0\3\17\1\0\1\17\3\0"+
    "\6\17\1\251\23\17\34\0\3\17\1\0\1\17\3\0"+
    "\11\17\1\252\20\17\34\0\3\17\1\0\1\17\3\0"+
    "\11\17\1\253\20\17\34\0\3\17\1\0\1\17\3\0"+
    "\3\17\1\254\26\17\34\0\3\17\1\0\1\17\3\0"+
    "\16\17\1\255\13\17\34\0\3\17\1\0\1\17\3\0"+
    "\10\17\1\256\21\17\34\0\2\17\1\257\1\0\1\17"+
    "\3\0\32\17\34\0\3\17\1\0\1\17\3\0\20\17"+
    "\1\260\11\17\34\0\3\17\1\0\1\17\3\0\1\17"+
    "\1\261\30\17\34\0\3\17\1\0\1\17\3\0\23\17"+
    "\1\262\6\17\34\0\3\17\1\0\1\17\3\0\10\17"+
    "\1\263\21\17\34\0\3\17\1\0\1\17\3\0\2\17"+
    "\1\264\27\17\34\0\3\17\1\0\1\17\3\0\11\17"+
    "\1\265\20\17\34\0\2\17\1\266\1\0\1\17\3\0"+
    "\32\17\34\0\3\17\1\0\1\17\3\0\11\17\1\267"+
    "\20\17\34\0\3\17\1\0\1\17\3\0\24\17\1\270"+
    "\5\17\34\0\3\17\1\0\1\17\3\0\14\17\1\271"+
    "\15\17\34\0\3\17\1\0\1\17\3\0\25\17\1\272"+
    "\4\17\34\0\3\17\1\0\1\17\3\0\5\17\1\273"+
    "\24\17\34\0\3\17\1\0\1\17\3\0\3\17\1\274"+
    "\26\17\34\0\3\17\1\0\1\17\3\0\3\17\1\275"+
    "\26\17\34\0\3\17\1\0\1\17\3\0\5\17\1\276"+
    "\24\17\34\0\2\17\1\277\1\0\1\17\3\0\32\17"+
    "\34\0\3\17\1\0\1\17\3\0\3\17\1\300\26\17"+
    "\34\0\3\17\1\0\1\17\3\0\5\17\1\301\24\17"+
    "\34\0\3\17\1\0\1\17\3\0\10\17\1\302\21\17"+
    "\34\0\3\17\1\0\1\17\3\0\27\17\1\303\2\17"+
    "\34\0\3\17\1\0\1\17\3\0\24\17\1\304\5\17"+
    "\34\0\3\17\1\0\1\17\3\0\14\17\1\305\15\17"+
    "\34\0\3\17\1\0\1\17\3\0\11\17\1\306\20\17"+
    "\34\0\3\17\1\0\1\17\3\0\21\17\1\307\10\17"+
    "\34\0\3\17\1\0\1\17\3\0\10\17\1\310\21\17"+
    "\34\0\3\17\1\0\1\17\3\0\24\17\1\311\5\17"+
    "\34\0\3\17\1\0\1\17\3\0\2\17\1\312\27\17"+
    "\34\0\3\17\1\0\1\17\3\0\24\17\1\313\5\17"+
    "\34\0\2\17\1\314\1\0\1\17\3\0\32\17\34\0"+
    "\3\17\1\0\1\17\3\0\24\17\1\315\5\17\34\0"+
    "\2\17\1\316\1\0\1\17\3\0\32\17\34\0\3\17"+
    "\1\0\1\17\3\0\2\17\1\317\27\17\34\0\3\17"+
    "\1\0\1\17\3\0\26\17\1\320\3\17\34\0\3\17"+
    "\1\0\1\17\3\0\6\17\1\321\23\17\34\0\3\17"+
    "\1\0\1\17\3\0\3\17\1\322\26\17\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8370];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\2\1\2\11\6\1\1\11\24\1\12\11"+
    "\2\1\5\11\4\1\1\11\10\1\1\11\1\1\1\11"+
    "\4\1\2\11\2\0\2\1\2\0\35\1\15\11\2\0"+
    "\1\1\1\0\1\1\2\11\34\1\1\11\61\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    boolean DevolverNewline = true;
    boolean DevolverEOF     = false;
    int EstadoNoDevolverNewLine = 0;
    Deque<Integer> Stack = new LinkedList<Integer>();

    StringBuffer string = new StringBuffer();

    private Symbol symbol(int type,String value){
        LexerToken token = new LexerToken(yycolumn,yyline,type,value);
        return new Symbol(type,yyline,yycolumn,token);
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2264) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 24: 
          { return symbol(sym1.MOD, yytext());
          }
        case 93: break;
        case 46: 
          { return symbol(sym1.IS, yytext());
          }
        case 94: break;
        case 14: 
          { return symbol(sym1.SEMICOLON, yytext());
          }
        case 95: break;
        case 64: 
          { return symbol(sym1.AND, yytext());
          }
        case 96: break;
        case 35: 
          { yypushback(1); yybegin(YYINITIAL);
          }
        case 97: break;
        case 6: 
          { return symbol(sym1.INTEGER, yytext());
          }
        case 98: break;
        case 63: 
          { return symbol(sym1.NOT, yytext());
          }
        case 99: break;
        case 29: 
          { return symbol(sym1.MINOR, yytext());
          }
        case 100: break;
        case 52: 
          { return symbol(sym1.MAJOREQ, yytext());
          }
        case 101: break;
        case 41: 
          { return symbol(sym1.LONG, yytext());
          }
        case 102: break;
        case 85: 
          { return symbol(sym1.LAMBDA, yytext());
          }
        case 103: break;
        case 25: 
          { return symbol(sym1.ANDB, yytext());
          }
        case 104: break;
        case 15: 
          { EstadoNoDevolverNewLine +=1;
                                return symbol(sym1.LPAREN, yytext());
          }
        case 105: break;
        case 19: 
          { EstadoNoDevolverNewLine +=1;
                                return symbol(sym1.LCURLY, yytext());
          }
        case 106: break;
        case 38: 
          { if(EstadoNoDevolverNewLine==0){
            return symbol(sym1.NEWLINE, yytext());
        }
          }
        case 107: break;
        case 49: 
          { return symbol(sym1.DIVE, yytext());
          }
        case 108: break;
        case 18: 
          { EstadoNoDevolverNewLine -=1;
                                return symbol(sym1.RBRACKET, yytext());
          }
        case 109: break;
        case 16: 
          { EstadoNoDevolverNewLine -=1;
                                return symbol(sym1.RPAREN, yytext());
          }
        case 110: break;
        case 20: 
          { EstadoNoDevolverNewLine -=1;
                                return symbol(sym1.RCURLY, yytext());
          }
        case 111: break;
        case 4: 
          { if(EstadoNoDevolverNewLine==0){
                                    return symbol(sym1.TAB, yytext());
                                }
          }
        case 112: break;
        case 56: 
          { string.append('\n');
          }
        case 113: break;
        case 72: 
          { return symbol(sym1.ELIF, yytext());
          }
        case 114: break;
        case 59: 
          { string.append('\"');
          }
        case 115: break;
        case 84: 
          { return symbol(sym1.CLASS, yytext());
          }
        case 116: break;
        case 12: 
          { return symbol(sym1.COMA, yytext());
          }
        case 117: break;
        case 74: 
          { return symbol(sym1.TRUE, yytext());
          }
        case 118: break;
        case 67: 
          { return symbol(sym1.FOR, yytext());
          }
        case 119: break;
        case 48: 
          { return symbol(sym1.EXP, yytext());
          }
        case 120: break;
        case 89: 
          { return symbol(sym1.IMPORT, yytext());
          }
        case 121: break;
        case 80: 
          { return symbol(sym1.WHILE, yytext());
          }
        case 122: break;
        case 30: 
          { return symbol(sym1.MAJOR, yytext());
          }
        case 123: break;
        case 69: 
          { yybegin(YYINITIAL); return symbol(sym1.STRING3, string.toString());
          }
        case 124: break;
        case 57: 
          { string.append('\r');
          }
        case 125: break;
        case 81: 
          { return symbol(sym1.BREAK, yytext());
          }
        case 126: break;
        case 77: 
          { return symbol(sym1.PASS, yytext());
          }
        case 127: break;
        case 27: 
          { return symbol(sym1.XORB, yytext());
          }
        case 128: break;
        case 55: 
          { string.append('\'');
          }
        case 129: break;
        case 54: 
          { return symbol(sym1.DIFF, yytext());
          }
        case 130: break;
        case 58: 
          { string.append('\t');
          }
        case 131: break;
        case 83: 
          { return symbol(sym1.YIELD, yytext());
          }
        case 132: break;
        case 86: 
          { return symbol(sym1.EXCEPT, yytext());
          }
        case 133: break;
        case 90: 
          { return symbol(sym1.GLOBAL, yytext());
          }
        case 134: break;
        case 9: 
          { return symbol(sym1.MINUS, yytext());
          }
        case 135: break;
        case 79: 
          { return symbol(sym1.FALSE, yytext());
          }
        case 136: break;
        case 44: 
          { return symbol(sym1.AS, yytext());
          }
        case 137: break;
        case 62: 
          { string.setLength(0); yybegin(TRIPLE_STRING_DOUBLE_QUOTE);
          }
        case 138: break;
        case 36: 
          { return symbol(sym1.NEWLINE,yytext());
          }
        case 139: break;
        case 42: 
          { return symbol(sym1.FLOAT, yytext());
          }
        case 140: break;
        case 60: 
          { string.append("\r\n");
          }
        case 141: break;
        case 65: 
          { return symbol(sym1.DEL, yytext());
          }
        case 142: break;
        case 51: 
          { return symbol(sym1.SHIFTL, yytext());
          }
        case 143: break;
        case 82: 
          { return symbol(sym1.PRINT, yytext());
          }
        case 144: break;
        case 34: 
          { string.append(yytext());
          }
        case 145: break;
        case 43: 
          { return symbol(sym1.OR, yytext());
          }
        case 146: break;
        case 76: 
          { return symbol(sym1.WITH, yytext());
          }
        case 147: break;
        case 88: 
          { return symbol(sym1.ASSERT, yytext());
          }
        case 148: break;
        case 21: 
          { return symbol(sym1.PLUS, yytext());
          }
        case 149: break;
        case 47: 
          { return symbol(sym1.IF, yytext());
          }
        case 150: break;
        case 28: 
          { return symbol(sym1.NOTB, yytext());
          }
        case 151: break;
        case 32: 
          { String res = string.toString();
                                    yybegin(YYINITIAL);
                                    return symbol(sym1.STRING, res);
          }
        case 152: break;
        case 61: 
          { string.setLength(0); yybegin(TRIPLE_STRING_SINGLE_QUOTE);
          }
        case 153: break;
        case 26: 
          { return symbol(sym1.ORB, yytext());
          }
        case 154: break;
        case 92: 
          { return symbol(sym1.CONTINUE, yytext());
          }
        case 155: break;
        case 2: 
          { if(EstadoNoDevolverNewLine==0){
            if(Stack.size()>0){
                yypushback(1);
                if(DevolverNewline){
                    DevolverNewline = false;
                    return symbol(sym1.NEWLINE, yytext());
                }else{
                    Stack.pop();
                    if(Stack.size()==0){
                        DevolverNewline = true;
                    }
                    return symbol(sym1.DEDENT,"");
                }
            }else{
                return symbol(sym1.NEWLINE, yytext());
            }
        }
          }
        case 156: break;
        case 22: 
          { return symbol(sym1.MULT, yytext());
          }
        case 157: break;
        case 17: 
          { EstadoNoDevolverNewLine +=1;
                                return symbol(sym1.LBRACKET, yytext());
          }
        case 158: break;
        case 11: 
          { string.setLength(0); yybegin(DOUBLE_QUOTE_STRING);
          }
        case 159: break;
        case 33: 
          { string.append('\\');
          }
        case 160: break;
        case 73: 
          { return symbol(sym1.EXEC, yytext());
          }
        case 161: break;
        case 68: 
          { return symbol(sym1.TRY, yytext());
          }
        case 162: break;
        case 40: 
          { return symbol(sym1.EQUALS, yytext());
          }
        case 163: break;
        case 50: 
          { return symbol(sym1.MINOREQ, yytext());
          }
        case 164: break;
        case 23: 
          { return symbol(sym1.DIV, yytext());
          }
        case 165: break;
        case 75: 
          { return symbol(sym1.FROM, yytext());
          }
        case 166: break;
        case 7: 
          { return symbol(sym1.NAME, yytext());
          }
        case 167: break;
        case 37: 
          { //HAY QUE VER BIEN COMO FUNCIONA EL yypushback PERO ESE ES EL CAMINO
      int indentLevel = yylength();
      int nivelStack = Stack.size() == 0 ? 0 : Stack.peek();

      if(indentLevel == nivelStack){
          yybegin(YYINITIAL);
      }else if(indentLevel < nivelStack){
          //tengo que emitir tokens DEDENT hasta llegar al nivel del stack
          Stack.pop();
          yypushback(indentLevel);
          return symbol(sym1.DEDENT,yytext());
      }else{
          //aumento el nivel de indentacion
          nivelStack+=1;
          yypushback((indentLevel-nivelStack));
          Stack.push(nivelStack);
          return symbol(sym1.INDENT,yytext());
      }
          }
        case 168: break;
        case 31: 
          { string.append( yytext() );
          }
        case 169: break;
        case 87: 
          { return symbol(sym1.RETURN, yytext());
          }
        case 170: break;
        case 45: 
          { return symbol(sym1.IN, yytext());
          }
        case 171: break;
        case 13: 
          { return symbol(sym1.COLON, yytext());
          }
        case 172: break;
        case 70: 
          { return symbol(sym1.NONE, yytext());
          }
        case 173: break;
        case 1: 
          { ParserStatus.parsingWasSuccessfull=false; ParserStatus.parsingUnsuccessfullMessage=" Caractér inesperado < "+yytext()+" > en la línea "+(yyline+1);
          }
        case 174: break;
        case 78: 
          { return symbol(sym1.RAISE, yytext());
          }
        case 175: break;
        case 10: 
          { string.setLength(0); yybegin(SINGLE_QUOTE_STRING);
          }
        case 176: break;
        case 39: 
          { if(EstadoNoDevolverNewLine>0){

        }else{
            yypushback(yylength());
            yybegin(INDENTATION_TAB);
        }
          }
        case 177: break;
        case 91: 
          { return symbol(sym1.FINALLY, yytext());
          }
        case 178: break;
        case 8: 
          { return symbol(sym1.DOT, yytext());
          }
        case 179: break;
        case 66: 
          { return symbol(sym1.DEF, yytext());
          }
        case 180: break;
        case 53: 
          { return symbol(sym1.SHIFTR, yytext());
          }
        case 181: break;
        case 5: 
          { return symbol(sym1.ASSIGN, yytext());
          }
        case 182: break;
        case 71: 
          { return symbol(sym1.ELSE, yytext());
          }
        case 183: break;
        case 3: 
          { 
          }
        case 184: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     if(Stack.size()<=0)
    {
//        yypushback(0);
//        if(DevolverEOF){
//            DevolverEOF = false;
            return symbol(sym1.EOF,"");
//        } else {
//            DevolverEOF = true;
//            return symbol(sym1.NEWLINE,"");
//        }
    }else{
        yypushback(0);
        if(DevolverNewline){
            DevolverNewline = false;
            return symbol(sym1.NEWLINE,"");
        }else{
            DevolverNewline = true;
            Stack.pop();
            return symbol(sym1.DEDENT,yytext());
        }
    }
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
