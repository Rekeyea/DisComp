// CUP specification for a simple expression evaluator (no actions)
package com.pyjava.parser;

import com.pyjava.core.exceptions.PyException;
import com.pyjava.core.runtime.*;
import java_cup.runtime.*;
import com.pyjava.parser.codegen.*;
import com.pyjava.core.*;
import java.util.Deque;
import java.util.LinkedList;
import java.util.Scanner;



action code
{:

:};


parser code
{:



    public void syntax_error(Symbol s){
        System.out.println("Error de sintaxis "+s.sym+" en la linea "+(s.left+1)+" y la columna "+s.right);
        System.out.println(s.value);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error de sintaxis "+s.sym);
    }

:};

init with
{:
    //MANTENGO UN STACK DE GENERADORES Y PUSHEO EL PRIMERO
    ParserStatus.StackGenerador.push(new Generador());
:};





/* Terminals (tokens returned by the scanner). */

terminal           DEL, FROM, WHILE, AS, ELIF, GLOBAL, WITH, ASSERT, ELSE, IF, PASS, YIELD, BREAK, EXCEPT, IMPORT, CLASS, EXEC, IN, RAISE, CONTINUE, FINALLY, IS, RETURN, DEF, FOR, LAMBDA, TRY, TYPE, PRINT;
terminal           NEWLINE, WHITESPACE, TAB, COMMENT, NAME, ASSIGN, INTEGER, LONG, FLOAT, STRING, STRING3;
terminal           COMA, DOT, COLON, SEMICOLON, RPAREN, LPAREN, RBRACKET, LBRACKET, RCURLY, LCURLY;
terminal           PLUS, MINUS, MULT, DIV, EXP, DIVE, MOD;
terminal           ANDB, ORB, XORB, NOTB, SHIFTL, SHIFTR;
terminal           AND, OR, NOT, EQUALS, DIFF, MINOR, MAJOR, MINOREQ, MAJOREQ;
terminal            INDENT, DEDENT;
terminal            NONE, TRUE, FALSE;


non terminal constant;
non terminal atom;
non terminal assignment;
non terminal binary_operator;
non terminal unary_operator;
non terminal print_stmt;
non terminal expression;
non terminal slice_expression;
non terminal slice_rest;
non terminal slice_step;
non terminal testcoma;
non terminal return_stmt;
non terminal namecoma;
non terminal namelist;
non terminal expr_stmt;
non terminal argument;
non terminal named_argument;
non terminal named_argument_list;
non terminal argument_list;
non terminal trailer;
non terminal func_call;
non terminal integer;
non terminal float;
non terminal long;
non terminal flow_stmt;
non terminal small_stmt;
non terminal stmt;
non terminal compound_stmt;
non terminal if_stmt;
non terminal while_stmt;
non terminal for_stmt;
non terminal stmt_list;
non terminal suite;
non terminal name;
non terminal dictorsetmaker;
non terminal dictorsetelement;
non terminal dictionary;
non terminal listmaker;
non terminal list;
non terminal tuple;
non terminal tupletrail;
non terminal tuplemaker;
non terminal printtrail;
non terminal subscript;
non terminal exprsub;
non terminal assign_exprsub;
non terminal single_input;
non terminal input;
non terminal func_def;
non terminal func_parameters;

non terminal program;

precedence right RETURN;
precedence right LPAREN;
precedence left RPAREN;
precedence right LBRACKET;
precedence left RBRACKET;
precedence right LCURLY;
precedence left RCURLY;
precedence left OR;
precedence left AND;
precedence left NOT;
precedence left IN, MINOR, MAJOR, MINOREQ, MAJOREQ,DIFF, EQUALS;
precedence left ORB;
precedence left XORB;
precedence left ANDB;
precedence left SHIFTL, SHIFTR;
precedence left PLUS, MINUS;
precedence left MULT, DIV, MOD, DIVE;
precedence right EXP;
precedence left NOTB;
precedence right COMA;
precedence right ASSIGN;
precedence left DOT;
precedence left COLON;
precedence left NEWLINE;
precedence left ELSE;

program ::= input:i         {:
                                System.out.println("EL PROGRAMA ESTA BIEN");
                                Bloque b = ParseResult.getAs(i);
                                Code code = ParserStatus.StackGenerador.peek().crearCodigo("Compilador","Compilador",b);
                                RESULT = code;
                            :};

input ::=   single_input:s NEWLINE input:i          {: RESULT = RuleGenerator.joinBloques(s,i); :}
            | single_input:s NEWLINE                {: RESULT = s; :};

single_input ::= small_stmt:s             {: RESULT = s; :}
                 | compound_stmt:s          {: RESULT = s; :};

integer ::=    INTEGER:n                {: RESULT = RuleGenerator.generateConstant(n); :}
               |MINUS INTEGER:n        {: RESULT = RuleGenerator.generateMinusConstant(n); :};

long ::=   LONG:n                       {: RESULT = RuleGenerator.generateConstant(n); :}
           |MINUS LONG:n               {: RESULT = RuleGenerator.generateMinusConstant(n); :};

float ::=   FLOAT:n                     {: RESULT = RuleGenerator.generateConstant(n); :}
            |MINUS FLOAT:n             {: RESULT = RuleGenerator.generateMinusConstant(n); :};

constant ::= integer:n          {: RESULT = n; :}
             |long:n            {: RESULT = n; :}
             |float:n           {: RESULT = n; :}
             |STRING:n          {: RESULT = RuleGenerator.generateConstant(n); :}
             |STRING3:n         {: RESULT = RuleGenerator.generateConstant(n); :}
             |NONE:n            {: RESULT = RuleGenerator.generateConstant(n); :}
             |TRUE:n            {: RESULT = RuleGenerator.generateConstant(n); :}
             |FALSE:n           {: RESULT = RuleGenerator.generateConstant(n); :};

name ::= NAME:n  {:RESULT = RuleGenerator.generateName((LexerToken)n); :};

atom ::=    name:n                              {: RESULT = n; :}
            |constant:n                         {: RESULT = n; :};


tuple               ::= LPAREN:b RPAREN                             {: RESULT = RuleGenerator.generateListTupleDict(b,null,OpCode.CREATE_TUPLE); :}
                        |LPAREN:b tuplemaker:l RPAREN               {: RESULT = RuleGenerator.generateListTupleDict(b,l,OpCode.CREATE_TUPLE);  :};

tupletrail          ::= expression:e                                {: RESULT = RuleGenerator.generateListElements(e,null,null); :}
                        |expression:e COMA:c tupletrail:l           {: RESULT = RuleGenerator.generateListElements(e,c,l); :};

tuplemaker          ::= expression:e COMA:c                         {: RESULT = RuleGenerator.generateListElements(e,null,null); :}
                        |expression:e COMA:c tupletrail:l           {: RESULT = RuleGenerator.generateListElements(e,c,l); :};


list                ::= LBRACKET:b RBRACKET                         {: RESULT = RuleGenerator.generateListTupleDict(b,null,OpCode.CREATE_LIST); :}
                        |LBRACKET:b listmaker:l RBRACKET            {: RESULT = RuleGenerator.generateListTupleDict(b,l,OpCode.CREATE_LIST);  :};

listmaker           ::= expression:e                            {: RESULT = RuleGenerator.generateListElements(e,null,null); :}
                        |expression:e COMA:c listmaker:l        {: RESULT = RuleGenerator.generateListElements(e,c,l); :};


dictionary          ::= LCURLY:c dictorsetmaker:e RCURLY            {: RESULT = RuleGenerator.generateListTupleDict(c,e,OpCode.CREATE_DICT); :}
                        |LCURLY:c RCURLY                            {: RESULT = RuleGenerator.generateListTupleDict(c,null,OpCode.CREATE_DICT); :};

dictorsetelement    ::= expression:e1 COLON:c expression:e2                 {: RESULT = RuleGenerator.generateDictItem(e1,c,e2); :};
dictorsetmaker      ::= dictorsetelement:d                                  {: RESULT = RuleGenerator.generateListElements(d,null,null); :}
                        |dictorsetelement:e1 COMA:c dictorsetmaker:e2       {: RESULT = RuleGenerator.generateListElements(e1,c,e2); :};

subscript ::=   LBRACKET:l slice_expression:e RBRACKET                    {: RESULT = RuleGenerator.generateSubscript(l,e,null); :}
                |LBRACKET:l slice_expression:e RBRACKET subscript:s       {: RESULT = RuleGenerator.generateSubscript(l,e,s); :};

slice_expression ::= expression:e                                           {: RESULT = e; :}
                     | expression:e COLON                                   {: RESULT = e; :}
                     | expression:e COLON slice_rest:s                      {: RESULT = e; :}
                     | COLON slice_rest:s                                   {: RESULT = s; :}
                     | COLON:c                                              {: RESULT = c; :};

slice_rest ::= expression:e                                                 {: RESULT = e; :}
               | expression:e1 COLON expression:e2                          {: RESULT = e1; :}
               | expression:e COLON                                         {: RESULT = e; :}
               | COLON expression:e                                         {: RESULT = e; :}
               | COLON: c                                                   {: RESULT = c; :};

exprsub ::= expression:exp1 subscript:sub                           {: RESULT = RuleGenerator.generateFullSubscript(exp1,sub); :};

expression ::=  atom:n                                          {: RESULT = RuleGenerator.loadNameOrConst(n); :}
                |dictionary:n                                   {: RESULT = n; :}
                |list:n                                         {: RESULT = n; :}
                |tuple:n                                        {: RESULT = n; :}
				|func_call:f                                    {: RESULT = f; :}
				|exprsub:e                                      {: RESULT = e; :}
                |LPAREN expression:n RPAREN                     {: RESULT = n; :}
                |expression:a OR:op expression:b                {: RESULT = RuleGenerator.generateBinaryOperation(op,a,b); :}
                |expression:a AND:op expression:b               {: RESULT = RuleGenerator.generateBinaryOperation(op,a,b); :}
                |expression:a MINOR:op expression:b             {: RESULT = RuleGenerator.generateBinaryOperation(op,a,b); :}
                |expression:a MAJOR:op expression:b             {: RESULT = RuleGenerator.generateBinaryOperation(op,a,b); :}
                |expression:a MINOREQ:op expression:b           {: RESULT = RuleGenerator.generateBinaryOperation(op,a,b); :}
                |expression:a MAJOREQ:op expression:b           {: RESULT = RuleGenerator.generateBinaryOperation(op,a,b); :}
                |expression:a DIFF:op expression:b              {: RESULT = RuleGenerator.generateBinaryOperation(op,a,b); :}
                |expression:a EQUALS:op expression:b            {: RESULT = RuleGenerator.generateBinaryOperation(op,a,b); :}
                |expression:a ORB:op expression:b               {: RESULT = RuleGenerator.generateBinaryOperation(op,a,b); :}
                |expression:a XORB:op expression:b              {: RESULT = RuleGenerator.generateBinaryOperation(op,a,b); :}
                |expression:a ANDB:op expression:b              {: RESULT = RuleGenerator.generateBinaryOperation(op,a,b); :}
                |expression:a SHIFTL:op expression:b            {: RESULT = RuleGenerator.generateBinaryOperation(op,a,b); :}
                |expression:a SHIFTR:op expression:b            {: RESULT = RuleGenerator.generateBinaryOperation(op,a,b); :}
                |expression:a PLUS:op expression:b              {: RESULT = RuleGenerator.generateBinaryOperation(op,a,b); :}
                |expression:a MINUS:op expression:b             {: RESULT = RuleGenerator.generateBinaryOperation(op,a,b); :}
                |expression:a MULT:op expression:b              {: RESULT = RuleGenerator.generateBinaryOperation(op,a,b); :}
                |expression:a DIV:op expression:b               {: RESULT = RuleGenerator.generateBinaryOperation(op,a,b); :}
                |expression:a MOD:op expression:b               {: RESULT = RuleGenerator.generateBinaryOperation(op,a,b); :}
                |expression:a DIVE:op expression:b              {: RESULT = RuleGenerator.generateBinaryOperation(op,a,b); :}
                |expression:a EXP:op expression:b               {: RESULT = RuleGenerator.generateBinaryOperation(op,a,b); :}
                |NOT:op expression:a                            {: RESULT = RuleGenerator.generateUnaryOperation(op,a); :}
                |NOTB:op expression:a                           {: RESULT = RuleGenerator.generateUnaryOperation(op,a); :};



printtrail ::=  expression:e                            {: RESULT = RuleGenerator.generatePrint(e,null,null); :}
                |expression:e COMA:c printtrail:p       {: RESULT = RuleGenerator.generatePrint(e,c,p); :};

print_stmt ::= PRINT:p printtrail:n                     {: RESULT = RuleGenerator.generatePrintNewline(p,n); :};


return_stmt ::= RETURN:r                                    {: RESULT = RuleGenerator.generateReturnEmpty(r); :}
                |RETURN:r expression:e                      {: RESULT = RuleGenerator.generateReturnExp(r,e); :}
                |RETURN:r tuplemaker:t                      {: RESULT = RuleGenerator.generateReturnTup(r,t); :};






assign_exprsub ::= expression:exp1 subscript:sub            {: RESULT = RuleGenerator.generateSubscriptForAssign(exp1,sub); :};

namecoma ::=    COMA name:n                                 {:
                                                                ParseResult pr = RuleGenerator.storeName(n);
                                                                pr.argumentos = 1;
                                                                RESULT = pr;
                                                            :}
                |COMA assign_exprsub:n                      {: RESULT = RuleGenerator.addSetIndex(n); :}
                |COMA:c name:n namecoma:nc                  {: RESULT = RuleGenerator.joinNames(n,nc); :}
                |COMA assign_exprsub:n namecoma:nc          {: RESULT = RuleGenerator.joinNames(n,nc); :};

namelist ::=    name:n namecoma:nc                          {: RESULT = RuleGenerator.joinNames(n,nc); :}
                |assign_exprsub:e namecoma:nc               {: RESULT = RuleGenerator.joinNames(e,nc); :};




expr_stmt ::=   name:n ASSIGN:au expression:e                       {: RESULT = RuleGenerator.generateAssignation(n,au,e); :}
                |name:n ASSIGN:au tuplemaker:tr                     {: RESULT = RuleGenerator.generateTupleMakerSingleAssignation(n,au,tr); :}
                |assign_exprsub:e  ASSIGN:au expression:exp         {: RESULT = RuleGenerator.generateSubscriptAssignation(e,au,exp); :}
                |namelist:n ASSIGN:au tuplemaker:tr                 {: RESULT = RuleGenerator.generateTupleMakerAssignation(n,au,tr); :}
                |namelist:n ASSIGN:au expression:tr                 {: RESULT = RuleGenerator.generateUnpackAssignation(n,au,tr); :};



named_argument ::= NAME ASSIGN expression;
named_argument_list ::= named_argument
                        |named_argument COMA named_argument_list;

argument_list ::=   expression:e                            {: RESULT = RuleGenerator.generateArguments(null,e,null); :}
                    |expression:e COMA:c argument_list:al   {: RESULT = RuleGenerator.generateArguments(c,e,al); :}
                    |named_argument_list;

trailer ::= LPAREN RPAREN                       {: RESULT = null; :}
            |LPAREN argument_list:al RPAREN     {: RESULT = al; :};

func_call ::=   expression:e DOT:d name:n trailer:t     {: RESULT = RuleGenerator.generateNameFunctionCall(e,d,n,t); :}
                |name:n trailer:t                       {: RESULT = RuleGenerator.generateFunctionCall(n,t); :};





flow_stmt ::=   BREAK
                |CONTINUE
                |return_stmt:r              {: RESULT = r; :};

small_stmt ::=  expr_stmt:p                 {: RESULT = p; :}
                |expression:e               {: RESULT = e; :}
                |print_stmt:p               {: RESULT = p; :}
                |flow_stmt:f                {: RESULT = f; :};

stmt ::=    small_stmt:p NEWLINE            {: RESULT = p; :}
            |compound_stmt:c        {: RESULT = c; :};

compound_stmt ::=   if_stmt:f               {: RESULT = f; :}
                    |while_stmt:f           {: RESULT = f; :}
                    |for_stmt:f             {: RESULT = f; :}
                    |func_def:f             {: RESULT = f; :};

stmt_list ::=   stmt:s                      {: RESULT = s; :}
                |stmt:s stmt_list:l         {: RESULT = RuleGenerator.joinBloques(s,l); :};

suite ::=   stmt:s                                          {: RESULT = s; :}
            |NEWLINE INDENT stmt_list:s DEDENT                {: RESULT = s; :};

if_stmt ::=     IF expression:e COLON:c suite:s1                                            {: RESULT = RuleGenerator.generateIfStatement(e,c,s1,null,null); :}
            | IF expression:e COLON:c1 suite:s1 ELSE COLON:c2 suite:s2                      {: RESULT = RuleGenerator.generateIfStatement(e,c1,s1,c2,s2); :};

for_stmt ::= FOR name:n IN expression:exp COLON suite:b       {: RESULT=RuleGenerator.generateForStatement(n,exp,b); :};

while_stmt ::= WHILE expression:e COLON:c suite:b                       {: RESULT=RuleGenerator.generateWhileStatement(e,c,b); :};



func_parameters ::= NAME:n                                                      {: RESULT = RuleGenerator.generateFunParams(n,null); :}
                    |NAME:n COMA func_parameters:fp                             {: RESULT = RuleGenerator.generateFunParams(n,fp); :};


func_def ::=    DEF:d name:n LPAREN func_parameters:fp RPAREN COLON
                {: RuleGenerator.generateNewScope(); :}
                suite:s     {: RESULT = RuleGenerator.generateFunctionDef(d,n,fp,s); :}
                |DEF:d name:n LPAREN RPAREN COLON
                {: RuleGenerator.generateNewScope(); :}
                suite:s     {: RESULT = RuleGenerator.generateFunctionDef(d,n,null,s); :};