// CUP specification for a simple expression evaluator (no actions)
package com.pyjava.parser;


import java_cup.runtime.*;
import java.util.Scanner;

parser code
{:
    public void syntax_error(Symbol s){
        System.out.println("Error de sintaxis "+s.sym+" en la linea "+(s.left+1)+" y la columna "+s.right);
        System.out.println(s.value);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error de sintaxis "+s.sym);
    }
    //MANTENGO UN STACK DE GENERADORES Y PUSHEO EL PRIMERO
    Deque<Generador> StackGenerador = new LinkedList<Generador>();
    StackGenerador.push(new Generador());
:}


/* Terminals (tokens returned by the scanner). */

terminal           DEL, FROM, WHILE, AS, ELIF, GLOBAL, WITH, ASSERT, ELSE, IF, PASS, YIELD, BREAK, EXCEPT, IMPORT, CLASS, EXEC, IN, RAISE, CONTINUE, FINALLY, IS, RETURN, DEF, FOR, LAMBDA, TRY, TYPE, PRINT;
terminal           NEWLINE, WHITESPACE, TAB, COMMENT, NAME, ASSIGN, INTEGER, LONG, FLOAT, STRING, STRING3;
terminal           COMA, DOT, COLON, SEMICOLON, RPAREN, LPAREN, RBRACKET, LBRACKET, RCURLY, LCURLY;
terminal           PLUS, MINUS, MULT, DIV, EXP, DIVE, MOD;
terminal           ANDB, ORB, XORB, NOTB, SHIFTL, SHIFTR;
terminal           AND, OR, NOT, EQUALS, DIFF, MINOR, MAJOR, MINOREQ, MAJOREQ;
terminal            INDENT, DEDENT;
terminal            NONE, TRUE, FALSE;


non terminal atom;
non terminal program;


program ::= atom:a NEWLINE {: System.out.println((Name)a.value); :};

atom ::=    NAME:n            {: RESULT = StackGenerador.peek().CreateName((String)n); :}
            |INTEGER
            |LONG
            |FLOAT
            |STRING
            |STRING3
            |NONE
            |TRUE
            |FALSE;

