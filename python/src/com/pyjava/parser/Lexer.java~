/* The following code was generated by JFlex 1.4.3 on 7/12/15 4:41 PM */

/*SECCIÓN DE CÓDIGO DE USUARIO*/
package com.pyjava.parser;
import java_cup.runtime.*;
import jflex.sym;
import java.util.Deque;
import java.util.LinkedList;
import com.pyjava.parser.codegen.LexerToken;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 7/12/15 4:41 PM from the specification file
 * <tt>./language/jflex/python.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int TRIPLE_STRING = 4;
  public static final int INDENTATION_TAB = 8;
  public static final int INDENTATION_WS = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\43\1\4\1\2\2\0\1\1\16\43\4\0\1\3\1\104\1\32"+
    "\1\5\1\42\1\75\1\76\1\33\1\65\1\66\1\73\1\26\1\62"+
    "\1\27\1\12\1\74\12\7\1\63\1\64\1\102\1\6\1\103\2\0"+
    "\1\16\1\42\1\17\1\42\1\25\1\14\2\42\1\21\2\42\1\10"+
    "\1\42\1\23\1\22\1\31\1\42\1\15\1\42\1\20\3\42\1\30"+
    "\2\42\1\67\1\105\1\70\1\100\1\13\1\0\1\40\1\53\1\61"+
    "\1\44\1\24\1\45\1\52\1\50\1\51\1\42\1\57\1\11\1\46"+
    "\1\35\1\34\1\55\1\42\1\36\1\41\1\54\1\37\1\42\1\47"+
    "\1\60\1\56\1\42\1\71\1\77\1\72\1\101\41\43\2\0\4\42"+
    "\4\0\1\42\2\0\1\43\7\0\1\42\4\0\1\42\5\0\27\42"+
    "\1\0\37\42\1\0\u01ca\42\4\0\14\42\16\0\5\42\7\0\1\42"+
    "\1\0\1\42\21\0\160\43\5\42\1\0\2\42\2\0\4\42\10\0"+
    "\1\42\1\0\3\42\1\0\1\42\1\0\24\42\1\0\123\42\1\0"+
    "\213\42\1\0\5\43\2\0\236\42\11\0\46\42\2\0\1\42\7\0"+
    "\47\42\7\0\1\42\1\0\55\43\1\0\1\43\1\0\2\43\1\0"+
    "\2\43\1\0\1\43\10\0\33\42\5\0\3\42\15\0\5\43\6\0"+
    "\1\42\4\0\13\43\5\0\53\42\37\43\4\0\2\42\1\43\143\42"+
    "\1\0\1\42\10\43\1\0\6\43\2\42\2\43\1\0\4\43\2\42"+
    "\12\43\3\42\2\0\1\42\17\0\1\43\1\42\1\43\36\42\33\43"+
    "\2\0\131\42\13\43\1\42\16\0\12\43\41\42\11\43\2\42\4\0"+
    "\1\42\5\0\26\42\4\43\1\42\11\43\1\42\3\43\1\42\5\43"+
    "\22\0\31\42\3\43\104\0\1\42\1\0\13\42\67\0\33\43\1\0"+
    "\4\43\66\42\3\43\1\42\22\43\1\42\7\43\12\42\2\43\2\0"+
    "\12\43\1\0\7\42\1\0\7\42\1\0\3\43\1\0\10\42\2\0"+
    "\2\42\2\0\26\42\1\0\7\42\1\0\1\42\3\0\4\42\2\0"+
    "\1\43\1\42\7\43\2\0\2\43\2\0\3\43\1\42\10\0\1\43"+
    "\4\0\2\42\1\0\3\42\2\43\2\0\12\43\4\42\7\0\1\42"+
    "\5\0\3\43\1\0\6\42\4\0\2\42\2\0\26\42\1\0\7\42"+
    "\1\0\2\42\1\0\2\42\1\0\2\42\2\0\1\43\1\0\5\43"+
    "\4\0\2\43\2\0\3\43\3\0\1\43\7\0\4\42\1\0\1\42"+
    "\7\0\14\43\3\42\1\43\13\0\3\43\1\0\11\42\1\0\3\42"+
    "\1\0\26\42\1\0\7\42\1\0\2\42\1\0\5\42\2\0\1\43"+
    "\1\42\10\43\1\0\3\43\1\0\3\43\2\0\1\42\17\0\2\42"+
    "\2\43\2\0\12\43\1\0\1\42\17\0\3\43\1\0\10\42\2\0"+
    "\2\42\2\0\26\42\1\0\7\42\1\0\2\42\1\0\5\42\2\0"+
    "\1\43\1\42\7\43\2\0\2\43\2\0\3\43\10\0\2\43\4\0"+
    "\2\42\1\0\3\42\2\43\2\0\12\43\1\0\1\42\20\0\1\43"+
    "\1\42\1\0\6\42\3\0\3\42\1\0\4\42\3\0\2\42\1\0"+
    "\1\42\1\0\2\42\3\0\2\42\3\0\3\42\3\0\14\42\4\0"+
    "\5\43\3\0\3\43\1\0\4\43\2\0\1\42\6\0\1\43\16\0"+
    "\12\43\11\0\1\42\7\0\3\43\1\0\10\42\1\0\3\42\1\0"+
    "\27\42\1\0\12\42\1\0\5\42\3\0\1\42\7\43\1\0\3\43"+
    "\1\0\4\43\7\0\2\43\1\0\2\42\6\0\2\42\2\43\2\0"+
    "\12\43\22\0\2\43\1\0\10\42\1\0\3\42\1\0\27\42\1\0"+
    "\12\42\1\0\5\42\2\0\1\43\1\42\7\43\1\0\3\43\1\0"+
    "\4\43\7\0\2\43\7\0\1\42\1\0\2\42\2\43\2\0\12\43"+
    "\1\0\2\42\17\0\2\43\1\0\10\42\1\0\3\42\1\0\51\42"+
    "\2\0\1\42\7\43\1\0\3\43\1\0\4\43\1\42\10\0\1\43"+
    "\10\0\2\42\2\43\2\0\12\43\12\0\6\42\2\0\2\43\1\0"+
    "\22\42\3\0\30\42\1\0\11\42\1\0\1\42\2\0\7\42\3\0"+
    "\1\43\4\0\6\43\1\0\1\43\1\0\10\43\22\0\2\43\15\0"+
    "\60\42\1\43\2\42\7\43\4\0\10\42\10\43\1\0\12\43\47\0"+
    "\2\42\1\0\1\42\2\0\2\42\1\0\1\42\2\0\1\42\6\0"+
    "\4\42\1\0\7\42\1\0\3\42\1\0\1\42\1\0\1\42\2\0"+
    "\2\42\1\0\4\42\1\43\2\42\6\43\1\0\2\43\1\42\2\0"+
    "\5\42\1\0\1\42\1\0\6\43\2\0\12\43\2\0\4\42\40\0"+
    "\1\42\27\0\2\43\6\0\12\43\13\0\1\43\1\0\1\43\1\0"+
    "\1\43\4\0\2\43\10\42\1\0\44\42\4\0\24\43\1\0\2\43"+
    "\5\42\13\43\1\0\44\43\11\0\1\43\71\0\53\42\24\43\1\42"+
    "\12\43\6\0\6\42\4\43\4\42\3\43\1\42\3\43\2\42\7\43"+
    "\3\42\4\43\15\42\14\43\1\42\17\43\2\0\46\42\1\0\1\42"+
    "\5\0\1\42\2\0\53\42\1\0\u014d\42\1\0\4\42\2\0\7\42"+
    "\1\0\1\42\1\0\4\42\2\0\51\42\1\0\4\42\2\0\41\42"+
    "\1\0\4\42\2\0\7\42\1\0\1\42\1\0\4\42\2\0\17\42"+
    "\1\0\71\42\1\0\4\42\2\0\103\42\2\0\3\43\40\0\20\42"+
    "\20\0\125\42\14\0\u026c\42\2\0\21\42\1\0\32\42\5\0\113\42"+
    "\3\0\3\42\17\0\15\42\1\0\4\42\3\43\13\0\22\42\3\43"+
    "\13\0\22\42\2\43\14\0\15\42\1\0\3\42\1\0\2\43\14\0"+
    "\64\42\40\43\3\0\1\42\3\0\2\42\1\43\2\0\12\43\41\0"+
    "\3\43\2\0\12\43\6\0\130\42\10\0\51\42\1\43\1\42\5\0"+
    "\106\42\12\0\35\42\3\0\14\43\4\0\14\43\12\0\12\43\36\42"+
    "\2\0\5\42\13\0\54\42\4\0\21\43\7\42\2\43\6\0\12\43"+
    "\46\0\27\42\5\43\4\0\65\42\12\43\1\0\35\43\2\0\13\43"+
    "\6\0\12\43\15\0\1\42\130\0\5\43\57\42\21\43\7\42\4\0"+
    "\12\43\21\0\11\43\14\0\3\43\36\42\15\43\2\42\12\43\54\42"+
    "\16\43\14\0\44\42\24\43\10\0\12\43\3\0\3\42\12\43\44\42"+
    "\122\0\3\43\1\0\25\43\4\42\1\43\4\42\3\43\2\42\11\0"+
    "\300\42\47\43\25\0\4\43\u0116\42\2\0\6\42\2\0\46\42\2\0"+
    "\6\42\2\0\10\42\1\0\1\42\1\0\1\42\1\0\1\42\1\0"+
    "\37\42\2\0\65\42\1\0\7\42\1\0\1\42\3\0\3\42\1\0"+
    "\7\42\3\0\4\42\2\0\6\42\4\0\15\42\5\0\3\42\1\0"+
    "\7\42\16\0\5\43\32\0\5\43\20\0\2\42\23\0\1\42\13\0"+
    "\5\43\5\0\6\43\1\0\1\42\15\0\1\42\20\0\15\42\3\0"+
    "\33\42\25\0\15\43\4\0\1\43\3\0\14\43\21\0\1\42\4\0"+
    "\1\42\2\0\12\42\1\0\1\42\3\0\5\42\6\0\1\42\1\0"+
    "\1\42\1\0\1\42\1\0\4\42\1\0\13\42\2\0\4\42\5\0"+
    "\5\42\4\0\1\42\21\0\51\42\u0a77\0\57\42\1\0\57\42\1\0"+
    "\205\42\6\0\4\42\3\43\2\42\14\0\46\42\1\0\1\42\5\0"+
    "\1\42\2\0\70\42\7\0\1\42\17\0\1\43\27\42\11\0\7\42"+
    "\1\0\7\42\1\0\7\42\1\0\7\42\1\0\7\42\1\0\7\42"+
    "\1\0\7\42\1\0\7\42\1\0\40\43\57\0\1\42\u01d5\0\3\42"+
    "\31\0\11\42\6\43\1\0\5\42\2\0\5\42\4\0\126\42\2\0"+
    "\2\43\2\0\3\42\1\0\132\42\1\0\4\42\5\0\51\42\3\0"+
    "\136\42\21\0\33\42\65\0\20\42\u0200\0\u19b6\42\112\0\u51cd\42\63\0"+
    "\u048d\42\103\0\56\42\2\0\u010d\42\3\0\20\42\12\43\2\42\24\0"+
    "\57\42\1\43\4\0\12\43\1\0\31\42\7\0\1\43\120\42\2\43"+
    "\45\0\11\42\2\0\147\42\2\0\4\42\1\0\4\42\14\0\13\42"+
    "\115\0\12\42\1\43\3\42\1\43\4\42\1\43\27\42\5\43\20\0"+
    "\1\42\7\0\64\42\14\0\2\43\62\42\21\43\13\0\12\43\6\0"+
    "\22\43\6\42\3\0\1\42\4\0\12\43\34\42\10\43\2\0\27\42"+
    "\15\43\14\0\35\42\3\0\4\43\57\42\16\43\16\0\1\42\12\43"+
    "\46\0\51\42\16\43\11\0\3\42\1\43\10\42\2\43\2\0\12\43"+
    "\6\0\27\42\3\0\1\42\1\43\4\0\60\42\1\43\1\42\3\43"+
    "\2\42\2\43\5\42\2\43\1\42\1\43\1\42\30\0\3\42\2\0"+
    "\13\42\5\43\2\0\3\42\2\43\12\0\6\42\2\0\6\42\2\0"+
    "\6\42\11\0\7\42\1\0\7\42\221\0\43\42\10\43\1\0\2\43"+
    "\2\0\12\43\6\0\u2ba4\42\14\0\27\42\4\0\61\42\u2104\0\u016e\42"+
    "\2\0\152\42\46\0\7\42\14\0\5\42\5\0\1\42\1\43\12\42"+
    "\1\0\15\42\1\0\5\42\1\0\1\42\1\0\2\42\1\0\2\42"+
    "\1\0\154\42\41\0\u016b\42\22\0\100\42\2\0\66\42\50\0\15\42"+
    "\3\0\20\43\20\0\7\43\14\0\2\42\30\0\3\42\31\0\1\42"+
    "\6\0\5\42\1\0\207\42\2\0\1\43\4\0\1\42\13\0\12\43"+
    "\7\0\32\42\4\0\1\42\1\0\32\42\13\0\131\42\3\0\6\42"+
    "\2\0\6\42\2\0\6\42\2\0\3\42\3\0\2\42\3\0\2\42"+
    "\22\0\3\43\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\1\3\1\4\1\3\1\5\1\6"+
    "\2\7\1\10\5\7\1\11\1\12\2\13\16\7\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\1\1\36\2\37\1\40\1\41\2\1\1\42"+
    "\2\43\1\44\1\45\1\3\1\46\1\47\1\50\1\0"+
    "\7\7\2\0\1\51\4\7\1\52\6\7\1\53\1\54"+
    "\1\55\12\7\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\5\0\11\7\1\71"+
    "\1\72\2\7\1\73\1\7\1\74\1\75\1\76\7\7"+
    "\1\77\6\7\1\100\2\0\3\7\1\101\1\102\1\103"+
    "\1\104\1\105\4\7\1\106\2\7\1\107\3\7\1\110"+
    "\1\7\1\111\3\7\1\0\1\50\2\7\1\112\2\7"+
    "\1\113\2\7\1\114\2\7\1\115\1\116\1\117\1\120"+
    "\1\7\1\0\1\121\1\7\1\122\1\123\1\124\1\7"+
    "\1\125\1\126\1\7\1\0\1\7\1\127\1\7\1\0"+
    "\1\7\1\130\1\0\1\50\3\7\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u015e\0\u015e\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u015e"+
    "\0\u038e\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u015e\0\u015e\0\u04ec"+
    "\0\u0532\0\u0578\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c"+
    "\0\u0762\0\u07a8\0\u07ee\0\u0834\0\u087a\0\u08c0\0\u0906\0\u015e"+
    "\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e"+
    "\0\u094c\0\u0992\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u09d8"+
    "\0\u0a1e\0\u0a64\0\u0aaa\0\u015e\0\u0aaa\0\u0af0\0\u0b36\0\u0b7c"+
    "\0\u0bc2\0\u015e\0\u0c08\0\u015e\0\u0c4e\0\u01ea\0\u0c94\0\u015e"+
    "\0\u015e\0\u0cda\0\u0d20\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e"+
    "\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0302\0\u0fdc\0\u1022\0\u1068"+
    "\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298"+
    "\0\u0302\0\u0302\0\u0302\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6"+
    "\0\u143c\0\u1482\0\u14c8\0\u150e\0\u1554\0\u015e\0\u015e\0\u015e"+
    "\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e\0\u015e"+
    "\0\u159a\0\u15e0\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784"+
    "\0\u17ca\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928\0\u015e\0\u0302"+
    "\0\u196e\0\u19b4\0\u0302\0\u19fa\0\u0302\0\u0302\0\u0302\0\u1a40"+
    "\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u0302\0\u1c2a"+
    "\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u015e\0\u1dce\0\u1e14"+
    "\0\u1e5a\0\u1ea0\0\u1ee6\0\u0302\0\u0302\0\u0302\0\u0302\0\u0302"+
    "\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u0302\0\u2044\0\u208a\0\u0302"+
    "\0\u20d0\0\u2116\0\u215c\0\u0302\0\u21a2\0\u0302\0\u21e8\0\u222e"+
    "\0\u2274\0\u22ba\0\u015e\0\u2300\0\u2346\0\u0302\0\u238c\0\u23d2"+
    "\0\u0302\0\u2418\0\u245e\0\u0302\0\u24a4\0\u24ea\0\u0302\0\u0302"+
    "\0\u0302\0\u0302\0\u2530\0\u2576\0\u0302\0\u25bc\0\u0302\0\u0302"+
    "\0\u0302\0\u2602\0\u0302\0\u0302\0\u2648\0\u268e\0\u26d4\0\u0302"+
    "\0\u271a\0\u2760\0\u27a6\0\u0302\0\u27ec\0\u2832\0\u2878\0\u28be"+
    "\0\u2904\0\u0302";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\3\16\1\23\2\16"+
    "\1\24\1\25\1\16\1\26\1\27\2\16\1\30\1\31"+
    "\1\32\1\33\1\34\1\16\1\35\2\16\1\6\1\36"+
    "\1\37\1\16\1\40\1\16\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\2\16\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\6"+
    "\1\73\2\6\27\73\1\74\1\75\51\73\1\76\32\77"+
    "\1\100\1\101\31\77\2\6\10\77\1\6\6\77\106\6"+
    "\1\102\1\103\1\104\1\102\1\105\101\102\110\0\1\10"+
    "\1\0\1\106\105\0\1\106\101\0\1\13\1\107\1\11"+
    "\103\13\6\0\1\110\106\0\1\15\2\111\1\112\1\113"+
    "\101\0\3\16\1\0\13\16\2\0\2\16\2\0\26\16"+
    "\33\0\3\16\1\0\13\16\2\0\2\16\2\0\4\16"+
    "\1\114\21\16\33\0\3\16\1\0\1\16\1\115\11\16"+
    "\2\0\2\16\2\0\26\16\33\0\3\16\1\0\13\16"+
    "\2\0\2\16\2\0\4\16\1\116\21\16\33\0\3\16"+
    "\1\0\13\16\2\0\2\16\2\0\2\16\1\117\23\16"+
    "\33\0\3\16\1\0\13\16\2\0\2\16\2\0\1\120"+
    "\25\16\33\0\2\16\1\121\1\0\13\16\2\0\2\16"+
    "\2\0\24\16\1\122\1\16\56\0\1\123\106\0\1\124"+
    "\61\0\3\16\1\0\13\16\2\0\2\16\2\0\2\16"+
    "\1\125\23\16\33\0\3\16\1\0\13\16\2\0\2\16"+
    "\2\0\1\126\25\16\33\0\3\16\1\0\11\16\1\127"+
    "\1\16\2\0\2\16\2\0\4\16\1\130\21\16\33\0"+
    "\3\16\1\0\13\16\2\0\2\16\2\0\1\16\1\131"+
    "\3\16\1\132\20\16\33\0\3\16\1\0\11\16\1\133"+
    "\1\16\2\0\2\16\2\0\26\16\33\0\3\16\1\0"+
    "\13\16\2\0\2\16\2\0\1\134\1\16\1\135\12\16"+
    "\1\136\10\16\33\0\3\16\1\0\13\16\2\0\2\16"+
    "\2\0\14\16\1\137\1\140\10\16\33\0\3\16\1\0"+
    "\13\16\2\0\2\16\2\0\1\16\1\141\3\16\1\142"+
    "\3\16\1\143\1\144\13\16\33\0\2\16\1\145\1\0"+
    "\13\16\2\0\2\16\2\0\26\16\33\0\3\16\1\0"+
    "\13\16\2\0\2\16\2\0\2\16\1\146\23\16\33\0"+
    "\3\16\1\0\13\16\2\0\2\16\2\0\2\16\1\147"+
    "\17\16\1\150\3\16\33\0\3\16\1\0\13\16\2\0"+
    "\2\16\2\0\2\16\1\151\1\16\1\152\21\16\33\0"+
    "\3\16\1\0\13\16\2\0\2\16\2\0\15\16\1\153"+
    "\10\16\33\0\2\16\1\154\1\0\13\16\2\0\2\16"+
    "\2\0\1\155\25\16\117\0\1\156\106\0\1\157\17\0"+
    "\1\160\73\0\1\161\11\0\1\162\74\0\1\163\10\0"+
    "\1\164\77\0\1\73\2\0\27\73\1\0\52\73\33\0"+
    "\1\165\2\0\1\166\1\167\15\0\1\170\31\0\32\77"+
    "\2\0\31\77\2\0\10\77\1\0\6\77\32\0\1\171"+
    "\106\0\1\172\54\0\1\104\107\0\1\105\103\0\1\11"+
    "\116\0\1\173\106\0\1\174\10\0\1\175\67\0\3\16"+
    "\1\0\13\16\2\0\2\16\2\0\12\16\1\176\13\16"+
    "\33\0\3\16\1\0\2\16\1\177\10\16\2\0\2\16"+
    "\2\0\26\16\33\0\2\16\1\200\1\0\13\16\2\0"+
    "\2\16\2\0\26\16\33\0\3\16\1\0\13\16\2\0"+
    "\2\16\2\0\3\16\1\201\22\16\33\0\3\16\1\0"+
    "\13\16\2\0\2\16\2\0\1\16\1\202\24\16\33\0"+
    "\3\16\1\0\13\16\2\0\2\16\2\0\5\16\1\203"+
    "\7\16\1\204\10\16\33\0\3\16\1\0\11\16\1\205"+
    "\1\16\2\0\2\16\2\0\25\16\1\206\56\0\1\207"+
    "\106\0\1\207\61\0\3\16\1\0\13\16\2\0\2\16"+
    "\2\0\20\16\1\210\5\16\33\0\3\16\1\0\13\16"+
    "\2\0\2\16\2\0\20\16\1\211\5\16\33\0\3\16"+
    "\1\0\13\16\2\0\2\16\2\0\15\16\1\212\10\16"+
    "\33\0\3\16\1\0\13\16\2\0\2\16\2\0\10\16"+
    "\1\213\15\16\33\0\3\16\1\0\13\16\2\0\2\16"+
    "\2\0\5\16\1\214\20\16\33\0\2\16\1\215\1\0"+
    "\13\16\2\0\2\16\2\0\11\16\1\216\14\16\33\0"+
    "\3\16\1\0\13\16\2\0\2\16\2\0\2\16\1\217"+
    "\23\16\33\0\3\16\1\0\13\16\2\0\2\16\2\0"+
    "\1\220\25\16\33\0\3\16\1\0\13\16\2\0\2\16"+
    "\2\0\1\16\1\221\24\16\33\0\3\16\1\0\13\16"+
    "\2\0\2\16\2\0\15\16\1\222\10\16\33\0\3\16"+
    "\1\0\13\16\2\0\2\16\2\0\20\16\1\223\5\16"+
    "\33\0\3\16\1\0\13\16\2\0\2\16\2\0\21\16"+
    "\1\224\4\16\33\0\3\16\1\0\13\16\2\0\2\16"+
    "\2\0\1\225\25\16\33\0\3\16\1\0\11\16\1\226"+
    "\1\16\2\0\2\16\2\0\26\16\33\0\3\16\1\0"+
    "\13\16\2\0\2\16\2\0\22\16\1\227\3\16\33\0"+
    "\3\16\1\0\13\16\2\0\2\16\2\0\21\16\1\230"+
    "\4\16\33\0\3\16\1\0\13\16\2\0\2\16\2\0"+
    "\15\16\1\231\10\16\33\0\3\16\1\0\13\16\2\0"+
    "\2\16\2\0\5\16\1\232\20\16\33\0\3\16\1\0"+
    "\11\16\1\233\1\16\2\0\2\16\2\0\26\16\33\0"+
    "\3\16\1\0\13\16\2\0\2\16\2\0\4\16\1\234"+
    "\21\16\33\0\3\16\1\0\13\16\2\0\2\16\2\0"+
    "\1\16\1\235\24\16\56\0\1\236\106\0\1\236\77\0"+
    "\1\175\75\0\1\237\120\0\1\240\64\0\3\16\1\0"+
    "\13\16\2\0\2\16\2\0\17\16\1\241\6\16\33\0"+
    "\3\16\1\0\3\16\1\242\7\16\2\0\2\16\2\0"+
    "\26\16\33\0\3\16\1\0\13\16\2\0\2\16\2\0"+
    "\5\16\1\243\20\16\33\0\3\16\1\0\11\16\1\244"+
    "\1\16\2\0\2\16\2\0\26\16\33\0\3\16\1\0"+
    "\11\16\1\245\1\16\2\0\2\16\2\0\26\16\33\0"+
    "\3\16\1\0\11\16\1\246\1\16\2\0\2\16\2\0"+
    "\26\16\33\0\3\16\1\0\13\16\2\0\2\16\2\0"+
    "\11\16\1\247\14\16\33\0\3\16\1\0\13\16\2\0"+
    "\2\16\2\0\25\16\1\250\33\0\3\16\1\0\11\16"+
    "\1\251\1\16\2\0\2\16\2\0\26\16\33\0\3\16"+
    "\1\0\13\16\2\0\2\16\2\0\3\16\1\252\22\16"+
    "\33\0\3\16\1\0\13\16\2\0\2\16\2\0\5\16"+
    "\1\253\20\16\33\0\3\16\1\0\11\16\1\254\1\16"+
    "\2\0\2\16\2\0\26\16\33\0\3\16\1\0\13\16"+
    "\2\0\2\16\2\0\12\16\1\255\13\16\33\0\3\16"+
    "\1\0\13\16\2\0\2\16\2\0\4\16\1\256\21\16"+
    "\33\0\2\16\1\257\1\0\13\16\2\0\2\16\2\0"+
    "\26\16\33\0\3\16\1\0\13\16\2\0\2\16\2\0"+
    "\14\16\1\260\11\16\33\0\3\16\1\0\13\16\2\0"+
    "\2\16\2\0\1\261\25\16\33\0\3\16\1\0\13\16"+
    "\2\0\2\16\2\0\17\16\1\262\6\16\33\0\3\16"+
    "\1\0\13\16\2\0\2\16\2\0\4\16\1\263\21\16"+
    "\33\0\3\16\1\0\11\16\1\264\1\16\2\0\2\16"+
    "\2\0\26\16\33\0\3\16\1\0\13\16\2\0\2\16"+
    "\2\0\1\16\1\265\24\16\33\0\3\16\1\0\13\16"+
    "\2\0\2\16\2\0\5\16\1\266\20\16\33\0\2\16"+
    "\1\267\1\0\13\16\2\0\2\16\2\0\26\16\33\0"+
    "\3\16\1\0\13\16\2\0\2\16\2\0\5\16\1\270"+
    "\20\16\33\0\3\16\1\0\13\16\2\0\2\16\2\0"+
    "\20\16\1\271\5\16\42\0\1\272\120\0\1\273\63\0"+
    "\3\16\1\0\13\16\2\0\2\16\2\0\10\16\1\274"+
    "\15\16\33\0\3\16\1\0\4\16\1\275\6\16\2\0"+
    "\2\16\2\0\26\16\33\0\3\16\1\0\11\16\1\276"+
    "\1\16\2\0\2\16\2\0\26\16\33\0\3\16\1\0"+
    "\13\16\2\0\2\16\2\0\21\16\1\277\4\16\33\0"+
    "\3\16\1\0\13\16\2\0\2\16\2\0\2\16\1\300"+
    "\23\16\33\0\3\16\1\0\11\16\1\301\1\16\2\0"+
    "\2\16\2\0\26\16\33\0\3\16\1\0\13\16\2\0"+
    "\2\16\2\0\2\16\1\302\23\16\33\0\2\16\1\303"+
    "\1\0\13\16\2\0\2\16\2\0\26\16\33\0\3\16"+
    "\1\0\11\16\1\304\1\16\2\0\2\16\2\0\26\16"+
    "\33\0\3\16\1\0\13\16\2\0\2\16\2\0\2\16"+
    "\1\305\23\16\33\0\3\16\1\0\13\16\2\0\2\16"+
    "\2\0\4\16\1\306\21\16\33\0\3\16\1\0\13\16"+
    "\2\0\2\16\2\0\23\16\1\307\2\16\33\0\3\16"+
    "\1\0\13\16\2\0\2\16\2\0\20\16\1\310\5\16"+
    "\33\0\3\16\1\0\13\16\2\0\2\16\2\0\10\16"+
    "\1\311\15\16\33\0\3\16\1\0\13\16\2\0\2\16"+
    "\2\0\5\16\1\312\20\16\33\0\3\16\1\0\13\16"+
    "\2\0\2\16\2\0\15\16\1\313\10\16\43\0\1\314"+
    "\75\0\3\16\1\0\13\16\2\0\2\16\2\0\4\16"+
    "\1\315\21\16\33\0\3\16\1\0\5\16\1\316\5\16"+
    "\2\0\2\16\2\0\26\16\33\0\3\16\1\0\13\16"+
    "\2\0\2\16\2\0\20\16\1\317\5\16\33\0\3\16"+
    "\1\0\13\16\2\0\2\16\2\0\1\16\1\320\24\16"+
    "\33\0\3\16\1\0\13\16\2\0\2\16\2\0\20\16"+
    "\1\321\5\16\33\0\2\16\1\322\1\0\13\16\2\0"+
    "\2\16\2\0\26\16\33\0\3\16\1\0\13\16\2\0"+
    "\2\16\2\0\20\16\1\323\5\16\33\0\2\16\1\324"+
    "\1\0\13\16\2\0\2\16\2\0\26\16\33\0\3\16"+
    "\1\0\13\16\2\0\2\16\2\0\1\16\1\325\24\16"+
    "\44\0\1\326\74\0\3\16\1\0\6\16\1\327\4\16"+
    "\2\0\2\16\2\0\26\16\33\0\3\16\1\0\13\16"+
    "\2\0\2\16\2\0\22\16\1\330\3\16\33\0\3\16"+
    "\1\0\13\16\2\0\2\16\2\0\3\16\1\331\22\16"+
    "\45\0\1\332\73\0\3\16\1\0\7\16\1\333\3\16"+
    "\2\0\2\16\2\0\26\16\33\0\3\16\1\0\11\16"+
    "\1\334\1\16\2\0\2\16\2\0\26\16\46\0\1\335"+
    "\72\0\3\16\1\0\10\16\1\336\2\16\2\0\2\16"+
    "\2\0\26\16\47\0\1\112\71\0\3\16\1\0\1\337"+
    "\12\16\2\0\2\16\2\0\26\16\33\0\3\16\1\0"+
    "\12\16\1\340\2\0\2\16\2\0\26\16\33\0\3\16"+
    "\1\0\13\16\2\0\1\341\1\16\2\0\26\16\33\0"+
    "\3\16\1\0\13\16\2\0\1\16\1\342\2\0\26\16"+
    "\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10570];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\2\1\2\11\5\1\1\11\5\1\2\11"+
    "\20\1\11\11\2\1\5\11\4\1\1\11\5\1\1\11"+
    "\1\1\1\11\3\1\2\11\1\1\1\0\7\1\2\0"+
    "\31\1\13\11\5\0\11\1\1\11\26\1\1\11\2\0"+
    "\31\1\1\0\1\11\20\1\1\0\11\1\1\0\3\1"+
    "\1\0\2\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    boolean DevolverNewline = true;
    Deque<Integer> Stack = new LinkedList<Integer>();

    StringBuffer string = new StringBuffer();

    private Symbol symbol(int type,String name){
        LexerToken token = new LexerToken(yycolumn,yyline,type,yytext());
        return new Symbol(type,yyline,yycolumn,token);
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2286) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 23: 
          { return symbol(sym1.MOD, yytext());
          }
        case 89: break;
        case 44: 
          { return symbol(sym1.IS, yytext());
          }
        case 90: break;
        case 14: 
          { return symbol(sym1.SEMICOLON, yytext());
          }
        case 91: break;
        case 59: 
          { return symbol(sym1.AND, yytext());
          }
        case 92: break;
        case 16: 
          { return symbol(sym1.RPAREN, yytext());
          }
        case 93: break;
        case 20: 
          { return symbol(sym1.RCURLY, yytext());
          }
        case 94: break;
        case 18: 
          { return symbol(sym1.RBRACKET, yytext());
          }
        case 95: break;
        case 34: 
          { yypushback(1); yybegin(YYINITIAL);
          }
        case 96: break;
        case 6: 
          { return symbol(sym1.INTEGER, yytext());
          }
        case 97: break;
        case 58: 
          { return symbol(sym1.NOT, yytext());
          }
        case 98: break;
        case 15: 
          { return symbol(sym1.LPAREN, yytext());
          }
        case 99: break;
        case 19: 
          { return symbol(sym1.LCURLY, yytext());
          }
        case 100: break;
        case 28: 
          { return symbol(sym1.MINOR, yytext());
          }
        case 101: break;
        case 50: 
          { return symbol(sym1.MAJOREQ, yytext());
          }
        case 102: break;
        case 39: 
          { return symbol(sym1.LONG, yytext());
          }
        case 103: break;
        case 17: 
          { return symbol(sym1.LBRACKET, yytext());
          }
        case 104: break;
        case 81: 
          { return symbol(sym1.LAMBDA, yytext());
          }
        case 105: break;
        case 24: 
          { return symbol(sym1.ANDB, yytext());
          }
        case 106: break;
        case 47: 
          { return symbol(sym1.DIVE, yytext());
          }
        case 107: break;
        case 4: 
          { return symbol(sym1.TAB, yytext());
          }
        case 108: break;
        case 54: 
          { string.append('\n');
          }
        case 109: break;
        case 53: 
          { string.append('\"');
          }
        case 110: break;
        case 68: 
          { return symbol(sym1.ELIF, yytext());
          }
        case 111: break;
        case 80: 
          { return symbol(sym1.CLASS, yytext());
          }
        case 112: break;
        case 12: 
          { return symbol(sym1.COMA, yytext());
          }
        case 113: break;
        case 65: 
          { return symbol(sym1.TRUE, yytext());
          }
        case 114: break;
        case 62: 
          { return symbol(sym1.FOR, yytext());
          }
        case 115: break;
        case 37: 
          { yypushback(yylength());
            yybegin(INDENTATION_TAB);
          }
        case 116: break;
        case 46: 
          { return symbol(sym1.EXP, yytext());
          }
        case 117: break;
        case 85: 
          { return symbol(sym1.IMPORT, yytext());
          }
        case 118: break;
        case 76: 
          { return symbol(sym1.WHILE, yytext());
          }
        case 119: break;
        case 29: 
          { return symbol(sym1.MAJOR, yytext());
          }
        case 120: break;
        case 64: 
          { yybegin(YYINITIAL); return symbol(sym1.STRING3, string.toString());
          }
        case 121: break;
        case 55: 
          { string.append('\r');
          }
        case 122: break;
        case 77: 
          { return symbol(sym1.BREAK, yytext());
          }
        case 123: break;
        case 73: 
          { return symbol(sym1.PASS, yytext());
          }
        case 124: break;
        case 11: 
          { string.setLength(0); yybegin(STRING);
          }
        case 125: break;
        case 26: 
          { return symbol(sym1.XORB, yytext());
          }
        case 126: break;
        case 52: 
          { return symbol(sym1.DIFF, yytext());
          }
        case 127: break;
        case 56: 
          { string.append('\t');
          }
        case 128: break;
        case 79: 
          { return symbol(sym1.YIELD, yytext());
          }
        case 129: break;
        case 82: 
          { return symbol(sym1.EXCEPT, yytext());
          }
        case 130: break;
        case 86: 
          { return symbol(sym1.GLOBAL, yytext());
          }
        case 131: break;
        case 10: 
          { return symbol(sym1.MINUS, yytext());
          }
        case 132: break;
        case 74: 
          { return symbol(sym1.FALSE, yytext());
          }
        case 133: break;
        case 42: 
          { return symbol(sym1.AS, yytext());
          }
        case 134: break;
        case 35: 
          { return symbol(sym1.NEWLINE,yytext());
          }
        case 135: break;
        case 40: 
          { return symbol(sym1.FLOAT, yytext());
          }
        case 136: break;
        case 60: 
          { return symbol(sym1.DEL, yytext());
          }
        case 137: break;
        case 49: 
          { return symbol(sym1.SHIFTL, yytext());
          }
        case 138: break;
        case 78: 
          { return symbol(sym1.PRINT, yytext());
          }
        case 139: break;
        case 33: 
          { string.append(yytext());
          }
        case 140: break;
        case 41: 
          { return symbol(sym1.OR, yytext());
          }
        case 141: break;
        case 71: 
          { return symbol(sym1.WITH, yytext());
          }
        case 142: break;
        case 84: 
          { return symbol(sym1.ASSERT, yytext());
          }
        case 143: break;
        case 9: 
          { return symbol(sym1.PLUS, yytext());
          }
        case 144: break;
        case 45: 
          { return symbol(sym1.IF, yytext());
          }
        case 145: break;
        case 27: 
          { return symbol(sym1.NOTB, yytext());
          }
        case 146: break;
        case 1: 
          { System.out.println("Illegal Character < "+yytext()+" > in state "+yystate());
          }
        case 147: break;
        case 25: 
          { return symbol(sym1.ORB, yytext());
          }
        case 148: break;
        case 88: 
          { return symbol(sym1.CONTINUE, yytext());
          }
        case 149: break;
        case 57: 
          { string.setLength(0); yybegin(TRIPLE_STRING);
          }
        case 150: break;
        case 72: 
          { return symbol(sym1.TYPE, yytext());
          }
        case 151: break;
        case 21: 
          { return symbol(sym1.MULT, yytext());
          }
        case 152: break;
        case 32: 
          { string.append('\\');
          }
        case 153: break;
        case 69: 
          { return symbol(sym1.EXEC, yytext());
          }
        case 154: break;
        case 63: 
          { return symbol(sym1.TRY, yytext());
          }
        case 155: break;
        case 38: 
          { return symbol(sym1.EQUALS, yytext());
          }
        case 156: break;
        case 2: 
          { if(Stack.size()>0){
            yypushback(1);
            if(DevolverNewline){
                DevolverNewline = false;
                return symbol(sym1.NEWLINE, yytext());
            }else{
                Stack.pop();
                if(Stack.size()==0){
                    DevolverNewline = true;
                }
                return symbol(sym1.DEDENT,"");
            }
        }else{
            return symbol(sym1.NEWLINE, yytext());
        }
          }
        case 157: break;
        case 48: 
          { return symbol(sym1.MINOREQ, yytext());
          }
        case 158: break;
        case 22: 
          { return symbol(sym1.DIV, yytext());
          }
        case 159: break;
        case 7: 
          { return symbol(sym1.NAME, yytext());
          }
        case 160: break;
        case 36: 
          { //HAY QUE VER BIEN COMO FUNCIONA EL yypushback PERO ESE ES EL CAMINO
      int indentLevel = yylength();
      int nivelStack = Stack.size() == 0 ? 0 : Stack.peek();

      if(indentLevel == nivelStack){
          yybegin(YYINITIAL);
      }else if(indentLevel < nivelStack){
          //tengo que emitir tokens DEDENT hasta llegar al nivel del stack
          Stack.pop();
          yypushback(indentLevel);
          return symbol(sym1.DEDENT,yytext());
      }else{
          //aumento el nivel de indentacion
          nivelStack+=1;
          yypushback((indentLevel-nivelStack));
          Stack.push(nivelStack);
          return symbol(sym1.INDENT,yytext());
      }
          }
        case 161: break;
        case 70: 
          { return symbol(sym1.FROM, yytext());
          }
        case 162: break;
        case 30: 
          { string.append( yytext() );
          }
        case 163: break;
        case 83: 
          { return symbol(sym1.RETURN, yytext());
          }
        case 164: break;
        case 43: 
          { return symbol(sym1.IN, yytext());
          }
        case 165: break;
        case 13: 
          { return symbol(sym1.COLON, yytext());
          }
        case 166: break;
        case 66: 
          { return symbol(sym1.NONE, yytext());
          }
        case 167: break;
        case 75: 
          { return symbol(sym1.RAISE, yytext());
          }
        case 168: break;
        case 87: 
          { return symbol(sym1.FINALLY, yytext());
          }
        case 169: break;
        case 8: 
          { return symbol(sym1.DOT, yytext());
          }
        case 170: break;
        case 31: 
          { yybegin(YYINITIAL); return symbol(sym1.STRING, string.toString());
          }
        case 171: break;
        case 61: 
          { return symbol(sym1.DEF, yytext());
          }
        case 172: break;
        case 51: 
          { return symbol(sym1.SHIFTR, yytext());
          }
        case 173: break;
        case 5: 
          { return symbol(sym1.ASSIGN, yytext());
          }
        case 174: break;
        case 67: 
          { return symbol(sym1.ELSE, yytext());
          }
        case 175: break;
        case 3: 
          { 
          }
        case 176: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     if(Stack.size()<=0)
    {
        return symbol(sym1.EOF,"");
    }else{
        Stack.pop();
        yypushback(0);
        if(DevolverNewline){
            DevolverNewline = false;
            return symbol(sym1.NEWLINE,"");
        }else{
            DevolverNewline = true;
            return symbol(sym1.DEDENT,yytext());
        }
    }
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
