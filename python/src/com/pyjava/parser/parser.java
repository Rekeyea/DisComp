
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jul 14 23:25:04 UYT 2015
//----------------------------------------------------

package com.pyjava.parser;

import com.pyjava.core.exceptions.PyException;
import com.pyjava.core.runtime.*;
import java_cup.runtime.*;
import com.pyjava.parser.codegen.*;
import com.pyjava.core.*;
import java.util.Deque;
import java.util.LinkedList;
import java.util.Scanner;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jul 14 23:25:04 UYT 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\056\010\000\002\002\004\000\002\024" +
    "\003\000\002\024\004\000\002\026\003\000\002\026\004" +
    "\000\002\025\003\000\002\025\004\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\041\003\000\002\003\003\000\002\003\003" +
    "\000\002\047\004\000\002\047\005\000\002\050\003\000" +
    "\002\050\005\000\002\051\004\000\002\051\005\000\002" +
    "\046\004\000\002\046\005\000\002\045\003\000\002\045" +
    "\005\000\002\044\005\000\002\044\004\000\002\043\005" +
    "\000\002\042\003\000\002\042\005\000\002\053\005\000" +
    "\002\053\006\000\002\054\004\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\004\000\002\010\004\000\002\052\003\000\002\052" +
    "\005\000\002\007\004\000\002\012\003\000\002\012\004" +
    "\000\002\055\004\000\002\013\004\000\002\013\004\000" +
    "\002\013\005\000\002\013\005\000\002\014\004\000\002" +
    "\014\004\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\017\005" +
    "\000\002\020\003\000\002\020\005\000\002\021\003\000" +
    "\002\021\005\000\002\021\003\000\002\022\004\000\002" +
    "\022\005\000\002\023\006\000\002\023\004\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\031\004\000\002\031\004\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\037" +
    "\003\000\002\037\004\000\002\040\003\000\002\040\006" +
    "\000\002\033\007\000\002\033\013\000\002\035\014" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\040\045\011\047\037\050\004\051\025\052" +
    "\022\053\024\061\014\063\013\065\020\067\032\100\023" +
    "\105\010\116\016\117\012\120\031\001\002\000\072\041" +
    "\ufffd\054\ufffd\055\ufffd\056\ufffd\060\ufffd\062\ufffd\063\ufffd" +
    "\064\ufffd\066\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\073" +
    "\ufffd\074\ufffd\075\ufffd\076\ufffd\077\ufffd\101\ufffd\102\ufffd" +
    "\103\ufffd\104\ufffd\106\ufffd\107\ufffd\110\ufffd\111\ufffd\112" +
    "\ufffd\113\ufffd\001\002\000\072\041\uffdc\054\uffdc\055\uffdc" +
    "\056\uffdc\060\uffdc\062\uffdc\063\uffdc\064\uffdc\066\uffdc\067" +
    "\uffdc\070\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc\075\uffdc" +
    "\076\uffdc\077\uffdc\101\uffdc\102\uffdc\103\uffdc\104\uffdc\106" +
    "\uffdc\107\uffdc\110\uffdc\111\uffdc\112\uffdc\113\uffdc\001\002" +
    "\000\072\041\uffef\054\uffef\055\uffef\056\uffef\060\uffef\062" +
    "\uffef\063\uffef\064\uffef\066\uffef\067\uffef\070\uffef\071\uffef" +
    "\072\uffef\073\uffef\074\uffef\075\uffef\076\uffef\077\uffef\101" +
    "\uffef\102\uffef\103\uffef\104\uffef\106\uffef\107\uffef\110\uffef" +
    "\111\uffef\112\uffef\113\uffef\001\002\000\006\046\233\054" +
    "\044\001\002\000\040\045\011\047\037\050\004\051\025" +
    "\052\022\053\024\061\014\063\013\065\020\067\032\100" +
    "\023\105\010\116\016\117\012\120\031\001\002\000\076" +
    "\041\ufff1\046\ufff1\054\ufff1\055\ufff1\056\ufff1\060\ufff1\061" +
    "\ufff1\062\ufff1\063\ufff1\064\ufff1\066\ufff1\067\ufff1\070\ufff1" +
    "\071\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1\076\ufff1\077" +
    "\ufff1\101\ufff1\102\ufff1\103\ufff1\104\ufff1\106\ufff1\107\ufff1" +
    "\110\ufff1\111\ufff1\112\ufff1\113\ufff1\001\002\000\072\041" +
    "\ufff3\054\ufff3\055\ufff3\056\ufff3\060\ufff3\062\ufff3\063\ufff3" +
    "\064\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3\073" +
    "\ufff3\074\ufff3\075\ufff3\076\ufff3\077\ufff3\101\ufff3\102\ufff3" +
    "\103\ufff3\104\ufff3\106\ufff3\107\ufff3\110\ufff3\111\ufff3\112" +
    "\ufff3\113\ufff3\001\002\000\042\045\011\047\037\050\004" +
    "\051\025\052\022\053\024\061\014\062\223\063\013\065" +
    "\020\067\032\100\023\105\010\116\016\117\012\120\031" +
    "\001\002\000\042\045\011\047\037\050\004\051\025\052" +
    "\022\053\024\060\216\061\014\063\013\065\020\067\032" +
    "\100\023\105\010\116\016\117\012\120\031\001\002\000" +
    "\004\002\215\001\002\000\072\041\ufff4\054\ufff4\055\ufff4" +
    "\056\ufff4\060\ufff4\062\ufff4\063\ufff4\064\ufff4\066\ufff4\067" +
    "\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4\074\ufff4\075\ufff4" +
    "\076\ufff4\077\ufff4\101\ufff4\102\ufff4\103\ufff4\104\ufff4\106" +
    "\ufff4\107\ufff4\110\ufff4\111\ufff4\112\ufff4\113\ufff4\001\002" +
    "\000\072\041\uffdb\054\uffdb\055\uffdb\056\uffdb\060\uffdb\062" +
    "\uffdb\063\uffdb\064\uffdb\066\uffdb\067\uffdb\070\uffdb\071\uffdb" +
    "\072\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb\101" +
    "\uffdb\102\uffdb\103\uffdb\104\uffdb\106\uffdb\107\uffdb\110\uffdb" +
    "\111\uffdb\112\uffdb\113\uffdb\001\002\000\042\045\011\047" +
    "\037\050\004\051\025\052\022\053\024\061\014\063\013" +
    "\064\204\065\020\067\032\100\023\105\010\116\016\117" +
    "\012\120\031\001\002\000\072\041\uffd8\054\uffd8\055\uffd8" +
    "\056\uffd8\060\uffd8\062\uffd8\063\uffd8\064\uffd8\066\uffd8\067" +
    "\uffd8\070\uffd8\071\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8" +
    "\076\uffd8\077\uffd8\101\uffd8\102\uffd8\103\uffd8\104\uffd8\106" +
    "\uffd8\107\uffd8\110\uffd8\111\uffd8\112\uffd8\113\uffd8\001\002" +
    "\000\072\041\ufff6\054\ufff6\055\ufff6\056\ufff6\060\ufff6\062" +
    "\ufff6\063\ufff6\064\ufff6\066\ufff6\067\ufff6\070\ufff6\071\ufff6" +
    "\072\ufff6\073\ufff6\074\ufff6\075\ufff6\076\ufff6\077\ufff6\101" +
    "\ufff6\102\ufff6\103\ufff6\104\ufff6\106\ufff6\107\ufff6\110\ufff6" +
    "\111\ufff6\112\ufff6\113\ufff6\001\002\000\040\045\011\047" +
    "\037\050\004\051\025\052\022\053\024\061\014\063\013" +
    "\065\020\067\032\100\023\105\010\116\016\117\012\120" +
    "\031\001\002\000\072\041\ufff5\054\ufff5\055\ufff5\056\ufff5" +
    "\060\ufff5\062\ufff5\063\ufff5\064\ufff5\066\ufff5\067\ufff5\070" +
    "\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5" +
    "\077\ufff5\101\ufff5\102\ufff5\103\ufff5\104\ufff5\106\ufff5\107" +
    "\ufff5\110\ufff5\111\ufff5\112\ufff5\113\ufff5\001\002\000\072" +
    "\041\ufffb\054\ufffb\055\ufffb\056\ufffb\060\ufffb\062\ufffb\063" +
    "\ufffb\064\ufffb\066\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb" +
    "\073\ufffb\074\ufffb\075\ufffb\076\ufffb\077\ufffb\101\ufffb\102" +
    "\ufffb\103\ufffb\104\ufffb\106\ufffb\107\ufffb\110\ufffb\111\ufffb" +
    "\112\ufffb\113\ufffb\001\002\000\056\055\076\063\065\066" +
    "\056\067\075\070\071\071\073\072\066\073\063\074\054" +
    "\075\072\076\060\077\062\101\053\102\102\103\055\104" +
    "\057\106\067\107\100\110\074\111\061\112\064\113\101" +
    "\001\002\000\072\041\uffd9\054\uffd9\055\uffd9\056\uffd9\060" +
    "\uffd9\062\uffd9\063\uffd9\064\uffd9\066\uffd9\067\uffd9\070\uffd9" +
    "\071\uffd9\072\uffd9\073\uffd9\074\uffd9\075\uffd9\076\uffd9\077" +
    "\uffd9\101\uffd9\102\uffd9\103\uffd9\104\uffd9\106\uffd9\107\uffd9" +
    "\110\uffd9\111\uffd9\112\uffd9\113\uffd9\001\002\000\072\041" +
    "\uffd7\054\uffd7\055\uffd7\056\uffd7\060\uffd7\062\uffd7\063\uffd7" +
    "\064\uffd7\066\uffd7\067\uffd7\070\uffd7\071\uffd7\072\uffd7\073" +
    "\uffd7\074\uffd7\075\uffd7\076\uffd7\077\uffd7\101\uffd7\102\uffd7" +
    "\103\uffd7\104\uffd7\106\uffd7\107\uffd7\110\uffd7\111\uffd7\112" +
    "\uffd7\113\uffd7\001\002\000\072\041\ufff2\054\ufff2\055\ufff2" +
    "\056\ufff2\060\ufff2\062\ufff2\063\ufff2\064\ufff2\066\ufff2\067" +
    "\ufff2\070\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2\075\ufff2" +
    "\076\ufff2\077\ufff2\101\ufff2\102\ufff2\103\ufff2\104\ufff2\106" +
    "\ufff2\107\ufff2\110\ufff2\111\ufff2\112\ufff2\113\ufff2\001\002" +
    "\000\010\047\177\050\200\051\201\001\002\000\004\046" +
    "\174\001\002\000\072\041\ufff8\054\ufff8\055\ufff8\056\ufff8" +
    "\060\ufff8\062\ufff8\063\ufff8\064\ufff8\066\ufff8\067\ufff8\070" +
    "\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075\ufff8\076\ufff8" +
    "\077\ufff8\101\ufff8\102\ufff8\103\ufff8\104\ufff8\106\ufff8\107" +
    "\ufff8\110\ufff8\111\ufff8\112\ufff8\113\ufff8\001\002\000\072" +
    "\041\ufff9\054\ufff9\055\ufff9\056\ufff9\060\ufff9\062\ufff9\063" +
    "\ufff9\064\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9" +
    "\073\ufff9\074\ufff9\075\ufff9\076\ufff9\077\ufff9\101\ufff9\102" +
    "\ufff9\103\ufff9\104\ufff9\106\ufff9\107\ufff9\110\ufff9\111\ufff9" +
    "\112\ufff9\113\ufff9\001\002\000\004\041\162\001\002\000" +
    "\072\041\uffff\054\uffff\055\uffff\056\uffff\060\uffff\062\uffff" +
    "\063\uffff\064\uffff\066\uffff\067\uffff\070\uffff\071\uffff\072" +
    "\uffff\073\uffff\074\uffff\075\uffff\076\uffff\077\uffff\101\uffff" +
    "\102\uffff\103\uffff\104\uffff\106\uffff\107\uffff\110\uffff\111" +
    "\uffff\112\uffff\113\uffff\001\002\000\072\041\uffda\054\uffda" +
    "\055\uffda\056\uffda\060\uffda\062\uffda\063\uffda\064\uffda\066" +
    "\uffda\067\uffda\070\uffda\071\uffda\072\uffda\073\uffda\074\uffda" +
    "\075\uffda\076\uffda\077\uffda\101\uffda\102\uffda\103\uffda\104" +
    "\uffda\106\uffda\107\uffda\110\uffda\111\uffda\112\uffda\113\uffda" +
    "\001\002\000\072\041\ufff7\054\ufff7\055\ufff7\056\ufff7\060" +
    "\ufff7\062\ufff7\063\ufff7\064\ufff7\066\ufff7\067\ufff7\070\ufff7" +
    "\071\ufff7\072\ufff7\073\ufff7\074\ufff7\075\ufff7\076\ufff7\077" +
    "\ufff7\101\ufff7\102\ufff7\103\ufff7\104\ufff7\106\ufff7\107\ufff7" +
    "\110\ufff7\111\ufff7\112\ufff7\113\ufff7\001\002\000\064\046" +
    "\047\054\044\055\ufff0\061\046\063\ufff0\066\ufff0\067\ufff0" +
    "\070\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0\075\ufff0\076" +
    "\ufff0\077\ufff0\101\ufff0\102\ufff0\103\ufff0\104\ufff0\106\ufff0" +
    "\107\ufff0\110\ufff0\111\ufff0\112\ufff0\113\ufff0\001\002\000" +
    "\004\046\uffb5\001\002\000\040\045\011\047\037\050\004" +
    "\051\025\052\022\053\024\061\014\063\013\065\020\067" +
    "\032\100\023\105\010\116\016\117\012\120\031\001\002" +
    "\000\072\041\uffa5\054\uffa5\055\uffa5\056\uffa5\060\uffa5\062" +
    "\uffa5\063\uffa5\064\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5" +
    "\072\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5\101" +
    "\uffa5\102\uffa5\103\uffa5\104\uffa5\106\uffa5\107\uffa5\110\uffa5" +
    "\111\uffa5\112\uffa5\113\uffa5\001\002\000\042\045\143\047" +
    "\037\050\004\051\025\052\022\053\024\060\141\061\014" +
    "\063\013\065\020\067\032\100\023\105\010\116\016\117" +
    "\012\120\031\001\002\000\040\045\011\047\037\050\004" +
    "\051\025\052\022\053\024\061\014\063\013\065\020\067" +
    "\032\100\023\105\010\116\016\117\012\120\031\001\002" +
    "\000\004\041\uffb2\001\002\000\062\041\uffb3\054\070\055" +
    "\076\063\065\066\056\067\075\070\071\071\073\072\066" +
    "\073\063\074\054\075\072\076\060\077\062\101\053\102" +
    "\102\103\055\104\057\106\067\107\100\110\074\111\061" +
    "\112\064\113\101\001\002\000\074\041\ufff0\054\ufff0\055" +
    "\ufff0\056\ufff0\060\ufff0\061\046\062\ufff0\063\ufff0\064\ufff0" +
    "\066\ufff0\067\ufff0\070\ufff0\071\ufff0\072\ufff0\073\ufff0\074" +
    "\ufff0\075\ufff0\076\ufff0\077\ufff0\101\ufff0\102\ufff0\103\ufff0" +
    "\104\ufff0\106\ufff0\107\ufff0\110\ufff0\111\ufff0\112\ufff0\113" +
    "\ufff0\001\002\000\040\045\011\047\037\050\004\051\025" +
    "\052\022\053\024\061\014\063\013\065\020\067\032\100" +
    "\023\105\010\116\016\117\012\120\031\001\002\000\040" +
    "\045\011\047\037\050\004\051\025\052\022\053\024\061" +
    "\014\063\013\065\020\067\032\100\023\105\010\116\016" +
    "\117\012\120\031\001\002\000\040\045\011\047\037\050" +
    "\004\051\025\052\022\053\024\061\014\063\013\065\020" +
    "\067\032\100\023\105\010\116\016\117\012\120\031\001" +
    "\002\000\040\045\011\047\037\050\004\051\025\052\022" +
    "\053\024\061\014\063\013\065\020\067\032\100\023\105" +
    "\010\116\016\117\012\120\031\001\002\000\040\045\011" +
    "\047\037\050\004\051\025\052\022\053\024\061\014\063" +
    "\013\065\020\067\032\100\023\105\010\116\016\117\012" +
    "\120\031\001\002\000\040\045\011\047\037\050\004\051" +
    "\025\052\022\053\024\061\014\063\013\065\020\067\032" +
    "\100\023\105\010\116\016\117\012\120\031\001\002\000" +
    "\040\045\011\047\037\050\004\051\025\052\022\053\024" +
    "\061\014\063\013\065\020\067\032\100\023\105\010\116" +
    "\016\117\012\120\031\001\002\000\040\045\011\047\037" +
    "\050\004\051\025\052\022\053\024\061\014\063\013\065" +
    "\020\067\032\100\023\105\010\116\016\117\012\120\031" +
    "\001\002\000\040\045\011\047\037\050\004\051\025\052" +
    "\022\053\024\061\014\063\013\065\020\067\032\100\023" +
    "\105\010\116\016\117\012\120\031\001\002\000\040\045" +
    "\011\047\037\050\004\051\025\052\022\053\024\061\014" +
    "\063\013\065\020\067\032\100\023\105\010\116\016\117" +
    "\012\120\031\001\002\000\040\045\011\047\037\050\004" +
    "\051\025\052\022\053\024\061\014\063\013\065\020\067" +
    "\032\100\023\105\010\116\016\117\012\120\031\001\002" +
    "\000\040\045\011\047\037\050\004\051\025\052\022\053" +
    "\024\061\014\063\013\065\020\067\032\100\023\105\010" +
    "\116\016\117\012\120\031\001\002\000\040\045\011\047" +
    "\037\050\004\051\025\052\022\053\024\061\014\063\013" +
    "\065\020\067\032\100\023\105\010\116\016\117\012\120" +
    "\031\001\002\000\044\041\uffea\045\011\047\037\050\004" +
    "\051\025\052\022\053\024\060\uffea\061\014\063\013\065" +
    "\020\067\032\100\023\105\010\116\016\117\012\120\031" +
    "\001\002\000\040\045\011\047\037\050\004\051\025\052" +
    "\022\053\024\061\014\063\013\065\020\067\032\100\023" +
    "\105\010\116\016\117\012\120\031\001\002\000\040\045" +
    "\011\047\037\050\004\051\025\052\022\053\024\061\014" +
    "\063\013\065\020\067\032\100\023\105\010\116\016\117" +
    "\012\120\031\001\002\000\040\045\011\047\037\050\004" +
    "\051\025\052\022\053\024\061\014\063\013\065\020\067" +
    "\032\100\023\105\010\116\016\117\012\120\031\001\002" +
    "\000\040\045\011\047\037\050\004\051\025\052\022\053" +
    "\024\061\014\063\013\065\020\067\032\100\023\105\010" +
    "\116\016\117\012\120\031\001\002\000\040\045\011\047" +
    "\037\050\004\051\025\052\022\053\024\061\014\063\013" +
    "\065\020\067\032\100\023\105\010\116\016\117\012\120" +
    "\031\001\002\000\004\045\011\001\002\000\072\041\uffdd" +
    "\054\uffdd\055\uffdd\056\uffdd\060\uffdd\062\uffdd\063\uffdd\064" +
    "\uffdd\066\uffdd\067\uffdd\070\uffdd\071\uffdd\072\uffdd\073\uffdd" +
    "\074\uffdd\075\uffdd\076\uffdd\077\uffdd\101\uffdd\102\uffdd\103" +
    "\uffdd\104\uffdd\106\uffdd\107\uffdd\110\uffdd\111\uffdd\112\uffdd" +
    "\113\uffdd\001\002\000\040\045\011\047\037\050\004\051" +
    "\025\052\022\053\024\061\014\063\013\065\020\067\032" +
    "\100\023\105\010\116\016\117\012\120\031\001\002\000" +
    "\040\045\011\047\037\050\004\051\025\052\022\053\024" +
    "\061\014\063\013\065\020\067\032\100\023\105\010\116" +
    "\016\117\012\120\031\001\002\000\040\045\011\047\037" +
    "\050\004\051\025\052\022\053\024\061\014\063\013\065" +
    "\020\067\032\100\023\105\010\116\016\117\012\120\031" +
    "\001\002\000\072\041\uffc9\054\uffc9\055\076\056\uffc9\060" +
    "\uffc9\062\uffc9\063\uffc9\064\uffc9\066\056\067\075\070\071" +
    "\071\073\072\066\073\063\074\054\075\uffc9\076\uffc9\077" +
    "\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\106\uffc9\107\uffc9" +
    "\110\uffc9\111\uffc9\112\uffc9\113\uffc9\001\002\000\072\041" +
    "\uffd0\054\uffd0\055\076\056\uffd0\060\uffd0\062\uffd0\063\uffd0" +
    "\064\uffd0\066\056\067\075\070\071\071\073\072\066\073" +
    "\063\074\054\075\072\076\060\077\062\101\053\102\102" +
    "\103\uffd0\104\uffd0\106\uffd0\107\uffd0\110\uffd0\111\uffd0\112" +
    "\uffd0\113\uffd0\001\002\000\072\041\uffcf\054\uffcf\055\076" +
    "\056\uffcf\060\uffcf\062\uffcf\063\uffcf\064\uffcf\066\056\067" +
    "\075\070\071\071\073\072\066\073\063\074\054\075\072" +
    "\076\060\077\062\101\053\102\102\103\uffcf\104\uffcf\106" +
    "\uffcf\107\uffcf\110\uffcf\111\uffcf\112\uffcf\113\uffcf\001\002" +
    "\000\004\061\046\001\002\000\072\041\uffa6\054\uffa6\055" +
    "\uffa6\056\uffa6\060\uffa6\062\uffa6\063\uffa6\064\uffa6\066\uffa6" +
    "\067\uffa6\070\uffa6\071\uffa6\072\uffa6\073\uffa6\074\uffa6\075" +
    "\uffa6\076\uffa6\077\uffa6\101\uffa6\102\uffa6\103\uffa6\104\uffa6" +
    "\106\uffa6\107\uffa6\110\uffa6\111\uffa6\112\uffa6\113\uffa6\001" +
    "\002\000\072\041\uffc7\054\uffc7\055\076\056\uffc7\060\uffc7" +
    "\062\uffc7\063\uffc7\064\uffc7\066\uffc7\067\uffc7\070\071\071" +
    "\073\072\066\073\063\074\054\075\uffc7\076\uffc7\077\uffc7" +
    "\101\uffc7\102\uffc7\103\uffc7\104\uffc7\106\uffc7\107\uffc7\110" +
    "\uffc7\111\uffc7\112\uffc7\113\uffc7\001\002\000\072\041\uffd3" +
    "\054\uffd3\055\076\056\uffd3\060\uffd3\062\uffd3\063\uffd3\064" +
    "\uffd3\066\056\067\075\070\071\071\073\072\066\073\063" +
    "\074\054\075\072\076\060\077\062\101\053\102\102\103" +
    "\uffd3\104\uffd3\106\uffd3\107\uffd3\110\uffd3\111\uffd3\112\uffd3" +
    "\113\uffd3\001\002\000\072\041\uffc5\054\uffc5\055\076\056" +
    "\uffc5\060\uffc5\062\uffc5\063\uffc5\064\uffc5\066\uffc5\067\uffc5" +
    "\070\uffc5\071\uffc5\072\066\073\uffc5\074\uffc5\075\uffc5\076" +
    "\uffc5\077\uffc5\101\uffc5\102\uffc5\103\uffc5\104\uffc5\106\uffc5" +
    "\107\uffc5\110\uffc5\111\uffc5\112\uffc5\113\uffc5\001\002\000" +
    "\072\041\uffcb\054\uffcb\055\076\056\uffcb\060\uffcb\062\uffcb" +
    "\063\uffcb\064\uffcb\066\056\067\075\070\071\071\073\072" +
    "\066\073\063\074\054\075\uffcb\076\uffcb\077\uffcb\101\053" +
    "\102\102\103\uffcb\104\uffcb\106\uffcb\107\uffcb\110\uffcb\111" +
    "\uffcb\112\uffcb\113\uffcb\001\002\000\072\041\uffc6\054\uffc6" +
    "\055\076\056\uffc6\060\uffc6\062\uffc6\063\uffc6\064\uffc6\066" +
    "\uffc6\067\uffc6\070\uffc6\071\uffc6\072\066\073\uffc6\074\uffc6" +
    "\075\uffc6\076\uffc6\077\uffc6\101\uffc6\102\uffc6\103\uffc6\104" +
    "\uffc6\106\uffc6\107\uffc6\110\uffc6\111\uffc6\112\uffc6\113\uffc6" +
    "\001\002\000\006\041\uffe9\060\uffe9\001\002\000\064\041" +
    "\uffec\054\117\055\076\060\uffec\063\065\066\056\067\075" +
    "\070\071\071\073\072\066\073\063\074\054\075\072\076" +
    "\060\077\062\101\053\102\102\103\055\104\057\106\067" +
    "\107\100\110\074\111\061\112\064\113\101\001\002\000" +
    "\040\045\011\047\037\050\004\051\025\052\022\053\024" +
    "\061\014\063\013\065\020\067\032\100\023\105\010\116" +
    "\016\117\012\120\031\001\002\000\006\041\uffeb\060\uffeb" +
    "\001\002\000\072\041\uffce\054\uffce\055\076\056\uffce\060" +
    "\uffce\062\uffce\063\uffce\064\uffce\066\056\067\075\070\071" +
    "\071\073\072\066\073\063\074\054\075\072\076\060\077" +
    "\062\101\053\102\102\103\uffce\104\uffce\106\uffce\107\uffce" +
    "\110\uffce\111\uffce\112\uffce\113\uffce\001\002\000\072\041" +
    "\uffc2\054\uffc2\055\076\056\uffc2\060\uffc2\062\uffc2\063\uffc2" +
    "\064\uffc2\066\uffc2\067\uffc2\070\uffc2\071\uffc2\072\066\073" +
    "\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2\101\uffc2\102\uffc2" +
    "\103\uffc2\104\uffc2\106\uffc2\107\uffc2\110\uffc2\111\uffc2\112" +
    "\uffc2\113\uffc2\001\002\000\060\055\076\062\124\063\065" +
    "\066\056\067\075\070\071\071\073\072\066\073\063\074" +
    "\054\075\072\076\060\077\062\101\053\102\102\103\055" +
    "\104\057\106\067\107\100\110\074\111\061\112\064\113" +
    "\101\001\002\000\074\041\uffdf\046\uffdf\054\uffdf\055\uffdf" +
    "\056\uffdf\060\uffdf\062\uffdf\063\uffdf\064\uffdf\066\uffdf\067" +
    "\uffdf\070\uffdf\071\uffdf\072\uffdf\073\uffdf\074\uffdf\075\uffdf" +
    "\076\uffdf\077\uffdf\101\uffdf\102\uffdf\103\uffdf\104\uffdf\106" +
    "\uffdf\107\uffdf\110\uffdf\111\uffdf\112\uffdf\113\uffdf\001\002" +
    "\000\074\041\uffde\046\uffde\054\uffde\055\uffde\056\uffde\060" +
    "\uffde\062\uffde\063\uffde\064\uffde\066\uffde\067\uffde\070\uffde" +
    "\071\uffde\072\uffde\073\uffde\074\uffde\075\uffde\076\uffde\077" +
    "\uffde\101\uffde\102\uffde\103\uffde\104\uffde\106\uffde\107\uffde" +
    "\110\uffde\111\uffde\112\uffde\113\uffde\001\002\000\072\041" +
    "\uffd1\054\uffd1\055\076\056\uffd1\060\uffd1\062\uffd1\063\uffd1" +
    "\064\uffd1\066\056\067\075\070\071\071\073\072\066\073" +
    "\063\074\054\075\072\076\060\077\062\101\053\102\102" +
    "\103\uffd1\104\uffd1\106\uffd1\107\uffd1\110\uffd1\111\uffd1\112" +
    "\uffd1\113\uffd1\001\002\000\072\041\uffc3\054\uffc3\055\076" +
    "\056\uffc3\060\uffc3\062\uffc3\063\uffc3\064\uffc3\066\uffc3\067" +
    "\uffc3\070\uffc3\071\uffc3\072\066\073\uffc3\074\uffc3\075\uffc3" +
    "\076\uffc3\077\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3\106" +
    "\uffc3\107\uffc3\110\uffc3\111\uffc3\112\uffc3\113\uffc3\001\002" +
    "\000\072\041\uffcc\054\uffcc\055\076\056\uffcc\060\uffcc\062" +
    "\uffcc\063\uffcc\064\uffcc\066\056\067\075\070\071\071\073" +
    "\072\066\073\063\074\054\075\072\076\uffcc\077\uffcc\101" +
    "\053\102\102\103\uffcc\104\uffcc\106\uffcc\107\uffcc\110\uffcc" +
    "\111\uffcc\112\uffcc\113\uffcc\001\002\000\072\041\uffd2\054" +
    "\uffd2\055\076\056\uffd2\060\uffd2\062\uffd2\063\uffd2\064\uffd2" +
    "\066\056\067\075\070\071\071\073\072\066\073\063\074" +
    "\054\075\072\076\060\077\062\101\053\102\102\103\uffd2" +
    "\104\uffd2\106\uffd2\107\uffd2\110\uffd2\111\uffd2\112\uffd2\113" +
    "\uffd2\001\002\000\072\041\uffcd\054\uffcd\055\076\056\uffcd" +
    "\060\uffcd\062\uffcd\063\uffcd\064\uffcd\066\056\067\075\070" +
    "\071\071\073\072\066\073\063\074\054\075\072\076\uffcd" +
    "\077\062\101\053\102\102\103\uffcd\104\uffcd\106\uffcd\107" +
    "\uffcd\110\uffcd\111\uffcd\112\uffcd\113\uffcd\001\002\000\072" +
    "\041\uffd5\054\uffd5\055\076\056\uffd5\060\uffd5\062\uffd5\063" +
    "\uffd5\064\uffd5\066\056\067\075\070\071\071\073\072\066" +
    "\073\063\074\054\075\072\076\060\077\062\101\053\102" +
    "\102\103\055\104\uffd5\106\067\107\100\110\074\111\061" +
    "\112\064\113\101\001\002\000\072\041\uffc8\054\uffc8\055" +
    "\076\056\uffc8\060\uffc8\062\uffc8\063\uffc8\064\uffc8\066\uffc8" +
    "\067\uffc8\070\071\071\073\072\066\073\063\074\054\075" +
    "\uffc8\076\uffc8\077\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8" +
    "\106\uffc8\107\uffc8\110\uffc8\111\uffc8\112\uffc8\113\uffc8\001" +
    "\002\000\072\041\uffd4\054\uffd4\055\076\056\uffd4\060\uffd4" +
    "\062\uffd4\063\uffd4\064\uffd4\066\056\067\075\070\071\071" +
    "\073\072\066\073\063\074\054\075\072\076\060\077\062" +
    "\101\053\102\102\103\uffd4\104\uffd4\106\067\107\100\110" +
    "\074\111\061\112\064\113\101\001\002\000\072\041\uffc4" +
    "\054\uffc4\055\076\056\uffc4\060\uffc4\062\uffc4\063\uffc4\064" +
    "\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4\072\066\073\uffc4" +
    "\074\uffc4\075\uffc4\076\uffc4\077\uffc4\101\uffc4\102\uffc4\103" +
    "\uffc4\104\uffc4\106\uffc4\107\uffc4\110\uffc4\111\uffc4\112\uffc4" +
    "\113\uffc4\001\002\000\072\041\uffca\054\uffca\055\076\056" +
    "\uffca\060\uffca\062\uffca\063\uffca\064\uffca\066\056\067\075" +
    "\070\071\071\073\072\066\073\063\074\054\075\uffca\076" +
    "\uffca\077\uffca\101\uffca\102\uffca\103\uffca\104\uffca\106\uffca" +
    "\107\uffca\110\uffca\111\uffca\112\uffca\113\uffca\001\002\000" +
    "\006\054\153\060\uffad\001\002\000\072\041\uffa8\054\uffa8" +
    "\055\uffa8\056\uffa8\060\uffa8\062\uffa8\063\uffa8\064\uffa8\066" +
    "\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\073\uffa8\074\uffa8" +
    "\075\uffa8\076\uffa8\077\uffa8\101\uffa8\102\uffa8\103\uffa8\104" +
    "\uffa8\106\uffa8\107\uffa8\110\uffa8\111\uffa8\112\uffa8\113\uffa8" +
    "\001\002\000\004\060\uffa9\001\002\000\066\046\151\054" +
    "\ufff1\055\ufff1\060\ufff1\061\ufff1\063\ufff1\066\ufff1\067\ufff1" +
    "\070\ufff1\071\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1\076" +
    "\ufff1\077\ufff1\101\ufff1\102\ufff1\103\ufff1\104\ufff1\106\ufff1" +
    "\107\ufff1\110\ufff1\111\ufff1\112\ufff1\113\ufff1\001\002\000" +
    "\062\054\147\055\076\060\uffab\063\065\066\056\067\075" +
    "\070\071\071\073\072\066\073\063\074\054\075\072\076" +
    "\060\077\062\101\053\102\102\103\055\104\057\106\067" +
    "\107\100\110\074\111\061\112\064\113\101\001\002\000" +
    "\004\060\146\001\002\000\072\041\uffa7\054\uffa7\055\uffa7" +
    "\056\uffa7\060\uffa7\062\uffa7\063\uffa7\064\uffa7\066\uffa7\067" +
    "\uffa7\070\uffa7\071\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7" +
    "\076\uffa7\077\uffa7\101\uffa7\102\uffa7\103\uffa7\104\uffa7\106" +
    "\uffa7\107\uffa7\110\uffa7\111\uffa7\112\uffa7\113\uffa7\001\002" +
    "\000\040\045\143\047\037\050\004\051\025\052\022\053" +
    "\024\061\014\063\013\065\020\067\032\100\023\105\010" +
    "\116\016\117\012\120\031\001\002\000\004\060\uffaa\001" +
    "\002\000\040\045\011\047\037\050\004\051\025\052\022" +
    "\053\024\061\014\063\013\065\020\067\032\100\023\105" +
    "\010\116\016\117\012\120\031\001\002\000\062\054\uffae" +
    "\055\076\060\uffae\063\065\066\056\067\075\070\071\071" +
    "\073\072\066\073\063\074\054\075\072\076\060\077\062" +
    "\101\053\102\102\103\055\104\057\106\067\107\100\110" +
    "\074\111\061\112\064\113\101\001\002\000\004\045\155" +
    "\001\002\000\004\060\uffac\001\002\000\004\046\151\001" +
    "\002\000\006\046\uffb8\054\044\001\002\000\064\046\uffb9" +
    "\054\044\055\ufff0\061\046\063\ufff0\066\ufff0\067\ufff0\070" +
    "\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0\075\ufff0\076\ufff0" +
    "\077\ufff0\101\ufff0\102\ufff0\103\ufff0\104\ufff0\106\ufff0\107" +
    "\ufff0\110\ufff0\111\ufff0\112\ufff0\113\ufff0\001\002\000\004" +
    "\046\uffb7\001\002\000\004\046\uffb6\001\002\000\040\045" +
    "\011\047\037\050\004\051\025\052\022\053\024\061\014" +
    "\063\013\065\020\067\032\100\023\105\010\116\016\117" +
    "\012\120\031\001\002\000\004\041\164\001\002\000\004" +
    "\040\166\001\002\000\004\041\173\001\002\000\040\045" +
    "\011\047\037\050\004\051\025\052\022\053\024\061\014" +
    "\063\013\065\020\067\032\100\023\105\010\116\016\117" +
    "\012\120\031\001\002\000\062\041\uffbf\054\171\055\076" +
    "\063\065\066\056\067\075\070\071\071\073\072\066\073" +
    "\063\074\054\075\072\076\060\077\062\101\053\102\102" +
    "\103\055\104\057\106\067\107\100\110\074\111\061\112" +
    "\064\113\101\001\002\000\004\041\uffbd\001\002\000\040" +
    "\045\011\047\037\050\004\051\025\052\022\053\024\061" +
    "\014\063\013\065\020\067\032\100\023\105\010\116\016" +
    "\117\012\120\031\001\002\000\004\041\uffbe\001\002\000" +
    "\004\002\001\001\002\000\040\045\011\047\037\050\004" +
    "\051\025\052\022\053\024\061\014\063\013\065\020\067" +
    "\032\100\023\105\010\116\016\117\012\120\031\001\002" +
    "\000\004\041\uffb0\001\002\000\062\041\uffaf\054\070\055" +
    "\076\063\065\066\056\067\075\070\071\071\073\072\066" +
    "\073\063\074\054\075\072\076\060\077\062\101\053\102" +
    "\102\103\055\104\057\106\067\107\100\110\074\111\061" +
    "\112\064\113\101\001\002\000\072\041\ufffe\054\ufffe\055" +
    "\ufffe\056\ufffe\060\ufffe\062\ufffe\063\ufffe\064\ufffe\066\ufffe" +
    "\067\ufffe\070\ufffe\071\ufffe\072\ufffe\073\ufffe\074\ufffe\075" +
    "\ufffe\076\ufffe\077\ufffe\101\ufffe\102\ufffe\103\ufffe\104\ufffe" +
    "\106\ufffe\107\ufffe\110\ufffe\111\ufffe\112\ufffe\113\ufffe\001" +
    "\002\000\072\041\ufffc\054\ufffc\055\ufffc\056\ufffc\060\ufffc" +
    "\062\ufffc\063\ufffc\064\ufffc\066\ufffc\067\ufffc\070\ufffc\071" +
    "\ufffc\072\ufffc\073\ufffc\074\ufffc\075\ufffc\076\ufffc\077\ufffc" +
    "\101\ufffc\102\ufffc\103\ufffc\104\ufffc\106\ufffc\107\ufffc\110" +
    "\ufffc\111\ufffc\112\ufffc\113\ufffc\001\002\000\072\041\ufffa" +
    "\054\ufffa\055\ufffa\056\ufffa\060\ufffa\062\ufffa\063\ufffa\064" +
    "\ufffa\066\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa" +
    "\074\ufffa\075\ufffa\076\ufffa\077\ufffa\101\ufffa\102\ufffa\103" +
    "\ufffa\104\ufffa\106\ufffa\107\ufffa\110\ufffa\111\ufffa\112\ufffa" +
    "\113\ufffa\001\002\000\062\046\uffba\054\uffba\055\uffdd\063" +
    "\uffdd\066\uffdd\067\uffdd\070\uffdd\071\uffdd\072\uffdd\073\uffdd" +
    "\074\uffdd\075\uffdd\076\uffdd\077\uffdd\101\uffdd\102\uffdd\103" +
    "\uffdd\104\uffdd\106\uffdd\107\uffdd\110\uffdd\111\uffdd\112\uffdd" +
    "\113\uffdd\001\002\000\072\041\uffc0\054\uffc0\055\076\056" +
    "\uffc0\060\uffc0\062\uffc0\063\uffc0\064\uffc0\066\uffc0\067\uffc0" +
    "\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074\uffc0\075\uffc0\076" +
    "\uffc0\077\uffc0\101\uffc0\102\uffc0\103\uffc0\104\uffc0\106\uffc0" +
    "\107\uffc0\110\uffc0\111\uffc0\112\uffc0\113\uffc0\001\002\000" +
    "\072\041\uffe3\054\uffe3\055\uffe3\056\uffe3\060\uffe3\062\uffe3" +
    "\063\uffe3\064\uffe3\066\uffe3\067\uffe3\070\uffe3\071\uffe3\072" +
    "\uffe3\073\uffe3\074\uffe3\075\uffe3\076\uffe3\077\uffe3\101\uffe3" +
    "\102\uffe3\103\uffe3\104\uffe3\106\uffe3\107\uffe3\110\uffe3\111" +
    "\uffe3\112\uffe3\113\uffe3\001\002\000\004\064\214\001\002" +
    "\000\006\054\212\064\uffe1\001\002\000\060\055\076\056" +
    "\210\063\065\066\056\067\075\070\071\071\073\072\066" +
    "\073\063\074\054\075\072\076\060\077\062\101\053\102" +
    "\102\103\055\104\057\106\067\107\100\110\074\111\061" +
    "\112\064\113\101\001\002\000\040\045\011\047\037\050" +
    "\004\051\025\052\022\053\024\061\014\063\013\065\020" +
    "\067\032\100\023\105\010\116\016\117\012\120\031\001" +
    "\002\000\062\054\uffe2\055\076\063\065\064\uffe2\066\056" +
    "\067\075\070\071\071\073\072\066\073\063\074\054\075" +
    "\072\076\060\077\062\101\053\102\102\103\055\104\057" +
    "\106\067\107\100\110\074\111\061\112\064\113\101\001" +
    "\002\000\040\045\011\047\037\050\004\051\025\052\022" +
    "\053\024\061\014\063\013\065\020\067\032\100\023\105" +
    "\010\116\016\117\012\120\031\001\002\000\004\064\uffe0" +
    "\001\002\000\072\041\uffe4\054\uffe4\055\uffe4\056\uffe4\060" +
    "\uffe4\062\uffe4\063\uffe4\064\uffe4\066\uffe4\067\uffe4\070\uffe4" +
    "\071\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4\076\uffe4\077" +
    "\uffe4\101\uffe4\102\uffe4\103\uffe4\104\uffe4\106\uffe4\107\uffe4" +
    "\110\uffe4\111\uffe4\112\uffe4\113\uffe4\001\002\000\004\002" +
    "\000\001\002\000\072\041\uffee\054\uffee\055\uffee\056\uffee" +
    "\060\uffee\062\uffee\063\uffee\064\uffee\066\uffee\067\uffee\070" +
    "\uffee\071\uffee\072\uffee\073\uffee\074\uffee\075\uffee\076\uffee" +
    "\077\uffee\101\uffee\102\uffee\103\uffee\104\uffee\106\uffee\107" +
    "\uffee\110\uffee\111\uffee\112\uffee\113\uffee\001\002\000\004" +
    "\060\222\001\002\000\062\054\070\055\076\060\221\063" +
    "\065\066\056\067\075\070\071\071\073\072\066\073\063" +
    "\074\054\075\072\076\060\077\062\101\053\102\102\103" +
    "\055\104\057\106\067\107\100\110\074\111\061\112\064" +
    "\113\101\001\002\000\072\041\uffd6\054\uffd6\055\uffd6\056" +
    "\uffd6\060\uffd6\062\uffd6\063\uffd6\064\uffd6\066\uffd6\067\uffd6" +
    "\070\uffd6\071\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6\076" +
    "\uffd6\077\uffd6\101\uffd6\102\uffd6\103\uffd6\104\uffd6\106\uffd6" +
    "\107\uffd6\110\uffd6\111\uffd6\112\uffd6\113\uffd6\001\002\000" +
    "\072\041\uffed\054\uffed\055\uffed\056\uffed\060\uffed\062\uffed" +
    "\063\uffed\064\uffed\066\uffed\067\uffed\070\uffed\071\uffed\072" +
    "\uffed\073\uffed\074\uffed\075\uffed\076\uffed\077\uffed\101\uffed" +
    "\102\uffed\103\uffed\104\uffed\106\uffed\107\uffed\110\uffed\111" +
    "\uffed\112\uffed\113\uffed\001\002\000\072\041\uffe8\054\uffe8" +
    "\055\uffe8\056\uffe8\060\uffe8\062\uffe8\063\uffe8\064\uffe8\066" +
    "\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8\073\uffe8\074\uffe8" +
    "\075\uffe8\076\uffe8\077\uffe8\101\uffe8\102\uffe8\103\uffe8\104" +
    "\uffe8\106\uffe8\107\uffe8\110\uffe8\111\uffe8\112\uffe8\113\uffe8" +
    "\001\002\000\004\062\230\001\002\000\062\054\226\055" +
    "\076\062\uffe6\063\065\066\056\067\075\070\071\071\073" +
    "\072\066\073\063\074\054\075\072\076\060\077\062\101" +
    "\053\102\102\103\055\104\057\106\067\107\100\110\074" +
    "\111\061\112\064\113\101\001\002\000\040\045\011\047" +
    "\037\050\004\051\025\052\022\053\024\061\014\063\013" +
    "\065\020\067\032\100\023\105\010\116\016\117\012\120" +
    "\031\001\002\000\004\062\uffe5\001\002\000\072\041\uffe7" +
    "\054\uffe7\055\uffe7\056\uffe7\060\uffe7\062\uffe7\063\uffe7\064" +
    "\uffe7\066\uffe7\067\uffe7\070\uffe7\071\uffe7\072\uffe7\073\uffe7" +
    "\074\uffe7\075\uffe7\076\uffe7\077\uffe7\101\uffe7\102\uffe7\103" +
    "\uffe7\104\uffe7\106\uffe7\107\uffe7\110\uffe7\111\uffe7\112\uffe7" +
    "\113\uffe7\001\002\000\072\041\uffc1\054\uffc1\055\076\056" +
    "\uffc1\060\uffc1\062\uffc1\063\uffc1\064\uffc1\066\056\067\075" +
    "\070\071\071\073\072\066\073\063\074\054\075\072\076" +
    "\060\077\062\101\053\102\102\103\uffc1\104\uffc1\106\067" +
    "\107\100\110\074\111\061\112\064\113\101\001\002\000" +
    "\004\046\uffb4\001\002\000\040\045\011\047\037\050\004" +
    "\051\025\052\022\053\024\061\014\063\013\065\020\067" +
    "\032\100\023\105\010\116\016\117\012\120\031\001\002" +
    "\000\060\041\uffb1\055\076\063\065\066\056\067\075\070" +
    "\071\071\073\072\066\073\063\074\054\075\072\076\060" +
    "\077\062\101\053\102\102\103\055\104\057\106\067\107" +
    "\100\110\074\111\061\112\064\113\101\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\042\002\005\003\004\010\025\014\032\015" +
    "\035\023\020\024\034\025\040\026\033\041\041\044\016" +
    "\046\037\047\026\054\027\055\006\056\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\231\001\001\000\032\002\005\003\004\010\230\023" +
    "\020\024\034\025\040\026\033\041\051\044\016\046\037" +
    "\047\026\054\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\002\005\003\004\010\224\023\020\024\034" +
    "\025\040\026\033\041\051\044\016\045\223\046\037\047" +
    "\026\054\027\001\001\000\034\002\005\003\004\010\217" +
    "\023\020\024\034\025\040\026\033\041\051\044\016\046" +
    "\037\047\026\051\216\054\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\002\005\003" +
    "\004\010\206\023\020\024\034\025\040\026\033\041\051" +
    "\042\204\043\205\044\016\046\037\047\026\054\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\002\005" +
    "\003\004\010\202\023\020\024\034\025\040\026\033\041" +
    "\051\044\016\046\037\047\026\054\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\042\022\044\001\001\000" +
    "\002\001\001\000\034\002\005\003\004\010\025\023\020" +
    "\024\034\025\040\026\033\041\156\044\016\046\037\047" +
    "\026\054\027\055\155\001\001\000\002\001\001\000\040" +
    "\002\005\003\004\010\143\017\137\020\141\021\144\023" +
    "\020\024\034\025\040\026\033\041\051\044\016\046\037" +
    "\047\026\054\027\001\001\000\034\002\005\003\004\010" +
    "\050\023\020\024\034\025\040\026\033\041\051\044\016" +
    "\046\037\047\026\051\047\054\027\001\001\000\002\001" +
    "\001\000\004\053\076\001\001\000\004\022\044\001\001" +
    "\000\032\002\005\003\004\010\136\023\020\024\034\025" +
    "\040\026\033\041\051\044\016\046\037\047\026\054\027" +
    "\001\001\000\032\002\005\003\004\010\135\023\020\024" +
    "\034\025\040\026\033\041\051\044\016\046\037\047\026" +
    "\054\027\001\001\000\032\002\005\003\004\010\134\023" +
    "\020\024\034\025\040\026\033\041\051\044\016\046\037" +
    "\047\026\054\027\001\001\000\032\002\005\003\004\010" +
    "\133\023\020\024\034\025\040\026\033\041\051\044\016" +
    "\046\037\047\026\054\027\001\001\000\032\002\005\003" +
    "\004\010\132\023\020\024\034\025\040\026\033\041\051" +
    "\044\016\046\037\047\026\054\027\001\001\000\032\002" +
    "\005\003\004\010\131\023\020\024\034\025\040\026\033" +
    "\041\051\044\016\046\037\047\026\054\027\001\001\000" +
    "\032\002\005\003\004\010\130\023\020\024\034\025\040" +
    "\026\033\041\051\044\016\046\037\047\026\054\027\001" +
    "\001\000\032\002\005\003\004\010\127\023\020\024\034" +
    "\025\040\026\033\041\051\044\016\046\037\047\026\054" +
    "\027\001\001\000\032\002\005\003\004\010\126\023\020" +
    "\024\034\025\040\026\033\041\051\044\016\046\037\047" +
    "\026\054\027\001\001\000\032\002\005\003\004\010\125" +
    "\023\020\024\034\025\040\026\033\041\051\044\016\046" +
    "\037\047\026\054\027\001\001\000\032\002\005\003\004" +
    "\010\122\023\020\024\034\025\040\026\033\041\051\044" +
    "\016\046\037\047\026\054\027\001\001\000\032\002\005" +
    "\003\004\010\121\023\020\024\034\025\040\026\033\041" +
    "\051\044\016\046\037\047\026\054\027\001\001\000\032" +
    "\002\005\003\004\010\120\023\020\024\034\025\040\026" +
    "\033\041\051\044\016\046\037\047\026\054\027\001\001" +
    "\000\034\002\005\003\004\010\115\023\020\024\034\025" +
    "\040\026\033\041\051\044\016\046\037\047\026\050\114" +
    "\054\027\001\001\000\032\002\005\003\004\010\113\023" +
    "\020\024\034\025\040\026\033\041\051\044\016\046\037" +
    "\047\026\054\027\001\001\000\032\002\005\003\004\010" +
    "\112\023\020\024\034\025\040\026\033\041\051\044\016" +
    "\046\037\047\026\054\027\001\001\000\032\002\005\003" +
    "\004\010\111\023\020\024\034\025\040\026\033\041\051" +
    "\044\016\046\037\047\026\054\027\001\001\000\032\002" +
    "\005\003\004\010\110\023\020\024\034\025\040\026\033" +
    "\041\051\044\016\046\037\047\026\054\027\001\001\000" +
    "\032\002\005\003\004\010\107\023\020\024\034\025\040" +
    "\026\033\041\051\044\016\046\037\047\026\054\027\001" +
    "\001\000\004\041\105\001\001\000\002\001\001\000\032" +
    "\002\005\003\004\010\104\023\020\024\034\025\040\026" +
    "\033\041\051\044\016\046\037\047\026\054\027\001\001" +
    "\000\032\002\005\003\004\010\103\023\020\024\034\025" +
    "\040\026\033\041\051\044\016\046\037\047\026\054\027" +
    "\001\001\000\032\002\005\003\004\010\102\023\020\024" +
    "\034\025\040\026\033\041\051\044\016\046\037\047\026" +
    "\054\027\001\001\000\004\053\076\001\001\000\004\053" +
    "\076\001\001\000\004\053\076\001\001\000\004\022\106" +
    "\001\001\000\002\001\001\000\004\053\076\001\001\000" +
    "\004\053\076\001\001\000\004\053\076\001\001\000\004" +
    "\053\076\001\001\000\004\053\076\001\001\000\002\001" +
    "\001\000\004\053\076\001\001\000\034\002\005\003\004" +
    "\010\115\023\020\024\034\025\040\026\033\041\051\044" +
    "\016\046\037\047\026\050\117\054\027\001\001\000\002" +
    "\001\001\000\004\053\076\001\001\000\004\053\076\001" +
    "\001\000\004\053\076\001\001\000\004\053\124\001\001" +
    "\000\002\001\001\000\004\053\076\001\001\000\004\053" +
    "\076\001\001\000\004\053\076\001\001\000\004\053\076" +
    "\001\001\000\004\053\076\001\001\000\004\053\076\001" +
    "\001\000\004\053\076\001\001\000\004\053\076\001\001" +
    "\000\004\053\076\001\001\000\004\053\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\002\005\003\004\010\143\017\137" +
    "\020\141\021\147\023\020\024\034\025\040\026\033\041" +
    "\051\044\016\046\037\047\026\054\027\001\001\000\002" +
    "\001\001\000\032\002\005\003\004\010\151\023\020\024" +
    "\034\025\040\026\033\041\051\044\016\046\037\047\026" +
    "\054\027\001\001\000\004\053\076\001\001\000\006\017" +
    "\137\020\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\160\001\001\000\006\013\157\022\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\002\005" +
    "\003\004\010\025\014\032\015\162\023\020\024\034\025" +
    "\040\026\033\041\041\044\016\046\037\047\026\054\027" +
    "\055\006\001\001\000\002\001\001\000\004\007\164\001" +
    "\001\000\002\001\001\000\034\002\005\003\004\010\166" +
    "\023\020\024\034\025\040\026\033\041\051\044\016\046" +
    "\037\047\026\052\167\054\027\001\001\000\004\053\076" +
    "\001\001\000\002\001\001\000\034\002\005\003\004\010" +
    "\166\023\020\024\034\025\040\026\033\041\051\044\016" +
    "\046\037\047\026\052\171\054\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\002\005\003\004\010\175" +
    "\023\020\024\034\025\040\026\033\041\051\044\016\046" +
    "\037\047\026\051\174\054\027\001\001\000\002\001\001" +
    "\000\004\053\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\076\001\001\000\032\002\005\003\004" +
    "\010\210\023\020\024\034\025\040\026\033\041\051\044" +
    "\016\046\037\047\026\054\027\001\001\000\004\053\076" +
    "\001\001\000\036\002\005\003\004\010\206\023\020\024" +
    "\034\025\040\026\033\041\051\042\212\043\205\044\016" +
    "\046\037\047\026\054\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\076\001\001\000\034\002\005\003\004\010\224\023" +
    "\020\024\034\025\040\026\033\041\051\044\016\045\226" +
    "\046\037\047\026\054\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\076\001\001\000\002\001\001" +
    "\000\032\002\005\003\004\010\233\023\020\024\034\025" +
    "\040\026\033\041\051\044\016\046\037\047\026\054\027" +
    "\001\001\000\004\053\076\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    //MANTENGO UN STACK DE GENERADORES Y PUSHEO EL PRIMERO
    ParserStatus.StackGenerador.push(new Generador());

    }





    public void syntax_error(Symbol s){
        System.out.println("Error de sintaxis "+s.sym+" en la linea "+(s.left+1)+" y la columna "+s.right);
        System.out.println(s.value);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error de sintaxis "+s.sym);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // for_stmt ::= FOR name IN expression COLON NEWLINE INDENT stmt_list DEDENT NEWLINE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=RuleGenerator.generateFor(n,exp,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // if_stmt ::= IF expression COLON print_stmt NEWLINE ELSE COLON print_stmt NEWLINE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateIfStatement(e,c1,s1,c2,s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // if_stmt ::= IF expression COLON print_stmt NEWLINE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateIfStatement(e,c,s1,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // suite ::= NEWLINE INDENT stmt_list DEDENT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("suite",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // suite ::= stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("suite",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // stmt_list ::= stmt stmt_list 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.joinBloques(s,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // stmt_list ::= stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // compound_stmt ::= func_def 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // compound_stmt ::= for_stmt 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // compound_stmt ::= while_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // compound_stmt ::= if_stmt 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // stmt ::= compound_stmt NEWLINE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // stmt ::= small_stmt NEWLINE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // small_stmt ::= flow_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // small_stmt ::= print_stmt 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // small_stmt ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // small_stmt ::= expr_stmt 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // flow_stmt ::= return_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // flow_stmt ::= CONTINUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // flow_stmt ::= BREAK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // func_call ::= name trailer 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateFunctionCall(n,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // func_call ::= expression DOT name trailer 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateNameFunctionCall(e,d,n,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // trailer ::= LPAREN argument_list RPAREN 
            {
              Object RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = al; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trailer",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // trailer ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trailer",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // argument_list ::= named_argument_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // argument_list ::= expression COMA argument_list 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateArguments(c,e,al); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // argument_list ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateArguments(null,e,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // named_argument_list ::= named_argument COMA named_argument_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("named_argument_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // named_argument_list ::= named_argument 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("named_argument_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // named_argument ::= NAME ASSIGN expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("named_argument",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr_stmt ::= namelist ASSIGN expression 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int auleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int auright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object au = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateUnpackAssignation(n,au,tr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr_stmt ::= namelist ASSIGN tuplemaker 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int auleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int auright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object au = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateTupleMakerAssignation(n,au,tr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr_stmt ::= assign_exprsub ASSIGN expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int auleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int auright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object au = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSubscriptAssignation(e,au,exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr_stmt ::= name ASSIGN tuplemaker 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int auleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int auright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object au = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateTupleMakerSingleAssignation(n,au,tr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr_stmt ::= name ASSIGN expression 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int auleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int auright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object au = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateAssignation(n,au,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // namelist ::= assign_exprsub namecoma 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.joinNames(e,nc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namelist",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // namelist ::= name namecoma 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.joinNames(n,nc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namelist",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // namecoma ::= COMA assign_exprsub namecoma 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.joinNames(n,nc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namecoma",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // namecoma ::= COMA name namecoma 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.joinNames(n,nc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namecoma",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // namecoma ::= COMA assign_exprsub 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.addSetIndex(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namecoma",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // namecoma ::= COMA name 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                ParseResult pr = RuleGenerator.storeName(n);
                                                                pr.argumentos = 1;
                                                                RESULT = pr;
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namecoma",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // assign_exprsub ::= expression subscript 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int subleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sub = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSubscriptForAssign(exp1,sub); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_exprsub",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // return_stmt ::= RETURN tuplemaker 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // return_stmt ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // print_stmt ::= PRINT printtrail 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generatePrintNewline(p,n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // printtrail ::= expression COMA printtrail 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generatePrint(e,c,p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printtrail",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // printtrail ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generatePrint(e,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printtrail",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= NOTB expression 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateUnaryOperation(op,a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= NOT expression 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateUnaryOperation(op,a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= expression EXP expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= expression DIVE expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= expression MOD expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= expression DIV expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= expression MULT expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= expression MINUS expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= expression PLUS expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= expression SHIFTR expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= expression SHIFTL expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= expression ANDB expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= expression XORB expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= expression ORB expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= expression EQUALS expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= expression DIFF expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= expression MAJOREQ expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= expression MINOREQ expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= expression MAJOR expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= expression MINOR expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= expression AND expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= expression OR expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= exprsub 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= func_call 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= tuple 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= list 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= dictionary 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= atom 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.loadNameOrConst(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exprsub ::= expression subscript 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int subleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sub = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateFullSubscript(exp1,sub); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprsub",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // subscript ::= LBRACKET expression RBRACKET subscript 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSubscript(l,e,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subscript",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // subscript ::= LBRACKET expression RBRACKET 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateSubscript(l,e,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subscript",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dictorsetmaker ::= dictorsetelement COMA dictorsetmaker 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e1,c,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // dictorsetmaker ::= dictorsetelement 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(d,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dictorsetelement ::= expression COLON expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateDictItem(e1,c,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dictorsetelement",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // dictionary ::= LCURLY RCURLY 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateListTupleDict(c,null,OpCode.CREATE_DICT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dictionary",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // dictionary ::= LCURLY dictorsetmaker RCURLY 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateListTupleDict(c,e,OpCode.CREATE_DICT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dictionary",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // listmaker ::= expression COMA listmaker 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e,c,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listmaker",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // listmaker ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listmaker",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // list ::= LBRACKET listmaker RBRACKET 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateListTupleDict(b,l,OpCode.CREATE_LIST);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // list ::= LBRACKET RBRACKET 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateListTupleDict(b,null,OpCode.CREATE_LIST); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tuplemaker ::= expression COMA tupletrail 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e,c,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuplemaker",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tuplemaker ::= expression COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuplemaker",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tupletrail ::= expression COMA tupletrail 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e,c,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tupletrail",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tupletrail ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tupletrail",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tuple ::= LPAREN tuplemaker RPAREN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateListTupleDict(b,l,OpCode.CREATE_TUPLE);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tuple ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateListTupleDict(b,null,OpCode.CREATE_TUPLE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // atom ::= constant 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // atom ::= name 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // name ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = RuleGenerator.generateName((LexerToken)n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constant ::= FALSE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constant ::= TRUE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constant ::= NONE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constant ::= STRING3 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constant ::= STRING 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constant ::= float 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constant ::= long 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constant ::= integer 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // float ::= MINUS FLOAT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateMinusConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("float",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // float ::= FLOAT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("float",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // long ::= MINUS LONG 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateMinusConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("long",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // long ::= LONG 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("long",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // integer ::= MINUS INTEGER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateMinusConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // integer ::= INTEGER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= expr_stmt NEWLINE expr_stmt NEWLINE print_stmt NEWLINE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object f2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    System.out.println("EL PROGRAMA ESTA BIEN");
    Bloque as = ParseResult.getAs(f);
    Bloque a2s = ParseResult.getAs(f2);
    Bloque ap = ParseResult.getAs(p);
    as.instrucciones.addAll(a2s.instrucciones);
    as.instrucciones.addAll(ap.instrucciones);
    Code code = ParserStatus.StackGenerador.peek().crearCodigo("lala","lala",as);
    RESULT = code;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

