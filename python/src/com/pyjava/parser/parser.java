
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jul 12 17:14:07 UYT 2015
//----------------------------------------------------

package com.pyjava.parser;

import com.pyjava.core.exceptions.PyException;
import com.pyjava.core.runtime.*;
import java_cup.runtime.*;
import com.pyjava.parser.codegen.*;
import com.pyjava.core.*;
import java.util.Deque;
import java.util.LinkedList;
import java.util.Scanner;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jul 12 17:14:07 UYT 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\042\003\000\002\002\004\000\002\025" +
    "\003\000\002\025\004\000\002\027\003\000\002\027\004" +
    "\000\002\026\003\000\002\026\004\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\017\003\000\002\020\005\000\002\021\003\000" +
    "\002\021\005\000\002\022\003\000\002\022\005\000\002" +
    "\022\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\006\003\000\002\006\003\000\002\010\003\000" +
    "\002\010\005\000\002\010\005\000\002\010\004\000\002" +
    "\004\005\000\002\007\004\000\002\011\004\000\002\011" +
    "\005\000\002\012\003\000\002\012\004\000\002\012\004" +
    "\000\002\012\005\000\002\013\003\000\002\013\004\000" +
    "\002\014\004\000\002\014\005\000\002\015\003\000\002" +
    "\015\004\000\002\016\005\000\002\023\004\000\002\023" +
    "\005\000\002\024\006\000\002\024\004\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\032\004\000\002\032\004\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\040\003" +
    "\000\002\040\004\000\002\041\003\000\002\041\006\000" +
    "\002\034\007\000\002\034\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\004\015\006\001\002\000\004\002\173\001" +
    "\002\000\004\002\001\001\002\000\034\045\013\047\031" +
    "\050\007\051\023\052\021\053\022\061\015\067\026\100" +
    "\020\105\012\116\016\117\014\120\025\001\002\000\062" +
    "\041\ufffd\054\ufffd\055\ufffd\056\ufffd\060\ufffd\066\ufffd\067" +
    "\ufffd\070\ufffd\071\ufffd\072\ufffd\074\ufffd\075\ufffd\076\ufffd" +
    "\077\ufffd\101\ufffd\102\ufffd\103\ufffd\104\ufffd\106\ufffd\107" +
    "\ufffd\110\ufffd\111\ufffd\112\ufffd\113\ufffd\001\002\000\062" +
    "\041\uffd2\054\uffd2\055\uffd2\056\uffd2\060\uffd2\066\uffd2\067" +
    "\uffd2\070\uffd2\071\uffd2\072\uffd2\074\uffd2\075\uffd2\076\uffd2" +
    "\077\uffd2\101\uffd2\102\uffd2\103\uffd2\104\uffd2\106\uffd2\107" +
    "\uffd2\110\uffd2\111\uffd2\112\uffd2\113\uffd2\001\002\000\062" +
    "\041\ufff0\054\ufff0\055\ufff0\056\ufff0\060\ufff0\066\ufff0\067" +
    "\ufff0\070\ufff0\071\ufff0\072\ufff0\074\ufff0\075\ufff0\076\ufff0" +
    "\077\ufff0\101\ufff0\102\ufff0\103\ufff0\104\ufff0\106\ufff0\107" +
    "\ufff0\110\ufff0\111\ufff0\112\ufff0\113\ufff0\001\002\000\034" +
    "\045\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\061" +
    "\uffd4\067\uffd4\100\uffd4\105\uffd4\116\uffd4\117\uffd4\120\uffd4" +
    "\001\002\000\064\041\ufff1\054\ufff1\055\ufff1\056\ufff1\060" +
    "\ufff1\061\064\066\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1" +
    "\074\ufff1\075\ufff1\076\ufff1\077\ufff1\101\ufff1\102\ufff1\103" +
    "\ufff1\104\ufff1\106\ufff1\107\ufff1\110\ufff1\111\ufff1\112\ufff1" +
    "\113\ufff1\001\002\000\062\041\ufff3\054\ufff3\055\ufff3\056" +
    "\ufff3\060\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3" +
    "\074\ufff3\075\ufff3\076\ufff3\077\ufff3\101\ufff3\102\ufff3\103" +
    "\ufff3\104\ufff3\106\ufff3\107\ufff3\110\ufff3\111\ufff3\112\ufff3" +
    "\113\ufff3\001\002\000\034\045\013\047\031\050\007\051" +
    "\023\052\021\053\022\061\015\067\026\100\020\105\012" +
    "\116\016\117\014\120\025\001\002\000\062\041\ufff4\054" +
    "\ufff4\055\ufff4\056\ufff4\060\ufff4\066\ufff4\067\ufff4\070\ufff4" +
    "\071\ufff4\072\ufff4\074\ufff4\075\ufff4\076\ufff4\077\ufff4\101" +
    "\ufff4\102\ufff4\103\ufff4\104\ufff4\106\ufff4\107\ufff4\110\ufff4" +
    "\111\ufff4\112\ufff4\113\ufff4\001\002\000\062\041\uffef\054" +
    "\uffef\055\uffef\056\uffef\060\uffef\066\uffef\067\uffef\070\uffef" +
    "\071\uffef\072\uffef\074\uffef\075\uffef\076\uffef\077\uffef\101" +
    "\uffef\102\uffef\103\uffef\104\uffef\106\uffef\107\uffef\110\uffef" +
    "\111\uffef\112\uffef\113\uffef\001\002\000\034\045\uffd3\047" +
    "\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\061\uffd3\067\uffd3" +
    "\100\uffd3\105\uffd3\116\uffd3\117\uffd3\120\uffd3\001\002\000" +
    "\062\041\ufff6\054\ufff6\055\ufff6\056\ufff6\060\ufff6\066\ufff6" +
    "\067\ufff6\070\ufff6\071\ufff6\072\ufff6\074\ufff6\075\ufff6\076" +
    "\ufff6\077\ufff6\101\ufff6\102\ufff6\103\ufff6\104\ufff6\106\ufff6" +
    "\107\ufff6\110\ufff6\111\ufff6\112\ufff6\113\ufff6\001\002\000" +
    "\062\041\ufff5\054\ufff5\055\ufff5\056\ufff5\060\ufff5\066\ufff5" +
    "\067\ufff5\070\ufff5\071\ufff5\072\ufff5\074\ufff5\075\ufff5\076" +
    "\ufff5\077\ufff5\101\ufff5\102\ufff5\103\ufff5\104\ufff5\106\ufff5" +
    "\107\ufff5\110\ufff5\111\ufff5\112\ufff5\113\ufff5\001\002\000" +
    "\062\041\ufffb\054\ufffb\055\ufffb\056\ufffb\060\ufffb\066\ufffb" +
    "\067\ufffb\070\ufffb\071\ufffb\072\ufffb\074\ufffb\075\ufffb\076" +
    "\ufffb\077\ufffb\101\ufffb\102\ufffb\103\ufffb\104\ufffb\106\ufffb" +
    "\107\ufffb\110\ufffb\111\ufffb\112\ufffb\113\ufffb\001\002\000" +
    "\054\055\056\056\111\066\040\067\055\070\052\071\053" +
    "\072\046\074\036\075\051\076\042\077\044\101\035\102" +
    "\061\103\037\104\041\106\047\107\057\110\054\111\043" +
    "\112\045\113\060\001\002\000\062\041\ufff2\054\ufff2\055" +
    "\ufff2\056\ufff2\060\ufff2\066\ufff2\067\ufff2\070\ufff2\071\ufff2" +
    "\072\ufff2\074\ufff2\075\ufff2\076\ufff2\077\ufff2\101\ufff2\102" +
    "\ufff2\103\ufff2\104\ufff2\106\ufff2\107\ufff2\110\ufff2\111\ufff2" +
    "\112\ufff2\113\ufff2\001\002\000\010\047\106\050\107\051" +
    "\110\001\002\000\062\041\ufff8\054\ufff8\055\ufff8\056\ufff8" +
    "\060\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8\074" +
    "\ufff8\075\ufff8\076\ufff8\077\ufff8\101\ufff8\102\ufff8\103\ufff8" +
    "\104\ufff8\106\ufff8\107\ufff8\110\ufff8\111\ufff8\112\ufff8\113" +
    "\ufff8\001\002\000\062\041\ufff9\054\ufff9\055\ufff9\056\ufff9" +
    "\060\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9\074" +
    "\ufff9\075\ufff9\076\ufff9\077\ufff9\101\ufff9\102\ufff9\103\ufff9" +
    "\104\ufff9\106\ufff9\107\ufff9\110\ufff9\111\ufff9\112\ufff9\113" +
    "\ufff9\001\002\000\062\041\uffff\054\uffff\055\uffff\056\uffff" +
    "\060\uffff\066\uffff\067\uffff\070\uffff\071\uffff\072\uffff\074" +
    "\uffff\075\uffff\076\uffff\077\uffff\101\uffff\102\uffff\103\uffff" +
    "\104\uffff\106\uffff\107\uffff\110\uffff\111\uffff\112\uffff\113" +
    "\uffff\001\002\000\034\045\013\047\031\050\007\051\023" +
    "\052\021\053\022\061\015\067\026\100\020\105\012\116" +
    "\016\117\014\120\025\001\002\000\062\041\ufff7\054\ufff7" +
    "\055\ufff7\056\ufff7\060\ufff7\066\ufff7\067\ufff7\070\ufff7\071" +
    "\ufff7\072\ufff7\074\ufff7\075\ufff7\076\ufff7\077\ufff7\101\ufff7" +
    "\102\ufff7\103\ufff7\104\ufff7\106\ufff7\107\ufff7\110\ufff7\111" +
    "\ufff7\112\ufff7\113\ufff7\001\002\000\062\041\uffcf\054\uffcf" +
    "\055\056\056\uffcf\060\uffcf\066\040\067\055\070\052\071" +
    "\053\072\046\074\036\075\051\076\042\077\044\101\035" +
    "\102\061\103\037\104\041\106\047\107\057\110\054\111" +
    "\043\112\045\113\060\001\002\000\034\045\uffdc\047\uffdc" +
    "\050\uffdc\051\uffdc\052\uffdc\053\uffdc\061\uffdc\067\uffdc\100" +
    "\uffdc\105\uffdc\116\uffdc\117\uffdc\120\uffdc\001\002\000\034" +
    "\045\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\061" +
    "\uffd6\067\uffd6\100\uffd6\105\uffd6\116\uffd6\117\uffd6\120\uffd6" +
    "\001\002\000\034\045\uffe6\047\uffe6\050\uffe6\051\uffe6\052" +
    "\uffe6\053\uffe6\061\uffe6\067\uffe6\100\uffe6\105\uffe6\116\uffe6" +
    "\117\uffe6\120\uffe6\001\002\000\034\045\uffda\047\uffda\050" +
    "\uffda\051\uffda\052\uffda\053\uffda\061\uffda\067\uffda\100\uffda" +
    "\105\uffda\116\uffda\117\uffda\120\uffda\001\002\000\034\045" +
    "\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\061\uffe7" +
    "\067\uffe7\100\uffe7\105\uffe7\116\uffe7\117\uffe7\120\uffe7\001" +
    "\002\000\034\045\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf" +
    "\053\uffdf\061\uffdf\067\uffdf\100\uffdf\105\uffdf\116\uffdf\117" +
    "\uffdf\120\uffdf\001\002\000\034\045\uffe4\047\uffe4\050\uffe4" +
    "\051\uffe4\052\uffe4\053\uffe4\061\uffe4\067\uffe4\100\uffe4\105" +
    "\uffe4\116\uffe4\117\uffe4\120\uffe4\001\002\000\034\045\uffde" +
    "\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\061\uffde\067" +
    "\uffde\100\uffde\105\uffde\116\uffde\117\uffde\120\uffde\001\002" +
    "\000\034\045\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053" +
    "\uffe3\061\uffe3\067\uffe3\100\uffe3\105\uffe3\116\uffe3\117\uffe3" +
    "\120\uffe3\001\002\000\034\045\uffd5\047\uffd5\050\uffd5\051" +
    "\uffd5\052\uffd5\053\uffd5\061\uffd5\067\uffd5\100\uffd5\105\uffd5" +
    "\116\uffd5\117\uffd5\120\uffd5\001\002\000\034\045\uffe0\047" +
    "\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\061\uffe0\067\uffe0" +
    "\100\uffe0\105\uffe0\116\uffe0\117\uffe0\120\uffe0\001\002\000" +
    "\034\045\013\047\031\050\007\051\023\052\021\053\022" +
    "\061\015\067\026\100\020\105\012\116\016\117\014\120" +
    "\025\001\002\000\034\045\uffdd\047\uffdd\050\uffdd\051\uffdd" +
    "\052\uffdd\053\uffdd\061\uffdd\067\uffdd\100\uffdd\105\uffdd\116" +
    "\uffdd\117\uffdd\120\uffdd\001\002\000\034\045\uffd8\047\uffd8" +
    "\050\uffd8\051\uffd8\052\uffd8\053\uffd8\061\uffd8\067\uffd8\100" +
    "\uffd8\105\uffd8\116\uffd8\117\uffd8\120\uffd8\001\002\000\034" +
    "\045\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\061" +
    "\uffd7\067\uffd7\100\uffd7\105\uffd7\116\uffd7\117\uffd7\120\uffd7" +
    "\001\002\000\034\045\uffe5\047\uffe5\050\uffe5\051\uffe5\052" +
    "\uffe5\053\uffe5\061\uffe5\067\uffe5\100\uffe5\105\uffe5\116\uffe5" +
    "\117\uffe5\120\uffe5\001\002\000\034\045\uffd9\047\uffd9\050" +
    "\uffd9\051\uffd9\052\uffd9\053\uffd9\061\uffd9\067\uffd9\100\uffd9" +
    "\105\uffd9\116\uffd9\117\uffd9\120\uffd9\001\002\000\004\045" +
    "\062\001\002\000\034\045\uffe1\047\uffe1\050\uffe1\051\uffe1" +
    "\052\uffe1\053\uffe1\061\uffe1\067\uffe1\100\uffe1\105\uffe1\116" +
    "\uffe1\117\uffe1\120\uffe1\001\002\000\034\045\uffe2\047\uffe2" +
    "\050\uffe2\051\uffe2\052\uffe2\053\uffe2\061\uffe2\067\uffe2\100" +
    "\uffe2\105\uffe2\116\uffe2\117\uffe2\120\uffe2\001\002\000\034" +
    "\045\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\061" +
    "\uffdb\067\uffdb\100\uffdb\105\uffdb\116\uffdb\117\uffdb\120\uffdb" +
    "\001\002\000\004\061\064\001\002\000\062\041\uffbd\054" +
    "\uffbd\055\uffbd\056\uffbd\060\uffbd\066\uffbd\067\uffbd\070\uffbd" +
    "\071\uffbd\072\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\101" +
    "\uffbd\102\uffbd\103\uffbd\104\uffbd\106\uffbd\107\uffbd\110\uffbd" +
    "\111\uffbd\112\uffbd\113\uffbd\001\002\000\036\045\070\047" +
    "\031\050\007\051\023\052\021\053\022\060\066\061\015" +
    "\067\026\100\020\105\012\116\016\117\014\120\025\001" +
    "\002\000\006\054\102\060\uffec\001\002\000\062\041\uffbf" +
    "\054\uffbf\055\uffbf\056\uffbf\060\uffbf\066\uffbf\067\uffbf\070" +
    "\uffbf\071\uffbf\072\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf" +
    "\101\uffbf\102\uffbf\103\uffbf\104\uffbf\106\uffbf\107\uffbf\110" +
    "\uffbf\111\uffbf\112\uffbf\113\uffbf\001\002\000\004\060\uffe8" +
    "\001\002\000\062\046\100\054\ufff1\055\ufff1\060\ufff1\061" +
    "\064\066\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1\074\ufff1" +
    "\075\ufff1\076\ufff1\077\ufff1\101\ufff1\102\ufff1\103\ufff1\104" +
    "\ufff1\106\ufff1\107\ufff1\110\ufff1\111\ufff1\112\ufff1\113\ufff1" +
    "\001\002\000\006\054\075\060\uffea\001\002\000\056\054" +
    "\uffee\055\056\060\uffee\066\040\067\055\070\052\071\053" +
    "\072\046\074\036\075\051\076\042\077\044\101\035\102" +
    "\061\103\037\104\041\106\047\107\057\110\054\111\043" +
    "\112\045\113\060\001\002\000\004\060\074\001\002\000" +
    "\062\041\uffbe\054\uffbe\055\uffbe\056\uffbe\060\uffbe\066\uffbe" +
    "\067\uffbe\070\uffbe\071\uffbe\072\uffbe\074\uffbe\075\uffbe\076" +
    "\uffbe\077\uffbe\101\uffbe\102\uffbe\103\uffbe\104\uffbe\106\uffbe" +
    "\107\uffbe\110\uffbe\111\uffbe\112\uffbe\113\uffbe\001\002\000" +
    "\034\045\070\047\031\050\007\051\023\052\021\053\022" +
    "\061\015\067\026\100\020\105\012\116\016\117\014\120" +
    "\025\001\002\000\004\060\uffe9\001\002\000\062\041\uffbc" +
    "\054\uffbc\055\uffbc\056\uffbc\060\uffbc\066\uffbc\067\uffbc\070" +
    "\uffbc\071\uffbc\072\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc" +
    "\101\uffbc\102\uffbc\103\uffbc\104\uffbc\106\uffbc\107\uffbc\110" +
    "\uffbc\111\uffbc\112\uffbc\113\uffbc\001\002\000\034\045\013" +
    "\047\031\050\007\051\023\052\021\053\022\061\015\067" +
    "\026\100\020\105\012\116\016\117\014\120\025\001\002" +
    "\000\056\054\uffed\055\056\060\uffed\066\040\067\055\070" +
    "\052\071\053\072\046\074\036\075\051\076\042\077\044" +
    "\101\035\102\061\103\037\104\041\106\047\107\057\110" +
    "\054\111\043\112\045\113\060\001\002\000\004\045\104" +
    "\001\002\000\004\060\uffeb\001\002\000\004\046\100\001" +
    "\002\000\062\041\uffd0\054\uffd0\055\056\056\uffd0\060\uffd0" +
    "\066\040\067\055\070\052\071\053\072\046\074\036\075" +
    "\051\076\042\077\044\101\035\102\061\103\037\104\041" +
    "\106\047\107\057\110\054\111\043\112\045\113\060\001" +
    "\002\000\062\041\ufffe\054\ufffe\055\ufffe\056\ufffe\060\ufffe" +
    "\066\ufffe\067\ufffe\070\ufffe\071\ufffe\072\ufffe\074\ufffe\075" +
    "\ufffe\076\ufffe\077\ufffe\101\ufffe\102\ufffe\103\ufffe\104\ufffe" +
    "\106\ufffe\107\ufffe\110\ufffe\111\ufffe\112\ufffe\113\ufffe\001" +
    "\002\000\062\041\ufffc\054\ufffc\055\ufffc\056\ufffc\060\ufffc" +
    "\066\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc\074\ufffc\075" +
    "\ufffc\076\ufffc\077\ufffc\101\ufffc\102\ufffc\103\ufffc\104\ufffc" +
    "\106\ufffc\107\ufffc\110\ufffc\111\ufffc\112\ufffc\113\ufffc\001" +
    "\002\000\062\041\ufffa\054\ufffa\055\ufffa\056\ufffa\060\ufffa" +
    "\066\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa\074\ufffa\075" +
    "\ufffa\076\ufffa\077\ufffa\101\ufffa\102\ufffa\103\ufffa\104\ufffa" +
    "\106\ufffa\107\ufffa\110\ufffa\111\ufffa\112\ufffa\113\ufffa\001" +
    "\002\000\050\015\006\020\126\027\114\032\122\040\134" +
    "\041\124\045\130\047\031\050\007\051\023\052\021\053" +
    "\022\061\015\067\026\100\020\105\012\116\016\117\014" +
    "\120\025\001\002\000\004\041\uffb0\001\002\000\004\041" +
    "\uffb6\001\002\000\004\041\uffba\001\002\000\004\041\uffaf" +
    "\001\002\000\004\041\uffb9\001\002\000\004\041\170\001" +
    "\002\000\004\041\163\001\002\000\054\041\uffb7\055\056" +
    "\066\040\067\055\070\052\071\053\072\046\074\036\075" +
    "\051\076\042\077\044\101\035\102\061\103\037\104\041" +
    "\106\047\107\057\110\054\111\043\112\045\113\060\001" +
    "\002\000\036\041\uffc6\045\013\047\031\050\007\051\023" +
    "\052\021\053\022\061\015\067\026\100\020\105\012\116" +
    "\016\117\014\120\025\001\002\000\004\041\uffb8\001\002" +
    "\000\004\114\155\001\002\000\004\041\uffb5\001\002\000" +
    "\004\041\uffbb\001\002\000\004\041\uffb1\001\002\000\062" +
    "\041\ufff1\046\uffc2\054\152\055\ufff1\061\064\066\ufff1\067" +
    "\ufff1\070\ufff1\071\ufff1\072\ufff1\074\ufff1\075\ufff1\076\ufff1" +
    "\077\ufff1\101\ufff1\102\ufff1\103\ufff1\104\ufff1\106\ufff1\107" +
    "\ufff1\110\ufff1\111\ufff1\112\ufff1\113\ufff1\001\002\000\004" +
    "\041\uffb2\001\002\000\004\046\140\001\002\000\004\041" +
    "\137\001\002\000\034\045\013\047\031\050\007\051\023" +
    "\052\021\053\022\061\015\067\026\100\020\105\012\116" +
    "\016\117\014\120\025\001\002\000\004\041\uffac\001\002" +
    "\000\054\041\uffcd\055\056\066\040\067\055\070\052\071" +
    "\053\072\046\074\036\075\051\076\042\077\044\101\035" +
    "\102\061\103\037\104\041\106\047\107\057\110\054\111" +
    "\043\112\045\113\060\001\002\000\052\015\uffb4\020\uffb4" +
    "\027\uffb4\032\uffb4\040\uffb4\041\uffb4\045\uffb4\047\uffb4\050" +
    "\uffb4\051\uffb4\052\uffb4\053\uffb4\061\uffb4\067\uffb4\100\uffb4" +
    "\105\uffb4\115\uffb4\116\uffb4\117\uffb4\120\uffb4\001\002\000" +
    "\034\045\013\047\031\050\007\051\023\052\021\053\022" +
    "\061\015\067\026\100\020\105\012\116\016\117\014\120" +
    "\025\001\002\000\056\041\uffca\054\144\055\056\066\040" +
    "\067\055\070\052\071\053\072\046\074\036\075\051\076" +
    "\042\077\044\101\035\102\061\103\037\104\041\106\047" +
    "\107\057\110\054\111\043\112\045\113\060\001\002\000" +
    "\004\041\uffc0\001\002\000\006\041\uffc8\054\150\001\002" +
    "\000\036\041\uffc9\045\013\047\031\050\007\051\023\052" +
    "\021\053\022\061\015\067\026\100\020\105\012\116\016" +
    "\117\014\120\025\001\002\000\056\041\uffcc\054\147\055" +
    "\056\066\040\067\055\070\052\071\053\072\046\074\036" +
    "\075\051\076\042\077\044\101\035\102\061\103\037\104" +
    "\041\106\047\107\057\110\054\111\043\112\045\113\060" +
    "\001\002\000\006\041\uffcb\054\uffcb\001\002\000\034\045" +
    "\013\047\031\050\007\051\023\052\021\053\022\061\015" +
    "\067\026\100\020\105\012\116\016\117\014\120\025\001" +
    "\002\000\004\041\uffc7\001\002\000\004\046\uffc1\001\002" +
    "\000\004\045\153\001\002\000\006\046\uffc4\054\152\001" +
    "\002\000\004\046\uffc3\001\002\000\046\015\006\020\126" +
    "\027\114\032\122\040\134\045\130\047\031\050\007\051" +
    "\023\052\021\053\022\061\015\067\026\100\020\105\012" +
    "\116\016\117\014\120\025\001\002\000\004\115\161\001" +
    "\002\000\050\015\006\020\126\027\114\032\122\040\134" +
    "\045\130\047\031\050\007\051\023\052\021\053\022\061" +
    "\015\067\026\100\020\105\012\115\uffae\116\016\117\014" +
    "\120\025\001\002\000\004\115\uffad\001\002\000\004\041" +
    "\uffab\001\002\000\004\041\uffc5\001\002\000\010\002\uffaa" +
    "\014\164\041\uffaa\001\002\000\004\056\165\001\002\000" +
    "\050\015\006\020\126\027\114\032\122\040\134\041\124" +
    "\045\130\047\031\050\007\051\023\052\021\053\022\061" +
    "\015\067\026\100\020\105\012\116\016\117\014\120\025" +
    "\001\002\000\004\041\167\001\002\000\006\002\uffa9\041" +
    "\uffa9\001\002\000\052\015\uffb3\020\uffb3\027\uffb3\032\uffb3" +
    "\040\uffb3\041\uffb3\045\uffb3\047\uffb3\050\uffb3\051\uffb3\052" +
    "\uffb3\053\uffb3\061\uffb3\067\uffb3\100\uffb3\105\uffb3\115\uffb3" +
    "\116\uffb3\117\uffb3\120\uffb3\001\002\000\054\055\056\060" +
    "\172\066\040\067\055\070\052\071\053\072\046\074\036" +
    "\075\051\076\042\077\044\101\035\102\061\103\037\104" +
    "\041\106\047\107\057\110\054\111\043\112\045\113\060" +
    "\001\002\000\062\041\uffd1\054\uffd1\055\uffd1\056\uffd1\060" +
    "\uffd1\066\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1\074\uffd1" +
    "\075\uffd1\076\uffd1\077\uffd1\101\uffd1\102\uffd1\103\uffd1\104" +
    "\uffd1\106\uffd1\107\uffd1\110\uffd1\111\uffd1\112\uffd1\113\uffd1" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\006\034\004\042\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\002\010\003\007\006\031" +
    "\010\023\024\016\025\027\026\032\027\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\076\001\001\000\002\001\001\000" +
    "\022\002\010\003\007\006\031\010\170\024\016\025\027" +
    "\026\032\027\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\002\010\003\007\006\031\010" +
    "\033\024\016\025\027\026\032\027\026\001\001\000\002" +
    "\001\001\000\004\005\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\002\010\003\007\006\031\010\104\024\016\025" +
    "\027\026\032\027\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\062\001\001\000\002\001" +
    "\001\000\032\002\010\003\007\006\031\010\071\017\070" +
    "\020\064\021\066\022\072\024\016\025\027\026\032\027" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\076\001\001\000\002\001\001\000" +
    "\004\005\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\002\010\003\007\006\031\010\071\017\070\020" +
    "\064\021\066\022\075\024\016\025\027\026\032\027\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\002" +
    "\010\003\007\006\031\010\100\024\016\025\027\026\032" +
    "\027\026\001\001\000\004\005\047\001\001\000\006\020" +
    "\064\021\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\002\010\003\007\006\031" +
    "\007\112\010\120\013\115\015\131\016\122\024\016\025" +
    "\027\026\032\027\026\030\124\031\132\032\134\033\116" +
    "\034\130\035\126\036\111\037\114\041\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\047\001\001\000\024\002\010\003\007" +
    "\006\031\010\140\012\161\024\016\025\027\026\032\027" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\150\023\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\002\010\003\007\006\031\010" +
    "\135\024\016\025\027\026\032\027\026\001\001\000\002" +
    "\001\001\000\004\005\047\001\001\000\002\001\001\000" +
    "\024\002\010\003\007\006\031\010\140\012\141\024\016" +
    "\025\027\026\032\027\026\001\001\000\006\005\047\011" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\002\010\003\007\006\031\010\144\024\016\025\027\026" +
    "\032\027\026\001\001\000\006\005\047\011\145\001\001" +
    "\000\002\001\001\000\022\002\010\003\007\006\031\010" +
    "\144\024\016\025\027\026\032\027\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\153\001\001\000\002\001\001\000\054\002\010\003\007" +
    "\006\031\007\112\010\120\013\115\015\131\016\122\024" +
    "\016\025\027\026\032\027\026\030\124\031\132\032\156" +
    "\033\116\034\130\035\126\036\111\037\114\040\155\001" +
    "\001\000\002\001\001\000\054\002\010\003\007\006\031" +
    "\007\112\010\120\013\115\015\131\016\122\024\016\025" +
    "\027\026\032\027\026\030\124\031\132\032\156\033\116" +
    "\034\130\035\126\036\111\037\114\040\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\002\010\003\007\006" +
    "\031\007\112\010\120\013\115\015\131\016\122\024\016" +
    "\025\027\026\032\027\026\030\124\031\132\032\134\033" +
    "\116\034\130\035\126\036\111\037\114\041\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\047\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    //MANTENGO UN STACK DE GENERADORES Y PUSHEO EL PRIMERO
    ParserStatus.StackGenerador.push(new Generador());

    }





    public void syntax_error(Symbol s){
        System.out.println("Error de sintaxis "+s.sym+" en la linea "+(s.left+1)+" y la columna "+s.right);
        System.out.println(s.value);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error de sintaxis "+s.sym);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // if_stmt ::= IF expression COLON suite NEWLINE ELSE COLON suite NEWLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // if_stmt ::= IF expression COLON suite NEWLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // suite ::= NEWLINE INDENT stmt_list DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("suite",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // suite ::= stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("suite",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // stmt_list ::= stmt stmt_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // stmt_list ::= stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // compound_stmt ::= func_def 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // compound_stmt ::= for_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // compound_stmt ::= while_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // compound_stmt ::= if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // stmt ::= compound_stmt NEWLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // stmt ::= small_stmt NEWLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // small_stmt ::= flow_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // small_stmt ::= print_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // small_stmt ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // small_stmt ::= expr_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // flow_stmt ::= return_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // flow_stmt ::= CONTINUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // flow_stmt ::= BREAK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // func_call ::= NAME trailer 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // func_call ::= expression DOT NAME trailer 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // trailer ::= LPAREN argument_list RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("trailer",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // trailer ::= LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("trailer",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr_stmt ::= namelist ASSIGN testlist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // namelist ::= NAME namecoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("namelist",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // namelist ::= NAME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("namelist",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // namecoma ::= COMA NAME namecoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("namecoma",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // namecoma ::= COMA NAME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("namecoma",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // return_stmt ::= RETURN testlist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // return_stmt ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // testlist ::= expression testcoma COMA 
            {
              Object RESULT =null;
		 System.out.println("TESTLIST 4"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("testlist",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // testlist ::= expression testcoma 
            {
              Object RESULT =null;
		 System.out.println("TESTLIST 3"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("testlist",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // testlist ::= expression COMA 
            {
              Object RESULT =null;
		 System.out.println("TESTLIST 2"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("testlist",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // testlist ::= expression 
            {
              Object RESULT =null;
		 System.out.println("TESTLIST 1"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("testlist",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // testcoma ::= COMA expression testcoma 
            {
              Object RESULT =null;
		 System.out.println("TESTCOMA 2"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("testcoma",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // testcoma ::= COMA expression 
            {
              Object RESULT =null;
		 System.out.println("TESTCOMA 1"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("testcoma",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // print_stmt ::= PRINT expression 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                        /*
                                        int lineNumber = ((LexerToken)p).NumeroFila;
                                        Name name = ParserStatus.StackGenerador.peek().createName(((LexerToken)n).TokenValue);
                                        LinkedList<Instruccion> instrucciones = new LinkedList<>();
                                        instrucciones.add(new Instruccion(lineNumber, OpCode.LOAD_NAME,(name).index));
                                        instrucciones.add(new Instruccion(lineNumber, OpCode.PRINT_ITEM,0));
                                        instrucciones.add(new Instruccion(lineNumber, OpCode.PRINT_NEWLINE,0));
                                        RESULT = ParserStatus.StackGenerador.peek().crearBloque(instrucciones,null,null);
                                        */
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // assignment ::= atom ASSIGN expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int auleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int auright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object au = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            /*int lineNumber = ((LexerToken)au).NumeroFila;
                                            LinkedList<Instruccion> instrucciones = new LinkedList<>();
                                            if(b instanceof Const){
                                                instrucciones.add(new Instruccion(lineNumber, OpCode.LOAD_CONST,((Const)b).index));
                                            }else{
                                                instrucciones.add(new Instruccion(lineNumber, OpCode.LOAD_NAME, ((Name)b).index));
                                            }
                                            instrucciones.add(new Instruccion(lineNumber,OpCode.STORE_NAME,((Name)a).index));
                                            RESULT = ParserStatus.StackGenerador.peek().crearBloque(instrucciones,null,null);
                                            */
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= unary_operator expression 
            {
              Object RESULT =null;
		 System.out.println("EXPRESION UNARIA"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= expression binary_operator expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("EXPRESION binaria"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("EXPRESION PARENTESIS"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= atom 
            {
              Object RESULT =null;
		 System.out.println("ATOMO"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // unary_operator ::= NOTB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // unary_operator ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // binary_operator ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // binary_operator ::= MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // binary_operator ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // binary_operator ::= MULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // binary_operator ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // binary_operator ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // binary_operator ::= SHIFTR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // binary_operator ::= SHIFTL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // binary_operator ::= ANDB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // binary_operator ::= XORB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // binary_operator ::= ORB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // binary_operator ::= EQUALS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // binary_operator ::= DIFF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // binary_operator ::= MAJOREQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // binary_operator ::= MINOREQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // binary_operator ::= MAJOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // binary_operator ::= MINOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // binary_operator ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // binary_operator ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // argument_list ::= named_argument_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // argument_list ::= argument COMA argument_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // argument_list ::= argument 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // named_argument_list ::= named_argument COMA named_argument_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("named_argument_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // named_argument_list ::= named_argument 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("named_argument_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // named_argument ::= NAME ASSIGN expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("named_argument",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // argument ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // atom ::= func_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // atom ::= constant 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = n;*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // atom ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = RuleGenerator.generateName((LexerToken)n);*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constant ::= FALSE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = RuleGenerator.generateConstant((LexerToken)n);*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constant ::= TRUE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = RuleGenerator.generateConstant((LexerToken)n);*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constant ::= NONE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = RuleGenerator.generateConstant((LexerToken)n);*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constant ::= STRING3 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = RuleGenerator.generateConstant((LexerToken)n);*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constant ::= STRING 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = RuleGenerator.generateConstant((LexerToken)n);*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constant ::= float 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = RuleGenerator.generateConstant((LexerToken)n);*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constant ::= long 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = RuleGenerator.generateConstant((LexerToken)n);*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constant ::= integer 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = RuleGenerator.generateConstant((LexerToken)n);*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // float ::= MINUS FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("float",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // float ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("float",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // long ::= MINUS LONG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("long",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // long ::= LONG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("long",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // integer ::= MINUS INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // integer ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= if_stmt 
            {
              Object RESULT =null;
		
    System.out.println("EL PROGRAMA ESTA BIEN");
    /*Bloque b1 = (Bloque)a;
    Bloque b2 = (Bloque)b;
    Bloque bRes = ParserStatus.StackGenerador.peek().crearBloque(b1.instrucciones,null,b2.instrucciones);
    Code code = ParserStatus.StackGenerador.peek().crearCodigo("lala","lala",bRes);
    RESULT = code;*/

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

