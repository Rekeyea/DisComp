
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jul 13 01:03:35 UYT 2015
//----------------------------------------------------

package com.pyjava.parser;

import com.pyjava.core.exceptions.PyException;
import com.pyjava.core.runtime.*;
import java_cup.runtime.*;
import com.pyjava.parser.codegen.*;
import com.pyjava.core.*;
import java.util.Deque;
import java.util.LinkedList;
import java.util.Scanner;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jul 13 01:03:35 UYT 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\050\004\000\002\002\004\000\002\025" +
    "\003\000\002\025\004\000\002\027\003\000\002\027\004" +
    "\000\002\026\003\000\002\026\004\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\042\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\047\004\000\002\047\005\000" +
    "\002\046\003\000\002\046\005\000\002\045\005\000\002" +
    "\045\004\000\002\044\005\000\002\043\003\000\002\043" +
    "\005\000\002\010\003\000\002\010\003\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\004\000\002\010\004\000\002\007" +
    "\004\000\002\011\004\000\002\011\005\000\002\012\003" +
    "\000\002\012\004\000\002\012\004\000\002\012\005\000" +
    "\002\013\003\000\002\013\004\000\002\014\004\000\002" +
    "\014\005\000\002\015\003\000\002\015\004\000\002\016" +
    "\005\000\002\020\005\000\002\021\003\000\002\021\005" +
    "\000\002\022\003\000\002\022\005\000\002\022\003\000" +
    "\002\023\004\000\002\023\005\000\002\024\006\000\002" +
    "\024\004\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\032\004\000\002\032\004\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\040\003\000\002\040\004\000\002\041" +
    "\003\000\002\041\006\000\002\034\007\000\002\034\013" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\004\063\006\001\002\000\004\002\157\001" +
    "\002\000\004\041\156\001\002\000\040\045\013\047\035" +
    "\050\007\051\026\052\024\053\025\061\015\062\017\065" +
    "\021\067\032\100\023\105\012\116\016\117\014\120\031" +
    "\001\002\000\066\054\ufffd\055\ufffd\056\ufffd\060\ufffd\062" +
    "\ufffd\064\ufffd\066\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd" +
    "\073\ufffd\074\ufffd\075\ufffd\076\ufffd\077\ufffd\101\ufffd\102" +
    "\ufffd\103\ufffd\104\ufffd\106\ufffd\107\ufffd\110\ufffd\111\ufffd" +
    "\112\ufffd\113\ufffd\001\002\000\066\054\uffe4\055\uffe4\056" +
    "\uffe4\060\uffe4\062\uffe4\064\uffe4\066\uffe4\067\uffe4\070\uffe4" +
    "\071\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4\076\uffe4\077" +
    "\uffe4\101\uffe4\102\uffe4\103\uffe4\104\uffe4\106\uffe4\107\uffe4" +
    "\110\uffe4\111\uffe4\112\uffe4\113\uffe4\001\002\000\066\054" +
    "\uffef\055\uffef\056\uffef\060\uffef\062\uffef\064\uffef\066\uffef" +
    "\067\uffef\070\uffef\071\uffef\072\uffef\073\uffef\074\uffef\075" +
    "\uffef\076\uffef\077\uffef\101\uffef\102\uffef\103\uffef\104\uffef" +
    "\106\uffef\107\uffef\110\uffef\111\uffef\112\uffef\113\uffef\001" +
    "\002\000\036\045\013\047\035\050\007\051\026\052\024" +
    "\053\025\061\015\065\021\067\032\100\023\105\012\116" +
    "\016\117\014\120\031\001\002\000\070\054\ufff1\055\ufff1" +
    "\056\ufff1\060\ufff1\061\ufff1\062\ufff1\064\ufff1\066\ufff1\067" +
    "\ufff1\070\ufff1\071\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1" +
    "\076\ufff1\077\ufff1\101\ufff1\102\ufff1\103\ufff1\104\ufff1\106" +
    "\ufff1\107\ufff1\110\ufff1\111\ufff1\112\ufff1\113\ufff1\001\002" +
    "\000\066\054\ufff3\055\ufff3\056\ufff3\060\ufff3\062\ufff3\064" +
    "\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3\073\ufff3" +
    "\074\ufff3\075\ufff3\076\ufff3\077\ufff3\101\ufff3\102\ufff3\103" +
    "\ufff3\104\ufff3\106\ufff3\107\ufff3\110\ufff3\111\ufff3\112\ufff3" +
    "\113\ufff3\001\002\000\036\045\013\047\035\050\007\051" +
    "\026\052\024\053\025\061\015\065\021\067\032\100\023" +
    "\105\012\116\016\117\014\120\031\001\002\000\066\054" +
    "\ufff4\055\ufff4\056\ufff4\060\ufff4\062\ufff4\064\ufff4\066\ufff4" +
    "\067\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4\074\ufff4\075" +
    "\ufff4\076\ufff4\077\ufff4\101\ufff4\102\ufff4\103\ufff4\104\ufff4" +
    "\106\ufff4\107\ufff4\110\ufff4\111\ufff4\112\ufff4\113\ufff4\001" +
    "\002\000\004\041\uffed\001\002\000\066\054\uffee\055\uffee" +
    "\056\uffee\060\uffee\062\uffee\064\uffee\066\uffee\067\uffee\070" +
    "\uffee\071\uffee\072\uffee\073\uffee\074\uffee\075\uffee\076\uffee" +
    "\077\uffee\101\uffee\102\uffee\103\uffee\104\uffee\106\uffee\107" +
    "\uffee\110\uffee\111\uffee\112\uffee\113\uffee\001\002\000\040" +
    "\045\013\047\035\050\007\051\026\052\024\053\025\061" +
    "\015\064\142\065\021\067\032\100\023\105\012\116\016" +
    "\117\014\120\031\001\002\000\066\054\uffe3\055\uffe3\056" +
    "\uffe3\060\uffe3\062\uffe3\064\uffe3\066\uffe3\067\uffe3\070\uffe3" +
    "\071\uffe3\072\uffe3\073\uffe3\074\uffe3\075\uffe3\076\uffe3\077" +
    "\uffe3\101\uffe3\102\uffe3\103\uffe3\104\uffe3\106\uffe3\107\uffe3" +
    "\110\uffe3\111\uffe3\112\uffe3\113\uffe3\001\002\000\036\045" +
    "\013\047\035\050\007\051\026\052\024\053\025\061\015" +
    "\065\021\067\032\100\023\105\012\116\016\117\014\120" +
    "\031\001\002\000\066\054\ufff6\055\ufff6\056\ufff6\060\ufff6" +
    "\062\ufff6\064\ufff6\066\ufff6\067\ufff6\070\ufff6\071\ufff6\072" +
    "\ufff6\073\ufff6\074\ufff6\075\ufff6\076\ufff6\077\ufff6\101\ufff6" +
    "\102\ufff6\103\ufff6\104\ufff6\106\ufff6\107\ufff6\110\ufff6\111" +
    "\ufff6\112\ufff6\113\ufff6\001\002\000\066\054\ufff5\055\ufff5" +
    "\056\ufff5\060\ufff5\062\ufff5\064\ufff5\066\ufff5\067\ufff5\070" +
    "\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5" +
    "\077\ufff5\101\ufff5\102\ufff5\103\ufff5\104\ufff5\106\ufff5\107" +
    "\ufff5\110\ufff5\111\ufff5\112\ufff5\113\ufff5\001\002\000\066" +
    "\054\ufffb\055\ufffb\056\ufffb\060\ufffb\062\ufffb\064\ufffb\066" +
    "\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb\073\ufffb\074\ufffb" +
    "\075\ufffb\076\ufffb\077\ufffb\101\ufffb\102\ufffb\103\ufffb\104" +
    "\ufffb\106\ufffb\107\ufffb\110\ufffb\111\ufffb\112\ufffb\113\ufffb" +
    "\001\002\000\060\054\137\055\073\062\uffeb\066\054\067" +
    "\072\070\066\071\070\072\063\073\061\074\051\075\067" +
    "\076\056\077\060\101\052\102\076\103\053\104\055\106" +
    "\064\107\074\110\071\111\057\112\062\113\075\001\002" +
    "\000\004\062\136\001\002\000\066\054\ufff2\055\ufff2\056" +
    "\ufff2\060\ufff2\062\ufff2\064\ufff2\066\ufff2\067\ufff2\070\ufff2" +
    "\071\ufff2\072\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2\077" +
    "\ufff2\101\ufff2\102\ufff2\103\ufff2\104\ufff2\106\ufff2\107\ufff2" +
    "\110\ufff2\111\ufff2\112\ufff2\113\ufff2\001\002\000\010\047" +
    "\133\050\134\051\135\001\002\000\066\054\ufff8\055\ufff8" +
    "\056\ufff8\060\ufff8\062\ufff8\064\ufff8\066\ufff8\067\ufff8\070" +
    "\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075\ufff8\076\ufff8" +
    "\077\ufff8\101\ufff8\102\ufff8\103\ufff8\104\ufff8\106\ufff8\107" +
    "\ufff8\110\ufff8\111\ufff8\112\ufff8\113\ufff8\001\002\000\066" +
    "\054\ufff9\055\ufff9\056\ufff9\060\ufff9\062\ufff9\064\ufff9\066" +
    "\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9\073\ufff9\074\ufff9" +
    "\075\ufff9\076\ufff9\077\ufff9\101\ufff9\102\ufff9\103\ufff9\104" +
    "\ufff9\106\ufff9\107\ufff9\110\ufff9\111\ufff9\112\ufff9\113\ufff9" +
    "\001\002\000\066\054\uffff\055\uffff\056\uffff\060\uffff\062" +
    "\uffff\064\uffff\066\uffff\067\uffff\070\uffff\071\uffff\072\uffff" +
    "\073\uffff\074\uffff\075\uffff\076\uffff\077\uffff\101\uffff\102" +
    "\uffff\103\uffff\104\uffff\106\uffff\107\uffff\110\uffff\111\uffff" +
    "\112\uffff\113\uffff\001\002\000\066\054\ufff7\055\ufff7\056" +
    "\ufff7\060\ufff7\062\ufff7\064\ufff7\066\ufff7\067\ufff7\070\ufff7" +
    "\071\ufff7\072\ufff7\073\ufff7\074\ufff7\075\ufff7\076\ufff7\077" +
    "\ufff7\101\ufff7\102\ufff7\103\ufff7\104\ufff7\106\ufff7\107\ufff7" +
    "\110\ufff7\111\ufff7\112\ufff7\113\ufff7\001\002\000\070\054" +
    "\ufff0\055\ufff0\056\ufff0\060\ufff0\061\041\062\ufff0\064\ufff0" +
    "\066\ufff0\067\ufff0\070\ufff0\071\ufff0\072\ufff0\073\ufff0\074" +
    "\ufff0\075\ufff0\076\ufff0\077\ufff0\101\ufff0\102\ufff0\103\ufff0" +
    "\104\ufff0\106\ufff0\107\ufff0\110\ufff0\111\ufff0\112\ufff0\113" +
    "\ufff0\001\002\000\066\054\uffb4\055\uffb4\056\uffb4\060\uffb4" +
    "\062\uffb4\064\uffb4\066\uffb4\067\uffb4\070\uffb4\071\uffb4\072" +
    "\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4\077\uffb4\101\uffb4" +
    "\102\uffb4\103\uffb4\104\uffb4\106\uffb4\107\uffb4\110\uffb4\111" +
    "\uffb4\112\uffb4\113\uffb4\001\002\000\040\045\045\047\035" +
    "\050\007\051\026\052\024\053\025\060\043\061\015\065" +
    "\021\067\032\100\023\105\012\116\016\117\014\120\031" +
    "\001\002\000\006\054\130\060\uffbc\001\002\000\066\054" +
    "\uffb7\055\uffb7\056\uffb7\060\uffb7\062\uffb7\064\uffb7\066\uffb7" +
    "\067\uffb7\070\uffb7\071\uffb7\072\uffb7\073\uffb7\074\uffb7\075" +
    "\uffb7\076\uffb7\077\uffb7\101\uffb7\102\uffb7\103\uffb7\104\uffb7" +
    "\106\uffb7\107\uffb7\110\uffb7\111\uffb7\112\uffb7\113\uffb7\001" +
    "\002\000\004\060\uffb8\001\002\000\064\046\126\054\ufff1" +
    "\055\ufff1\060\ufff1\061\ufff1\066\ufff1\067\ufff1\070\ufff1\071" +
    "\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1\076\ufff1\077\ufff1" +
    "\101\ufff1\102\ufff1\103\ufff1\104\ufff1\106\ufff1\107\ufff1\110" +
    "\ufff1\111\ufff1\112\ufff1\113\ufff1\001\002\000\060\054\065" +
    "\055\073\060\uffba\066\054\067\072\070\066\071\070\072" +
    "\063\073\061\074\051\075\067\076\056\077\060\101\052" +
    "\102\076\103\053\104\055\106\064\107\074\110\071\111" +
    "\057\112\062\113\075\001\002\000\004\060\050\001\002" +
    "\000\066\054\uffb6\055\uffb6\056\uffb6\060\uffb6\062\uffb6\064" +
    "\uffb6\066\uffb6\067\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6" +
    "\074\uffb6\075\uffb6\076\uffb6\077\uffb6\101\uffb6\102\uffb6\103" +
    "\uffb6\104\uffb6\106\uffb6\107\uffb6\110\uffb6\111\uffb6\112\uffb6" +
    "\113\uffb6\001\002\000\036\045\013\047\035\050\007\051" +
    "\026\052\024\053\025\061\015\065\021\067\032\100\023" +
    "\105\012\116\016\117\014\120\031\001\002\000\036\045" +
    "\013\047\035\050\007\051\026\052\024\053\025\061\015" +
    "\065\021\067\032\100\023\105\012\116\016\117\014\120" +
    "\031\001\002\000\036\045\013\047\035\050\007\051\026" +
    "\052\024\053\025\061\015\065\021\067\032\100\023\105" +
    "\012\116\016\117\014\120\031\001\002\000\036\045\013" +
    "\047\035\050\007\051\026\052\024\053\025\061\015\065" +
    "\021\067\032\100\023\105\012\116\016\117\014\120\031" +
    "\001\002\000\036\045\013\047\035\050\007\051\026\052" +
    "\024\053\025\061\015\065\021\067\032\100\023\105\012" +
    "\116\016\117\014\120\031\001\002\000\036\045\013\047" +
    "\035\050\007\051\026\052\024\053\025\061\015\065\021" +
    "\067\032\100\023\105\012\116\016\117\014\120\031\001" +
    "\002\000\036\045\013\047\035\050\007\051\026\052\024" +
    "\053\025\061\015\065\021\067\032\100\023\105\012\116" +
    "\016\117\014\120\031\001\002\000\036\045\013\047\035" +
    "\050\007\051\026\052\024\053\025\061\015\065\021\067" +
    "\032\100\023\105\012\116\016\117\014\120\031\001\002" +
    "\000\036\045\013\047\035\050\007\051\026\052\024\053" +
    "\025\061\015\065\021\067\032\100\023\105\012\116\016" +
    "\117\014\120\031\001\002\000\036\045\013\047\035\050" +
    "\007\051\026\052\024\053\025\061\015\065\021\067\032" +
    "\100\023\105\012\116\016\117\014\120\031\001\002\000" +
    "\036\045\013\047\035\050\007\051\026\052\024\053\025" +
    "\061\015\065\021\067\032\100\023\105\012\116\016\117" +
    "\014\120\031\001\002\000\036\045\013\047\035\050\007" +
    "\051\026\052\024\053\025\061\015\065\021\067\032\100" +
    "\023\105\012\116\016\117\014\120\031\001\002\000\036" +
    "\045\045\047\035\050\007\051\026\052\024\053\025\061" +
    "\015\065\021\067\032\100\023\105\012\116\016\117\014" +
    "\120\031\001\002\000\036\045\013\047\035\050\007\051" +
    "\026\052\024\053\025\061\015\065\021\067\032\100\023" +
    "\105\012\116\016\117\014\120\031\001\002\000\036\045" +
    "\013\047\035\050\007\051\026\052\024\053\025\061\015" +
    "\065\021\067\032\100\023\105\012\116\016\117\014\120" +
    "\031\001\002\000\036\045\013\047\035\050\007\051\026" +
    "\052\024\053\025\061\015\065\021\067\032\100\023\105" +
    "\012\116\016\117\014\120\031\001\002\000\036\045\013" +
    "\047\035\050\007\051\026\052\024\053\025\061\015\065" +
    "\021\067\032\100\023\105\012\116\016\117\014\120\031" +
    "\001\002\000\036\045\013\047\035\050\007\051\026\052" +
    "\024\053\025\061\015\065\021\067\032\100\023\105\012" +
    "\116\016\117\014\120\031\001\002\000\004\045\102\001" +
    "\002\000\036\045\013\047\035\050\007\051\026\052\024" +
    "\053\025\061\015\065\021\067\032\100\023\105\012\116" +
    "\016\117\014\120\031\001\002\000\036\045\013\047\035" +
    "\050\007\051\026\052\024\053\025\061\015\065\021\067" +
    "\032\100\023\105\012\116\016\117\014\120\031\001\002" +
    "\000\036\045\013\047\035\050\007\051\026\052\024\053" +
    "\025\061\015\065\021\067\032\100\023\105\012\116\016" +
    "\117\014\120\031\001\002\000\066\054\uffd5\055\073\056" +
    "\uffd5\060\uffd5\062\uffd5\064\uffd5\066\054\067\072\070\066" +
    "\071\070\072\063\073\061\074\051\075\uffd5\076\uffd5\077" +
    "\uffd5\101\uffd5\102\uffd5\103\uffd5\104\uffd5\106\uffd5\107\uffd5" +
    "\110\uffd5\111\uffd5\112\uffd5\113\uffd5\001\002\000\066\054" +
    "\uffdc\055\073\056\uffdc\060\uffdc\062\uffdc\064\uffdc\066\054" +
    "\067\072\070\066\071\070\072\063\073\061\074\051\075" +
    "\067\076\056\077\060\101\052\102\076\103\uffdc\104\uffdc" +
    "\106\uffdc\107\uffdc\110\uffdc\111\uffdc\112\uffdc\113\uffdc\001" +
    "\002\000\066\054\uffdb\055\073\056\uffdb\060\uffdb\062\uffdb" +
    "\064\uffdb\066\054\067\072\070\066\071\070\072\063\073" +
    "\061\074\051\075\067\076\056\077\060\101\052\102\076" +
    "\103\uffdb\104\uffdb\106\uffdb\107\uffdb\110\uffdb\111\uffdb\112" +
    "\uffdb\113\uffdb\001\002\000\004\061\041\001\002\000\066" +
    "\054\uffb5\055\uffb5\056\uffb5\060\uffb5\062\uffb5\064\uffb5\066" +
    "\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5" +
    "\075\uffb5\076\uffb5\077\uffb5\101\uffb5\102\uffb5\103\uffb5\104" +
    "\uffb5\106\uffb5\107\uffb5\110\uffb5\111\uffb5\112\uffb5\113\uffb5" +
    "\001\002\000\066\054\uffd3\055\073\056\uffd3\060\uffd3\062" +
    "\uffd3\064\uffd3\066\uffd3\067\uffd3\070\066\071\070\072\063" +
    "\073\061\074\051\075\uffd3\076\uffd3\077\uffd3\101\uffd3\102" +
    "\uffd3\103\uffd3\104\uffd3\106\uffd3\107\uffd3\110\uffd3\111\uffd3" +
    "\112\uffd3\113\uffd3\001\002\000\066\054\uffdf\055\073\056" +
    "\uffdf\060\uffdf\062\uffdf\064\uffdf\066\054\067\072\070\066" +
    "\071\070\072\063\073\061\074\051\075\067\076\056\077" +
    "\060\101\052\102\076\103\uffdf\104\uffdf\106\uffdf\107\uffdf" +
    "\110\uffdf\111\uffdf\112\uffdf\113\uffdf\001\002\000\066\054" +
    "\uffd1\055\073\056\uffd1\060\uffd1\062\uffd1\064\uffd1\066\uffd1" +
    "\067\uffd1\070\uffd1\071\uffd1\072\063\073\uffd1\074\uffd1\075" +
    "\uffd1\076\uffd1\077\uffd1\101\uffd1\102\uffd1\103\uffd1\104\uffd1" +
    "\106\uffd1\107\uffd1\110\uffd1\111\uffd1\112\uffd1\113\uffd1\001" +
    "\002\000\066\054\uffd7\055\073\056\uffd7\060\uffd7\062\uffd7" +
    "\064\uffd7\066\054\067\072\070\066\071\070\072\063\073" +
    "\061\074\051\075\uffd7\076\uffd7\077\uffd7\101\052\102\076" +
    "\103\uffd7\104\uffd7\106\uffd7\107\uffd7\110\uffd7\111\uffd7\112" +
    "\uffd7\113\uffd7\001\002\000\066\054\uffd2\055\073\056\uffd2" +
    "\060\uffd2\062\uffd2\064\uffd2\066\uffd2\067\uffd2\070\uffd2\071" +
    "\uffd2\072\063\073\uffd2\074\uffd2\075\uffd2\076\uffd2\077\uffd2" +
    "\101\uffd2\102\uffd2\103\uffd2\104\uffd2\106\uffd2\107\uffd2\110" +
    "\uffd2\111\uffd2\112\uffd2\113\uffd2\001\002\000\004\060\uffb9" +
    "\001\002\000\066\054\uffda\055\073\056\uffda\060\uffda\062" +
    "\uffda\064\uffda\066\054\067\072\070\066\071\070\072\063" +
    "\073\061\074\051\075\067\076\056\077\060\101\052\102" +
    "\076\103\uffda\104\uffda\106\uffda\107\uffda\110\uffda\111\uffda" +
    "\112\uffda\113\uffda\001\002\000\066\054\uffce\055\073\056" +
    "\uffce\060\uffce\062\uffce\064\uffce\066\uffce\067\uffce\070\uffce" +
    "\071\uffce\072\063\073\uffce\074\uffce\075\uffce\076\uffce\077" +
    "\uffce\101\uffce\102\uffce\103\uffce\104\uffce\106\uffce\107\uffce" +
    "\110\uffce\111\uffce\112\uffce\113\uffce\001\002\000\066\054" +
    "\uffdd\055\073\056\uffdd\060\uffdd\062\uffdd\064\uffdd\066\054" +
    "\067\072\070\066\071\070\072\063\073\061\074\051\075" +
    "\067\076\056\077\060\101\052\102\076\103\uffdd\104\uffdd" +
    "\106\uffdd\107\uffdd\110\uffdd\111\uffdd\112\uffdd\113\uffdd\001" +
    "\002\000\066\054\uffcf\055\073\056\uffcf\060\uffcf\062\uffcf" +
    "\064\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf\072\063\073" +
    "\uffcf\074\uffcf\075\uffcf\076\uffcf\077\uffcf\101\uffcf\102\uffcf" +
    "\103\uffcf\104\uffcf\106\uffcf\107\uffcf\110\uffcf\111\uffcf\112" +
    "\uffcf\113\uffcf\001\002\000\066\054\uffd8\055\073\056\uffd8" +
    "\060\uffd8\062\uffd8\064\uffd8\066\054\067\072\070\066\071" +
    "\070\072\063\073\061\074\051\075\067\076\uffd8\077\uffd8" +
    "\101\052\102\076\103\uffd8\104\uffd8\106\uffd8\107\uffd8\110" +
    "\uffd8\111\uffd8\112\uffd8\113\uffd8\001\002\000\066\054\uffde" +
    "\055\073\056\uffde\060\uffde\062\uffde\064\uffde\066\054\067" +
    "\072\070\066\071\070\072\063\073\061\074\051\075\067" +
    "\076\056\077\060\101\052\102\076\103\uffde\104\uffde\106" +
    "\uffde\107\uffde\110\uffde\111\uffde\112\uffde\113\uffde\001\002" +
    "\000\066\054\uffd9\055\073\056\uffd9\060\uffd9\062\uffd9\064" +
    "\uffd9\066\054\067\072\070\066\071\070\072\063\073\061" +
    "\074\051\075\067\076\uffd9\077\060\101\052\102\076\103" +
    "\uffd9\104\uffd9\106\uffd9\107\uffd9\110\uffd9\111\uffd9\112\uffd9" +
    "\113\uffd9\001\002\000\066\054\uffe1\055\073\056\uffe1\060" +
    "\uffe1\062\uffe1\064\uffe1\066\054\067\072\070\066\071\070" +
    "\072\063\073\061\074\051\075\067\076\056\077\060\101" +
    "\052\102\076\103\053\104\uffe1\106\064\107\074\110\071" +
    "\111\057\112\062\113\075\001\002\000\066\054\uffd4\055" +
    "\073\056\uffd4\060\uffd4\062\uffd4\064\uffd4\066\uffd4\067\uffd4" +
    "\070\066\071\070\072\063\073\061\074\051\075\uffd4\076" +
    "\uffd4\077\uffd4\101\uffd4\102\uffd4\103\uffd4\104\uffd4\106\uffd4" +
    "\107\uffd4\110\uffd4\111\uffd4\112\uffd4\113\uffd4\001\002\000" +
    "\066\054\uffe0\055\073\056\uffe0\060\uffe0\062\uffe0\064\uffe0" +
    "\066\054\067\072\070\066\071\070\072\063\073\061\074" +
    "\051\075\067\076\056\077\060\101\052\102\076\103\uffe0" +
    "\104\uffe0\106\064\107\074\110\071\111\057\112\062\113" +
    "\075\001\002\000\066\054\uffd6\055\073\056\uffd6\060\uffd6" +
    "\062\uffd6\064\uffd6\066\054\067\072\070\066\071\070\072" +
    "\063\073\061\074\051\075\uffd6\076\uffd6\077\uffd6\101\uffd6" +
    "\102\uffd6\103\uffd6\104\uffd6\106\uffd6\107\uffd6\110\uffd6\111" +
    "\uffd6\112\uffd6\113\uffd6\001\002\000\066\054\uffd0\055\073" +
    "\056\uffd0\060\uffd0\062\uffd0\064\uffd0\066\uffd0\067\uffd0\070" +
    "\uffd0\071\uffd0\072\063\073\uffd0\074\uffd0\075\uffd0\076\uffd0" +
    "\077\uffd0\101\uffd0\102\uffd0\103\uffd0\104\uffd0\106\uffd0\107" +
    "\uffd0\110\uffd0\111\uffd0\112\uffd0\113\uffd0\001\002\000\036" +
    "\045\013\047\035\050\007\051\026\052\024\053\025\061" +
    "\015\065\021\067\032\100\023\105\012\116\016\117\014" +
    "\120\031\001\002\000\060\054\uffbd\055\073\060\uffbd\066" +
    "\054\067\072\070\066\071\070\072\063\073\061\074\051" +
    "\075\067\076\056\077\060\101\052\102\076\103\053\104" +
    "\055\106\064\107\074\110\071\111\057\112\062\113\075" +
    "\001\002\000\004\045\132\001\002\000\004\060\uffbb\001" +
    "\002\000\004\046\126\001\002\000\066\054\ufffe\055\ufffe" +
    "\056\ufffe\060\ufffe\062\ufffe\064\ufffe\066\ufffe\067\ufffe\070" +
    "\ufffe\071\ufffe\072\ufffe\073\ufffe\074\ufffe\075\ufffe\076\ufffe" +
    "\077\ufffe\101\ufffe\102\ufffe\103\ufffe\104\ufffe\106\ufffe\107" +
    "\ufffe\110\ufffe\111\ufffe\112\ufffe\113\ufffe\001\002\000\066" +
    "\054\ufffc\055\ufffc\056\ufffc\060\ufffc\062\ufffc\064\ufffc\066" +
    "\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc\073\ufffc\074\ufffc" +
    "\075\ufffc\076\ufffc\077\ufffc\101\ufffc\102\ufffc\103\ufffc\104" +
    "\ufffc\106\ufffc\107\ufffc\110\ufffc\111\ufffc\112\ufffc\113\ufffc" +
    "\001\002\000\066\054\ufffa\055\ufffa\056\ufffa\060\ufffa\062" +
    "\ufffa\064\ufffa\066\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa" +
    "\073\ufffa\074\ufffa\075\ufffa\076\ufffa\077\ufffa\101\ufffa\102" +
    "\ufffa\103\ufffa\104\ufffa\106\ufffa\107\ufffa\110\ufffa\111\ufffa" +
    "\112\ufffa\113\ufffa\001\002\000\004\041\uffec\001\002\000" +
    "\036\045\013\047\035\050\007\051\026\052\024\053\025" +
    "\061\015\065\021\067\032\100\023\105\012\116\016\117" +
    "\014\120\031\001\002\000\004\062\uffea\001\002\000\066" +
    "\054\uffcc\055\073\056\uffcc\060\uffcc\062\uffcc\064\uffcc\066" +
    "\uffcc\067\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc\074\uffcc" +
    "\075\uffcc\076\uffcc\077\uffcc\101\uffcc\102\uffcc\103\uffcc\104" +
    "\uffcc\106\uffcc\107\uffcc\110\uffcc\111\uffcc\112\uffcc\113\uffcc" +
    "\001\002\000\066\054\uffe8\055\uffe8\056\uffe8\060\uffe8\062" +
    "\uffe8\064\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8" +
    "\073\uffe8\074\uffe8\075\uffe8\076\uffe8\077\uffe8\101\uffe8\102" +
    "\uffe8\103\uffe8\104\uffe8\106\uffe8\107\uffe8\110\uffe8\111\uffe8" +
    "\112\uffe8\113\uffe8\001\002\000\004\064\152\001\002\000" +
    "\006\054\150\064\uffe6\001\002\000\056\055\073\056\146" +
    "\066\054\067\072\070\066\071\070\072\063\073\061\074" +
    "\051\075\067\076\056\077\060\101\052\102\076\103\053" +
    "\104\055\106\064\107\074\110\071\111\057\112\062\113" +
    "\075\001\002\000\036\045\013\047\035\050\007\051\026" +
    "\052\024\053\025\061\015\065\021\067\032\100\023\105" +
    "\012\116\016\117\014\120\031\001\002\000\060\054\uffe7" +
    "\055\073\064\uffe7\066\054\067\072\070\066\071\070\072" +
    "\063\073\061\074\051\075\067\076\056\077\060\101\052" +
    "\102\076\103\053\104\055\106\064\107\074\110\071\111" +
    "\057\112\062\113\075\001\002\000\036\045\013\047\035" +
    "\050\007\051\026\052\024\053\025\061\015\065\021\067" +
    "\032\100\023\105\012\116\016\117\014\120\031\001\002" +
    "\000\004\064\uffe5\001\002\000\066\054\uffe9\055\uffe9\056" +
    "\uffe9\060\uffe9\062\uffe9\064\uffe9\066\uffe9\067\uffe9\070\uffe9" +
    "\071\uffe9\072\uffe9\073\uffe9\074\uffe9\075\uffe9\076\uffe9\077" +
    "\uffe9\101\uffe9\102\uffe9\103\uffe9\104\uffe9\106\uffe9\107\uffe9" +
    "\110\uffe9\111\uffe9\112\uffe9\113\uffe9\001\002\000\056\055" +
    "\073\060\154\066\054\067\072\070\066\071\070\072\063" +
    "\073\061\074\051\075\067\076\056\077\060\101\052\102" +
    "\076\103\053\104\055\106\064\107\074\110\071\111\057" +
    "\112\062\113\075\001\002\000\066\054\uffe2\055\uffe2\056" +
    "\uffe2\060\uffe2\062\uffe2\064\uffe2\066\uffe2\067\uffe2\070\uffe2" +
    "\071\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2\077" +
    "\uffe2\101\uffe2\102\uffe2\103\uffe2\104\uffe2\106\uffe2\107\uffe2" +
    "\110\uffe2\111\uffe2\112\uffe2\113\uffe2\001\002\000\066\054" +
    "\uffcd\055\073\056\uffcd\060\uffcd\062\uffcd\064\uffcd\066\054" +
    "\067\072\070\066\071\070\072\063\073\061\074\051\075" +
    "\067\076\056\077\060\101\052\102\076\103\uffcd\104\uffcd" +
    "\106\064\107\074\110\071\111\057\112\062\113\075\001" +
    "\002\000\004\002\001\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\006\047\004\050\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\002\010\003\007\010\026" +
    "\024\021\025\033\026\035\027\032\042\036\045\017\046" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\002\010\003\007\010\154\024\021\025" +
    "\033\026\035\027\032\042\036\045\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\002\010\003\007\010" +
    "\152\024\021\025\033\026\035\027\032\042\036\045\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\002\010\003\007\010\144\024\021\025\033" +
    "\026\035\027\032\042\036\043\142\044\143\045\017\001" +
    "\001\000\002\001\001\000\024\002\010\003\007\010\140" +
    "\024\021\025\033\026\035\027\032\042\036\045\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\037\001\001\000" +
    "\002\001\001\000\032\002\010\003\007\010\045\020\041" +
    "\021\043\022\046\024\021\025\033\026\035\027\032\042" +
    "\036\045\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\002\010\003\007" +
    "\010\124\024\021\025\033\026\035\027\032\042\036\045" +
    "\017\001\001\000\024\002\010\003\007\010\123\024\021" +
    "\025\033\026\035\027\032\042\036\045\017\001\001\000" +
    "\024\002\010\003\007\010\122\024\021\025\033\026\035" +
    "\027\032\042\036\045\017\001\001\000\024\002\010\003" +
    "\007\010\121\024\021\025\033\026\035\027\032\042\036" +
    "\045\017\001\001\000\024\002\010\003\007\010\120\024" +
    "\021\025\033\026\035\027\032\042\036\045\017\001\001" +
    "\000\024\002\010\003\007\010\117\024\021\025\033\026" +
    "\035\027\032\042\036\045\017\001\001\000\024\002\010" +
    "\003\007\010\116\024\021\025\033\026\035\027\032\042" +
    "\036\045\017\001\001\000\024\002\010\003\007\010\115" +
    "\024\021\025\033\026\035\027\032\042\036\045\017\001" +
    "\001\000\024\002\010\003\007\010\114\024\021\025\033" +
    "\026\035\027\032\042\036\045\017\001\001\000\024\002" +
    "\010\003\007\010\113\024\021\025\033\026\035\027\032" +
    "\042\036\045\017\001\001\000\024\002\010\003\007\010" +
    "\112\024\021\025\033\026\035\027\032\042\036\045\017" +
    "\001\001\000\024\002\010\003\007\010\111\024\021\025" +
    "\033\026\035\027\032\042\036\045\017\001\001\000\032" +
    "\002\010\003\007\010\045\020\041\021\043\022\110\024" +
    "\021\025\033\026\035\027\032\042\036\045\017\001\001" +
    "\000\024\002\010\003\007\010\107\024\021\025\033\026" +
    "\035\027\032\042\036\045\017\001\001\000\024\002\010" +
    "\003\007\010\106\024\021\025\033\026\035\027\032\042" +
    "\036\045\017\001\001\000\024\002\010\003\007\010\105" +
    "\024\021\025\033\026\035\027\032\042\036\045\017\001" +
    "\001\000\024\002\010\003\007\010\104\024\021\025\033" +
    "\026\035\027\032\042\036\045\017\001\001\000\024\002" +
    "\010\003\007\010\103\024\021\025\033\026\035\027\032" +
    "\042\036\045\017\001\001\000\002\001\001\000\024\002" +
    "\010\003\007\010\100\024\021\025\033\026\035\027\032" +
    "\042\036\045\017\001\001\000\024\002\010\003\007\010" +
    "\077\024\021\025\033\026\035\027\032\042\036\045\017" +
    "\001\001\000\024\002\010\003\007\010\076\024\021\025" +
    "\033\026\035\027\032\042\036\045\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\002\010\003\007\010\126\024\021\025\033" +
    "\026\035\027\032\042\036\045\017\001\001\000\002\001" +
    "\001\000\006\020\041\021\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\002\010\003\007" +
    "\010\026\024\021\025\033\026\035\027\032\042\036\045" +
    "\017\046\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\002\010\003\007\010\146\024\021" +
    "\025\033\026\035\027\032\042\036\045\017\001\001\000" +
    "\002\001\001\000\026\002\010\003\007\010\144\024\021" +
    "\025\033\026\035\027\032\042\036\044\150\045\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    //MANTENGO UN STACK DE GENERADORES Y PUSHEO EL PRIMERO
    ParserStatus.StackGenerador.push(new Generador());

    }





    public void syntax_error(Symbol s){
        System.out.println("Error de sintaxis "+s.sym+" en la linea "+(s.left+1)+" y la columna "+s.right);
        System.out.println(s.value);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error de sintaxis "+s.sym);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // if_stmt ::= IF expression COLON suite NEWLINE ELSE COLON suite NEWLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // if_stmt ::= IF expression COLON suite NEWLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // suite ::= NEWLINE INDENT stmt_list DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("suite",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // suite ::= stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("suite",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // stmt_list ::= stmt stmt_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // stmt_list ::= stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // compound_stmt ::= func_def 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // compound_stmt ::= for_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // compound_stmt ::= while_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // compound_stmt ::= if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // stmt ::= compound_stmt NEWLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // stmt ::= small_stmt NEWLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // small_stmt ::= flow_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // small_stmt ::= print_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // small_stmt ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // small_stmt ::= expr_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // flow_stmt ::= return_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // flow_stmt ::= CONTINUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // flow_stmt ::= BREAK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // func_call ::= name trailer 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateFunctionCall(n,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // func_call ::= expression DOT NAME trailer 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // trailer ::= LPAREN argument_list RPAREN 
            {
              Object RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = al; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trailer",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // trailer ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trailer",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // argument_list ::= named_argument_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // argument_list ::= expression COMA argument_list 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateArguments(c,e,al); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // argument_list ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateArguments(null,e,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // named_argument_list ::= named_argument COMA named_argument_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("named_argument_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // named_argument_list ::= named_argument 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("named_argument_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // named_argument ::= NAME ASSIGN expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("named_argument",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr_stmt ::= namelist ASSIGN testlist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // namelist ::= NAME namecoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("namelist",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // namelist ::= NAME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("namelist",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // namecoma ::= COMA NAME namecoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("namecoma",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // namecoma ::= COMA NAME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("namecoma",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // return_stmt ::= RETURN testlist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // return_stmt ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // testlist ::= expression testcoma COMA 
            {
              Object RESULT =null;
		 System.out.println("TESTLIST 4"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("testlist",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // testlist ::= expression testcoma 
            {
              Object RESULT =null;
		 System.out.println("TESTLIST 3"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("testlist",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // testlist ::= expression COMA 
            {
              Object RESULT =null;
		 System.out.println("TESTLIST 2"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("testlist",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // testlist ::= expression 
            {
              Object RESULT =null;
		 System.out.println("TESTLIST 1"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("testlist",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // testcoma ::= COMA expression testcoma 
            {
              Object RESULT =null;
		 System.out.println("TESTCOMA 2"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("testcoma",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // testcoma ::= COMA expression 
            {
              Object RESULT =null;
		 System.out.println("TESTCOMA 1"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("testcoma",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // print_stmt ::= PRINT expression 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generatePrint(p,n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= NOTB expression 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateUnaryOperation(op,a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= NOT expression 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateUnaryOperation(op,a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= expression EXP expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= expression DIVE expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= expression MOD expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= expression DIV expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= expression MULT expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= expression MINUS expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= expression PLUS expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= expression SHIFTR expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= expression SHIFTL expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= expression ANDB expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= expression XORB expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= expression ORB expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= expression EQUALS expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= expression DIFF expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= expression MAJOREQ expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= expression MINOREQ expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= expression MAJOR expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= expression MINOR expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= expression AND expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= expression OR expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= func_call 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= atom 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.loadNameOrConst(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // dictorsetmaker ::= dictorsetelement COMA dictorsetelement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // dictorsetmaker ::= dictorsetelement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dictorsetelement ::= expression COLON expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dictorsetelement",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dictionary ::= LCURLY RCURLY 
            {
              Object RESULT =null;
		 System.out.println("DICCIONARIO"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dictionary",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // dictionary ::= LCURLY dictorsetmaker RCURLY 
            {
              Object RESULT =null;
		 System.out.println("DICCIONARIO"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dictionary",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // listmaker ::= expression COMA listmaker 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listmaker",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // listmaker ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listmaker",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // list ::= LBRACKET listmaker RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // list ::= LBRACKET RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // atom ::= dictionary 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // atom ::= constant 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // atom ::= name 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // name ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = RuleGenerator.generateName((LexerToken)n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constant ::= FALSE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constant ::= TRUE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constant ::= NONE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constant ::= STRING3 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constant ::= STRING 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constant ::= float 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constant ::= long 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constant ::= integer 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // float ::= MINUS FLOAT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateMinusConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("float",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // float ::= FLOAT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("float",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // long ::= MINUS LONG 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateMinusConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("long",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // long ::= LONG 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("long",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // integer ::= MINUS INTEGER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateMinusConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // integer ::= INTEGER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= list NEWLINE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    System.out.println("EL PROGRAMA ESTA BIEN");
    Bloque bloq = ParseResult.getAs(b);
    Code code = ParserStatus.StackGenerador.peek().crearCodigo("lala","lala",bloq);
    RESULT = code;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

