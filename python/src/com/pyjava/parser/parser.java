
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jul 15 22:09:05 UYT 2015
//----------------------------------------------------

package com.pyjava.parser;

import com.pyjava.core.exceptions.PyException;
import com.pyjava.core.runtime.*;
import java_cup.runtime.*;
import com.pyjava.parser.codegen.*;
import com.pyjava.core.*;
import java.util.Deque;
import java.util.LinkedList;
import java.util.Scanner;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jul 15 22:09:05 UYT 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\207\000\002\064\003\000\002\002\004\000\002\061" +
    "\005\000\002\061\004\000\002\060\003\000\002\060\003" +
    "\000\002\027\003\000\002\027\004\000\002\031\003\000" +
    "\002\031\004\000\002\030\003\000\002\030\004\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\043\003\000\002\003\003\000" +
    "\002\003\003\000\002\051\004\000\002\051\005\000\002" +
    "\052\003\000\002\052\005\000\002\053\004\000\002\053" +
    "\005\000\002\050\004\000\002\050\005\000\002\047\003" +
    "\000\002\047\005\000\002\046\005\000\002\046\004\000" +
    "\002\045\005\000\002\044\003\000\002\044\005\000\002" +
    "\055\005\000\002\055\006\000\002\011\003\000\002\011" +
    "\004\000\002\011\005\000\002\011\004\000\002\011\003" +
    "\000\002\012\003\000\002\012\005\000\002\012\004\000" +
    "\002\012\004\000\002\012\003\000\002\056\004\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\004\000\002\010\004\000\002\054" +
    "\003\000\002\054\005\000\002\007\004\000\002\015\003" +
    "\000\002\015\004\000\002\015\004\000\002\057\004\000" +
    "\002\016\004\000\002\016\004\000\002\016\005\000\002" +
    "\016\005\000\002\017\004\000\002\017\004\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\022\005\000\002\023\003\000" +
    "\002\023\005\000\002\024\003\000\002\024\005\000\002" +
    "\024\003\000\002\025\004\000\002\025\005\000\002\026" +
    "\006\000\002\026\004\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\034\004\000\002" +
    "\034\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\041\003\000\002\041\004" +
    "\000\002\042\003\000\002\042\006\000\002\036\006\000" +
    "\002\036\011\000\002\040\010\000\002\037\006\000\002" +
    "\063\003\000\002\063\005\000\002\065\002\000\002\062" +
    "\012\000\002\066\002\000\002\062\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\334\000\060\006\050\015\030\020\041\027\015\032" +
    "\033\033\057\034\016\040\064\045\043\047\012\050\055" +
    "\051\052\052\056\053\024\061\014\063\010\065\036\067" +
    "\017\100\051\105\021\116\046\117\034\120\063\001\002" +
    "\000\072\041\uffcb\054\uffcb\055\uffcb\056\uffcb\060\uffcb\062" +
    "\uffcb\063\uffcb\064\uffcb\066\uffcb\067\uffcb\070\uffcb\071\uffcb" +
    "\072\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb\101" +
    "\uffcb\102\uffcb\103\uffcb\104\uffcb\106\uffcb\107\uffcb\110\uffcb" +
    "\111\uffcb\112\uffcb\113\uffcb\001\002\000\004\002\336\001" +
    "\002\000\072\041\uffce\054\uffce\055\uffce\056\uffce\060\uffce" +
    "\062\uffce\063\uffce\064\uffce\066\uffce\067\uffce\070\uffce\071" +
    "\uffce\072\uffce\073\uffce\074\uffce\075\uffce\076\uffce\077\uffce" +
    "\101\uffce\102\uffce\103\uffce\104\uffce\106\uffce\107\uffce\110" +
    "\uffce\111\uffce\112\uffce\113\uffce\001\002\000\004\002\001" +
    "\001\002\000\042\045\043\047\012\050\055\051\052\052" +
    "\056\053\024\061\014\062\330\063\010\065\036\067\017" +
    "\100\051\105\021\116\046\117\034\120\063\001\002\000" +
    "\066\006\uff8a\014\uff8a\015\uff8a\020\uff8a\027\uff8a\032\uff8a" +
    "\033\uff8a\034\uff8a\040\uff8a\041\uff8a\045\uff8a\047\uff8a\050" +
    "\uff8a\051\uff8a\052\uff8a\053\uff8a\061\uff8a\063\uff8a\065\uff8a" +
    "\067\uff8a\100\uff8a\105\uff8a\115\uff8a\116\uff8a\117\uff8a\120" +
    "\uff8a\001\002\000\072\041\ufffb\054\ufffb\055\ufffb\056\ufffb" +
    "\060\ufffb\062\ufffb\063\ufffb\064\ufffb\066\ufffb\067\ufffb\070" +
    "\ufffb\071\ufffb\072\ufffb\073\ufffb\074\ufffb\075\ufffb\076\ufffb" +
    "\077\ufffb\101\ufffb\102\ufffb\103\ufffb\104\ufffb\106\ufffb\107" +
    "\ufffb\110\ufffb\111\ufffb\112\ufffb\113\ufffb\001\002\000\004" +
    "\041\uff90\001\002\000\042\045\043\047\012\050\055\051" +
    "\052\052\056\053\024\060\323\061\014\063\010\065\036" +
    "\067\017\100\051\105\021\116\046\117\034\120\063\001" +
    "\002\000\004\041\uff94\001\002\000\004\045\043\001\002" +
    "\000\010\047\313\050\314\051\315\001\002\000\066\041" +
    "\uffec\046\310\054\252\055\uffec\061\072\063\uffec\066\uffec" +
    "\067\uffec\070\uffec\071\uffec\072\uffec\073\uffec\074\uffec\075" +
    "\uffec\076\uffec\077\uffec\101\uffec\102\uffec\103\uffec\104\uffec" +
    "\106\uffec\107\uffec\110\uffec\111\uffec\112\uffec\113\uffec\001" +
    "\002\000\040\045\043\047\012\050\055\051\052\052\056" +
    "\053\024\061\014\063\010\065\036\067\017\100\051\105" +
    "\021\116\046\117\034\120\063\001\002\000\004\041\304" +
    "\001\002\000\066\006\uff89\014\uff89\015\uff89\020\uff89\027" +
    "\uff89\032\uff89\033\uff89\034\uff89\040\uff89\041\uff89\045\uff89" +
    "\047\uff89\050\uff89\051\uff89\052\uff89\053\uff89\061\uff89\063" +
    "\uff89\065\uff89\067\uff89\100\uff89\105\uff89\115\uff89\116\uff89" +
    "\117\uff89\120\uff89\001\002\000\072\041\ufff1\054\ufff1\055" +
    "\ufff1\056\ufff1\060\ufff1\062\ufff1\063\ufff1\064\ufff1\066\ufff1" +
    "\067\ufff1\070\ufff1\071\ufff1\072\ufff1\073\ufff1\074\ufff1\075" +
    "\ufff1\076\ufff1\077\ufff1\101\ufff1\102\ufff1\103\ufff1\104\ufff1" +
    "\106\ufff1\107\ufff1\110\ufff1\111\ufff1\112\ufff1\113\ufff1\001" +
    "\002\000\004\041\uff93\001\002\000\004\041\ufffc\001\002" +
    "\000\072\041\uffcc\054\uffcc\055\uffcc\056\uffcc\060\uffcc\062" +
    "\uffcc\063\uffcc\064\uffcc\066\uffcc\067\uffcc\070\uffcc\071\uffcc" +
    "\072\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc\077\uffcc\101" +
    "\uffcc\102\uffcc\103\uffcc\104\uffcc\106\uffcc\107\uffcc\110\uffcc" +
    "\111\uffcc\112\uffcc\113\uffcc\001\002\000\040\045\043\047" +
    "\012\050\055\051\052\052\056\053\024\061\014\063\010" +
    "\065\036\067\017\100\051\105\021\116\046\117\034\120" +
    "\063\001\002\000\060\041\uff91\055\125\063\114\066\105" +
    "\067\124\070\121\071\122\072\115\073\111\074\103\075" +
    "\120\076\107\077\112\101\102\102\131\103\104\104\106" +
    "\106\116\107\127\110\123\111\110\112\113\113\130\001" +
    "\002\000\072\041\ufff4\054\ufff4\055\ufff4\056\ufff4\060\ufff4" +
    "\062\ufff4\063\ufff4\064\ufff4\066\ufff4\067\ufff4\070\ufff4\071" +
    "\ufff4\072\ufff4\073\ufff4\074\ufff4\075\ufff4\076\ufff4\077\ufff4" +
    "\101\ufff4\102\ufff4\103\ufff4\104\ufff4\106\ufff4\107\ufff4\110" +
    "\ufff4\111\ufff4\112\ufff4\113\ufff4\001\002\000\042\041\uffae" +
    "\045\043\047\012\050\055\051\052\052\056\053\024\061" +
    "\014\063\010\065\036\067\017\100\051\105\021\116\046" +
    "\117\034\120\063\001\002\000\072\041\uffef\054\uffef\055" +
    "\uffef\056\uffef\060\uffef\062\uffef\063\uffef\064\uffef\066\uffef" +
    "\067\uffef\070\uffef\071\uffef\072\uffef\073\uffef\074\uffef\075" +
    "\uffef\076\uffef\077\uffef\101\uffef\102\uffef\103\uffef\104\uffef" +
    "\106\uffef\107\uffef\110\uffef\111\uffef\112\uffef\113\uffef\001" +
    "\002\000\004\041\uff92\001\002\000\042\045\043\047\012" +
    "\050\055\051\052\052\056\053\024\061\014\063\010\064" +
    "\263\065\036\067\017\100\051\105\021\116\046\117\034" +
    "\120\063\001\002\000\072\041\uffeb\054\uffeb\055\uffeb\056" +
    "\uffeb\060\uffeb\062\uffeb\063\uffeb\064\uffeb\066\uffeb\067\uffeb" +
    "\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\075\uffeb\076" +
    "\uffeb\077\uffeb\101\uffeb\102\uffeb\103\uffeb\104\uffeb\106\uffeb" +
    "\107\uffeb\110\uffeb\111\uffeb\112\uffeb\113\uffeb\001\002\000" +
    "\004\041\uff8f\001\002\000\004\041\uff95\001\002\000\066" +
    "\006\uff8b\014\uff8b\015\uff8b\020\uff8b\027\uff8b\032\uff8b\033" +
    "\uff8b\034\uff8b\040\uff8b\041\uff8b\045\uff8b\047\uff8b\050\uff8b" +
    "\051\uff8b\052\uff8b\053\uff8b\061\uff8b\063\uff8b\065\uff8b\067" +
    "\uff8b\100\uff8b\105\uff8b\115\uff8b\116\uff8b\117\uff8b\120\uff8b" +
    "\001\002\000\100\025\uffed\041\uffed\046\uffed\054\uffed\055" +
    "\uffed\056\uffed\060\uffed\061\uffed\062\uffed\063\uffed\064\uffed" +
    "\066\uffed\067\uffed\070\uffed\071\uffed\072\uffed\073\uffed\074" +
    "\uffed\075\uffed\076\uffed\077\uffed\101\uffed\102\uffed\103\uffed" +
    "\104\uffed\106\uffed\107\uffed\110\uffed\111\uffed\112\uffed\113" +
    "\uffed\001\002\000\072\041\ufff5\054\ufff5\055\ufff5\056\ufff5" +
    "\060\ufff5\062\ufff5\063\ufff5\064\ufff5\066\ufff5\067\ufff5\070" +
    "\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5" +
    "\077\ufff5\101\ufff5\102\ufff5\103\ufff5\104\ufff5\106\ufff5\107" +
    "\ufff5\110\ufff5\111\ufff5\112\ufff5\113\ufff5\001\002\000\006" +
    "\046\253\054\252\001\002\000\072\041\ufff0\054\ufff0\055" +
    "\ufff0\056\ufff0\060\ufff0\062\ufff0\063\ufff0\064\ufff0\066\ufff0" +
    "\067\ufff0\070\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0\075" +
    "\ufff0\076\ufff0\077\ufff0\101\ufff0\102\ufff0\103\ufff0\104\ufff0" +
    "\106\ufff0\107\ufff0\110\ufff0\111\ufff0\112\ufff0\113\ufff0\001" +
    "\002\000\072\041\ufff3\054\ufff3\055\ufff3\056\ufff3\060\ufff3" +
    "\062\ufff3\063\ufff3\064\ufff3\066\ufff3\067\ufff3\070\ufff3\071" +
    "\ufff3\072\ufff3\073\ufff3\074\ufff3\075\ufff3\076\ufff3\077\ufff3" +
    "\101\ufff3\102\ufff3\103\ufff3\104\ufff3\106\ufff3\107\ufff3\110" +
    "\ufff3\111\ufff3\112\ufff3\113\ufff3\001\002\000\040\045\043" +
    "\047\012\050\055\051\052\052\056\053\024\061\014\063" +
    "\010\065\036\067\017\100\051\105\021\116\046\117\034" +
    "\120\063\001\002\000\040\045\043\047\012\050\055\051" +
    "\052\052\056\053\024\061\014\063\010\065\036\067\017" +
    "\100\051\105\021\116\046\117\034\120\063\001\002\000" +
    "\072\041\ufff7\054\ufff7\055\ufff7\056\ufff7\060\ufff7\062\ufff7" +
    "\063\ufff7\064\ufff7\066\ufff7\067\ufff7\070\ufff7\071\ufff7\072" +
    "\ufff7\073\ufff7\074\ufff7\075\ufff7\076\ufff7\077\ufff7\101\ufff7" +
    "\102\ufff7\103\ufff7\104\ufff7\106\ufff7\107\ufff7\110\ufff7\111" +
    "\ufff7\112\ufff7\113\ufff7\001\002\000\072\041\uffcd\054\uffcd" +
    "\055\uffcd\056\uffcd\060\uffcd\062\uffcd\063\uffcd\064\uffcd\066" +
    "\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\074\uffcd" +
    "\075\uffcd\076\uffcd\077\uffcd\101\uffcd\102\uffcd\103\uffcd\104" +
    "\uffcd\106\uffcd\107\uffcd\110\uffcd\111\uffcd\112\uffcd\113\uffcd" +
    "\001\002\000\072\041\uffc9\054\uffc9\055\uffc9\056\uffc9\060" +
    "\uffc9\062\uffc9\063\uffc9\064\uffc9\066\uffc9\067\uffc9\070\uffc9" +
    "\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\077" +
    "\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\106\uffc9\107\uffc9" +
    "\110\uffc9\111\uffc9\112\uffc9\113\uffc9\001\002\000\072\041" +
    "\ufff9\054\ufff9\055\ufff9\056\ufff9\060\ufff9\062\ufff9\063\ufff9" +
    "\064\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9\073" +
    "\ufff9\074\ufff9\075\ufff9\076\ufff9\077\ufff9\101\ufff9\102\ufff9" +
    "\103\ufff9\104\ufff9\106\ufff9\107\ufff9\110\ufff9\111\ufff9\112" +
    "\ufff9\113\ufff9\001\002\000\072\041\ufff2\054\ufff2\055\ufff2" +
    "\056\ufff2\060\ufff2\062\ufff2\063\ufff2\064\ufff2\066\ufff2\067" +
    "\ufff2\070\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2\075\ufff2" +
    "\076\ufff2\077\ufff2\101\ufff2\102\ufff2\103\ufff2\104\ufff2\106" +
    "\ufff2\107\ufff2\110\ufff2\111\ufff2\112\ufff2\113\ufff2\001\002" +
    "\000\004\045\043\001\002\000\066\006\uff8c\014\uff8c\015" +
    "\uff8c\020\uff8c\027\uff8c\032\uff8c\033\uff8c\034\uff8c\040\uff8c" +
    "\041\uff8c\045\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c\053" +
    "\uff8c\061\uff8c\063\uff8c\065\uff8c\067\uff8c\100\uff8c\105\uff8c" +
    "\115\uff8c\116\uff8c\117\uff8c\120\uff8c\001\002\000\004\046" +
    "\205\001\002\000\004\041\ufffd\001\002\000\072\041\uffee" +
    "\054\uffee\055\uffee\056\uffee\060\uffee\062\uffee\063\uffee\064" +
    "\uffee\066\uffee\067\uffee\070\uffee\071\uffee\072\uffee\073\uffee" +
    "\074\uffee\075\uffee\076\uffee\077\uffee\101\uffee\102\uffee\103" +
    "\uffee\104\uffee\106\uffee\107\uffee\110\uffee\111\uffee\112\uffee" +
    "\113\uffee\001\002\000\040\045\043\047\012\050\055\051" +
    "\052\052\056\053\024\061\014\063\010\065\036\067\017" +
    "\100\051\105\021\116\046\117\034\120\063\001\002\000" +
    "\072\041\uffca\054\uffca\055\uffca\056\uffca\060\uffca\062\uffca" +
    "\063\uffca\064\uffca\066\uffca\067\uffca\070\uffca\071\uffca\072" +
    "\uffca\073\uffca\074\uffca\075\uffca\076\uffca\077\uffca\101\uffca" +
    "\102\uffca\103\uffca\104\uffca\106\uffca\107\uffca\110\uffca\111" +
    "\uffca\112\uffca\113\uffca\001\002\000\062\041\uffb1\054\203" +
    "\055\125\063\114\066\105\067\124\070\121\071\122\072" +
    "\115\073\111\074\103\075\120\076\107\077\112\101\102" +
    "\102\131\103\104\104\106\106\116\107\127\110\123\111" +
    "\110\112\113\113\130\001\002\000\004\041\uffaf\001\002" +
    "\000\074\041\uffec\054\uffec\055\uffec\056\uffec\060\uffec\061" +
    "\072\062\uffec\063\uffec\064\uffec\066\uffec\067\uffec\070\uffec" +
    "\071\uffec\072\uffec\073\uffec\074\uffec\075\uffec\076\uffec\077" +
    "\uffec\101\uffec\102\uffec\103\uffec\104\uffec\106\uffec\107\uffec" +
    "\110\uffec\111\uffec\112\uffec\113\uffec\001\002\000\072\041" +
    "\uff96\054\uff96\055\uff96\056\uff96\060\uff96\062\uff96\063\uff96" +
    "\064\uff96\066\uff96\067\uff96\070\uff96\071\uff96\072\uff96\073" +
    "\uff96\074\uff96\075\uff96\076\uff96\077\uff96\101\uff96\102\uff96" +
    "\103\uff96\104\uff96\106\uff96\107\uff96\110\uff96\111\uff96\112" +
    "\uff96\113\uff96\001\002\000\042\045\076\047\012\050\055" +
    "\051\052\052\056\053\024\060\074\061\014\063\010\065" +
    "\036\067\017\100\051\105\021\116\046\117\034\120\063" +
    "\001\002\000\006\054\200\060\uff9e\001\002\000\072\041" +
    "\uff99\054\uff99\055\uff99\056\uff99\060\uff99\062\uff99\063\uff99" +
    "\064\uff99\066\uff99\067\uff99\070\uff99\071\uff99\072\uff99\073" +
    "\uff99\074\uff99\075\uff99\076\uff99\077\uff99\101\uff99\102\uff99" +
    "\103\uff99\104\uff99\106\uff99\107\uff99\110\uff99\111\uff99\112" +
    "\uff99\113\uff99\001\002\000\004\060\uff9a\001\002\000\066" +
    "\046\176\054\uffed\055\uffed\060\uffed\061\uffed\063\uffed\066" +
    "\uffed\067\uffed\070\uffed\071\uffed\072\uffed\073\uffed\074\uffed" +
    "\075\uffed\076\uffed\077\uffed\101\uffed\102\uffed\103\uffed\104" +
    "\uffed\106\uffed\107\uffed\110\uffed\111\uffed\112\uffed\113\uffed" +
    "\001\002\000\062\054\117\055\125\060\uff9c\063\114\066" +
    "\105\067\124\070\121\071\122\072\115\073\111\074\103" +
    "\075\120\076\107\077\112\101\102\102\131\103\104\104" +
    "\106\106\116\107\127\110\123\111\110\112\113\113\130" +
    "\001\002\000\004\060\101\001\002\000\072\041\uff98\054" +
    "\uff98\055\uff98\056\uff98\060\uff98\062\uff98\063\uff98\064\uff98" +
    "\066\uff98\067\uff98\070\uff98\071\uff98\072\uff98\073\uff98\074" +
    "\uff98\075\uff98\076\uff98\077\uff98\101\uff98\102\uff98\103\uff98" +
    "\104\uff98\106\uff98\107\uff98\110\uff98\111\uff98\112\uff98\113" +
    "\uff98\001\002\000\040\045\043\047\012\050\055\051\052" +
    "\052\056\053\024\061\014\063\010\065\036\067\017\100" +
    "\051\105\021\116\046\117\034\120\063\001\002\000\040" +
    "\045\043\047\012\050\055\051\052\052\056\053\024\061" +
    "\014\063\010\065\036\067\017\100\051\105\021\116\046" +
    "\117\034\120\063\001\002\000\040\045\043\047\012\050" +
    "\055\051\052\052\056\053\024\061\014\063\010\065\036" +
    "\067\017\100\051\105\021\116\046\117\034\120\063\001" +
    "\002\000\040\045\043\047\012\050\055\051\052\052\056" +
    "\053\024\061\014\063\010\065\036\067\017\100\051\105" +
    "\021\116\046\117\034\120\063\001\002\000\040\045\043" +
    "\047\012\050\055\051\052\052\056\053\024\061\014\063" +
    "\010\065\036\067\017\100\051\105\021\116\046\117\034" +
    "\120\063\001\002\000\040\045\043\047\012\050\055\051" +
    "\052\052\056\053\024\061\014\063\010\065\036\067\017" +
    "\100\051\105\021\116\046\117\034\120\063\001\002\000" +
    "\040\045\043\047\012\050\055\051\052\052\056\053\024" +
    "\061\014\063\010\065\036\067\017\100\051\105\021\116" +
    "\046\117\034\120\063\001\002\000\040\045\043\047\012" +
    "\050\055\051\052\052\056\053\024\061\014\063\010\065" +
    "\036\067\017\100\051\105\021\116\046\117\034\120\063" +
    "\001\002\000\040\045\043\047\012\050\055\051\052\052" +
    "\056\053\024\061\014\063\010\065\036\067\017\100\051" +
    "\105\021\116\046\117\034\120\063\001\002\000\040\045" +
    "\043\047\012\050\055\051\052\052\056\053\024\061\014" +
    "\063\010\065\036\067\017\100\051\105\021\116\046\117" +
    "\034\120\063\001\002\000\042\045\043\047\012\050\055" +
    "\051\052\052\056\053\024\056\147\061\014\063\010\065" +
    "\036\067\017\100\051\105\021\116\046\117\034\120\063" +
    "\001\002\000\040\045\043\047\012\050\055\051\052\052" +
    "\056\053\024\061\014\063\010\065\036\067\017\100\051" +
    "\105\021\116\046\117\034\120\063\001\002\000\040\045" +
    "\043\047\012\050\055\051\052\052\056\053\024\061\014" +
    "\063\010\065\036\067\017\100\051\105\021\116\046\117" +
    "\034\120\063\001\002\000\040\045\076\047\012\050\055" +
    "\051\052\052\056\053\024\061\014\063\010\065\036\067" +
    "\017\100\051\105\021\116\046\117\034\120\063\001\002" +
    "\000\040\045\043\047\012\050\055\051\052\052\056\053" +
    "\024\061\014\063\010\065\036\067\017\100\051\105\021" +
    "\116\046\117\034\120\063\001\002\000\040\045\043\047" +
    "\012\050\055\051\052\052\056\053\024\061\014\063\010" +
    "\065\036\067\017\100\051\105\021\116\046\117\034\120" +
    "\063\001\002\000\040\045\043\047\012\050\055\051\052" +
    "\052\056\053\024\061\014\063\010\065\036\067\017\100" +
    "\051\105\021\116\046\117\034\120\063\001\002\000\040" +
    "\045\043\047\012\050\055\051\052\052\056\053\024\061" +
    "\014\063\010\065\036\067\017\100\051\105\021\116\046" +
    "\117\034\120\063\001\002\000\040\045\043\047\012\050" +
    "\055\051\052\052\056\053\024\061\014\063\010\065\036" +
    "\067\017\100\051\105\021\116\046\117\034\120\063\001" +
    "\002\000\004\045\043\001\002\000\072\041\uffcf\054\uffcf" +
    "\055\uffcf\056\uffcf\060\uffcf\062\uffcf\063\uffcf\064\uffcf\066" +
    "\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf" +
    "\075\uffcf\076\uffcf\077\uffcf\101\uffcf\102\uffcf\103\uffcf\104" +
    "\uffcf\106\uffcf\107\uffcf\110\uffcf\111\uffcf\112\uffcf\113\uffcf" +
    "\001\002\000\040\045\043\047\012\050\055\051\052\052" +
    "\056\053\024\061\014\063\010\065\036\067\017\100\051" +
    "\105\021\116\046\117\034\120\063\001\002\000\040\045" +
    "\043\047\012\050\055\051\052\052\056\053\024\061\014" +
    "\063\010\065\036\067\017\100\051\105\021\116\046\117" +
    "\034\120\063\001\002\000\040\045\043\047\012\050\055" +
    "\051\052\052\056\053\024\061\014\063\010\065\036\067" +
    "\017\100\051\105\021\116\046\117\034\120\063\001\002" +
    "\000\072\041\uffbb\054\uffbb\055\125\056\uffbb\060\uffbb\062" +
    "\uffbb\063\uffbb\064\uffbb\066\105\067\124\070\121\071\122" +
    "\072\115\073\111\074\103\075\uffbb\076\uffbb\077\uffbb\101" +
    "\uffbb\102\uffbb\103\uffbb\104\uffbb\106\uffbb\107\uffbb\110\uffbb" +
    "\111\uffbb\112\uffbb\113\uffbb\001\002\000\072\041\uffc2\054" +
    "\uffc2\055\125\056\uffc2\060\uffc2\062\uffc2\063\uffc2\064\uffc2" +
    "\066\105\067\124\070\121\071\122\072\115\073\111\074" +
    "\103\075\120\076\107\077\112\101\102\102\131\103\uffc2" +
    "\104\uffc2\106\uffc2\107\uffc2\110\uffc2\111\uffc2\112\uffc2\113" +
    "\uffc2\001\002\000\072\041\uffc1\054\uffc1\055\125\056\uffc1" +
    "\060\uffc1\062\uffc1\063\uffc1\064\uffc1\066\105\067\124\070" +
    "\121\071\122\072\115\073\111\074\103\075\120\076\107" +
    "\077\112\101\102\102\131\103\uffc1\104\uffc1\106\uffc1\107" +
    "\uffc1\110\uffc1\111\uffc1\112\uffc1\113\uffc1\001\002\000\004" +
    "\061\072\001\002\000\072\041\uff97\054\uff97\055\uff97\056" +
    "\uff97\060\uff97\062\uff97\063\uff97\064\uff97\066\uff97\067\uff97" +
    "\070\uff97\071\uff97\072\uff97\073\uff97\074\uff97\075\uff97\076" +
    "\uff97\077\uff97\101\uff97\102\uff97\103\uff97\104\uff97\106\uff97" +
    "\107\uff97\110\uff97\111\uff97\112\uff97\113\uff97\001\002\000" +
    "\072\041\uffb9\054\uffb9\055\125\056\uffb9\060\uffb9\062\uffb9" +
    "\063\uffb9\064\uffb9\066\uffb9\067\uffb9\070\121\071\122\072" +
    "\115\073\111\074\103\075\uffb9\076\uffb9\077\uffb9\101\uffb9" +
    "\102\uffb9\103\uffb9\104\uffb9\106\uffb9\107\uffb9\110\uffb9\111" +
    "\uffb9\112\uffb9\113\uffb9\001\002\000\072\041\uffc5\054\uffc5" +
    "\055\125\056\uffc5\060\uffc5\062\uffc5\063\uffc5\064\uffc5\066" +
    "\105\067\124\070\121\071\122\072\115\073\111\074\103" +
    "\075\120\076\107\077\112\101\102\102\131\103\uffc5\104" +
    "\uffc5\106\uffc5\107\uffc5\110\uffc5\111\uffc5\112\uffc5\113\uffc5" +
    "\001\002\000\072\041\uffb7\054\uffb7\055\125\056\uffb7\060" +
    "\uffb7\062\uffb7\063\uffb7\064\uffb7\066\uffb7\067\uffb7\070\uffb7" +
    "\071\uffb7\072\115\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077" +
    "\uffb7\101\uffb7\102\uffb7\103\uffb7\104\uffb7\106\uffb7\107\uffb7" +
    "\110\uffb7\111\uffb7\112\uffb7\113\uffb7\001\002\000\072\041" +
    "\uffb8\054\uffb8\055\125\056\uffb8\060\uffb8\062\uffb8\063\uffb8" +
    "\064\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8\072\115\073" +
    "\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\101\uffb8\102\uffb8" +
    "\103\uffb8\104\uffb8\106\uffb8\107\uffb8\110\uffb8\111\uffb8\112" +
    "\uffb8\113\uffb8\001\002\000\072\041\uffbd\054\uffbd\055\125" +
    "\056\uffbd\060\uffbd\062\uffbd\063\uffbd\064\uffbd\066\105\067" +
    "\124\070\121\071\122\072\115\073\111\074\103\075\uffbd" +
    "\076\uffbd\077\uffbd\101\102\102\131\103\uffbd\104\uffbd\106" +
    "\uffbd\107\uffbd\110\uffbd\111\uffbd\112\uffbd\113\uffbd\001\002" +
    "\000\004\060\uff9b\001\002\000\072\041\uffc0\054\uffc0\055" +
    "\125\056\uffc0\060\uffc0\062\uffc0\063\uffc0\064\uffc0\066\105" +
    "\067\124\070\121\071\122\072\115\073\111\074\103\075" +
    "\120\076\107\077\112\101\102\102\131\103\uffc0\104\uffc0" +
    "\106\uffc0\107\uffc0\110\uffc0\111\uffc0\112\uffc0\113\uffc0\001" +
    "\002\000\072\041\uffb4\054\uffb4\055\125\056\uffb4\060\uffb4" +
    "\062\uffb4\063\uffb4\064\uffb4\066\uffb4\067\uffb4\070\uffb4\071" +
    "\uffb4\072\115\073\uffb4\074\uffb4\075\uffb4\076\uffb4\077\uffb4" +
    "\101\uffb4\102\uffb4\103\uffb4\104\uffb4\106\uffb4\107\uffb4\110" +
    "\uffb4\111\uffb4\112\uffb4\113\uffb4\001\002\000\044\045\043" +
    "\047\012\050\055\051\052\052\056\053\024\056\155\061" +
    "\014\062\uffd5\063\010\065\036\067\017\100\051\105\021" +
    "\116\046\117\034\120\063\001\002\000\062\055\125\056" +
    "\154\062\uffd9\063\114\066\105\067\124\070\121\071\122" +
    "\072\115\073\111\074\103\075\120\076\107\077\112\101" +
    "\102\102\131\103\104\104\106\106\116\107\127\110\123" +
    "\111\110\112\113\113\130\001\002\000\004\062\152\001" +
    "\002\000\074\041\uffdb\046\uffdb\054\uffdb\055\uffdb\056\uffdb" +
    "\060\uffdb\062\uffdb\063\uffdb\064\uffdb\066\uffdb\067\uffdb\070" +
    "\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb" +
    "\077\uffdb\101\uffdb\102\uffdb\103\uffdb\104\uffdb\106\uffdb\107" +
    "\uffdb\110\uffdb\111\uffdb\112\uffdb\113\uffdb\001\002\000\074" +
    "\041\uffda\046\uffda\054\uffda\055\uffda\056\uffda\060\uffda\062" +
    "\uffda\063\uffda\064\uffda\066\uffda\067\uffda\070\uffda\071\uffda" +
    "\072\uffda\073\uffda\074\uffda\075\uffda\076\uffda\077\uffda\101" +
    "\uffda\102\uffda\103\uffda\104\uffda\106\uffda\107\uffda\110\uffda" +
    "\111\uffda\112\uffda\113\uffda\001\002\000\044\045\043\047" +
    "\012\050\055\051\052\052\056\053\024\056\155\061\014" +
    "\062\uffd8\063\010\065\036\067\017\100\051\105\021\116" +
    "\046\117\034\120\063\001\002\000\042\045\043\047\012" +
    "\050\055\051\052\052\056\053\024\061\014\062\uffd0\063" +
    "\010\065\036\067\017\100\051\105\021\116\046\117\034" +
    "\120\063\001\002\000\004\062\uffd7\001\002\000\062\055" +
    "\125\056\160\062\uffd4\063\114\066\105\067\124\070\121" +
    "\071\122\072\115\073\111\074\103\075\120\076\107\077" +
    "\112\101\102\102\131\103\104\104\106\106\116\107\127" +
    "\110\123\111\110\112\113\113\130\001\002\000\042\045" +
    "\043\047\012\050\055\051\052\052\056\053\024\061\014" +
    "\062\uffd2\063\010\065\036\067\017\100\051\105\021\116" +
    "\046\117\034\120\063\001\002\000\060\055\125\062\uffd3" +
    "\063\114\066\105\067\124\070\121\071\122\072\115\073" +
    "\111\074\103\075\120\076\107\077\112\101\102\102\131" +
    "\103\104\104\106\106\116\107\127\110\123\111\110\112" +
    "\113\113\130\001\002\000\060\055\125\062\uffd1\063\114" +
    "\066\105\067\124\070\121\071\122\072\115\073\111\074" +
    "\103\075\120\076\107\077\112\101\102\102\131\103\104" +
    "\104\106\106\116\107\127\110\123\111\110\112\113\113" +
    "\130\001\002\000\004\062\uffd6\001\002\000\072\041\uffc3" +
    "\054\uffc3\055\125\056\uffc3\060\uffc3\062\uffc3\063\uffc3\064" +
    "\uffc3\066\105\067\124\070\121\071\122\072\115\073\111" +
    "\074\103\075\120\076\107\077\112\101\102\102\131\103" +
    "\uffc3\104\uffc3\106\uffc3\107\uffc3\110\uffc3\111\uffc3\112\uffc3" +
    "\113\uffc3\001\002\000\072\041\uffbe\054\uffbe\055\125\056" +
    "\uffbe\060\uffbe\062\uffbe\063\uffbe\064\uffbe\066\105\067\124" +
    "\070\121\071\122\072\115\073\111\074\103\075\120\076" +
    "\uffbe\077\uffbe\101\102\102\131\103\uffbe\104\uffbe\106\uffbe" +
    "\107\uffbe\110\uffbe\111\uffbe\112\uffbe\113\uffbe\001\002\000" +
    "\072\041\uffb5\054\uffb5\055\125\056\uffb5\060\uffb5\062\uffb5" +
    "\063\uffb5\064\uffb5\066\uffb5\067\uffb5\070\uffb5\071\uffb5\072" +
    "\115\073\uffb5\074\uffb5\075\uffb5\076\uffb5\077\uffb5\101\uffb5" +
    "\102\uffb5\103\uffb5\104\uffb5\106\uffb5\107\uffb5\110\uffb5\111" +
    "\uffb5\112\uffb5\113\uffb5\001\002\000\072\041\uffc4\054\uffc4" +
    "\055\125\056\uffc4\060\uffc4\062\uffc4\063\uffc4\064\uffc4\066" +
    "\105\067\124\070\121\071\122\072\115\073\111\074\103" +
    "\075\120\076\107\077\112\101\102\102\131\103\uffc4\104" +
    "\uffc4\106\uffc4\107\uffc4\110\uffc4\111\uffc4\112\uffc4\113\uffc4" +
    "\001\002\000\072\041\uffbf\054\uffbf\055\125\056\uffbf\060" +
    "\uffbf\062\uffbf\063\uffbf\064\uffbf\066\105\067\124\070\121" +
    "\071\122\072\115\073\111\074\103\075\120\076\uffbf\077" +
    "\112\101\102\102\131\103\uffbf\104\uffbf\106\uffbf\107\uffbf" +
    "\110\uffbf\111\uffbf\112\uffbf\113\uffbf\001\002\000\072\041" +
    "\uffc7\054\uffc7\055\125\056\uffc7\060\uffc7\062\uffc7\063\uffc7" +
    "\064\uffc7\066\105\067\124\070\121\071\122\072\115\073" +
    "\111\074\103\075\120\076\107\077\112\101\102\102\131" +
    "\103\104\104\uffc7\106\116\107\127\110\123\111\110\112" +
    "\113\113\130\001\002\000\072\041\uffba\054\uffba\055\125" +
    "\056\uffba\060\uffba\062\uffba\063\uffba\064\uffba\066\uffba\067" +
    "\uffba\070\121\071\122\072\115\073\111\074\103\075\uffba" +
    "\076\uffba\077\uffba\101\uffba\102\uffba\103\uffba\104\uffba\106" +
    "\uffba\107\uffba\110\uffba\111\uffba\112\uffba\113\uffba\001\002" +
    "\000\072\041\uffc6\054\uffc6\055\125\056\uffc6\060\uffc6\062" +
    "\uffc6\063\uffc6\064\uffc6\066\105\067\124\070\121\071\122" +
    "\072\115\073\111\074\103\075\120\076\107\077\112\101" +
    "\102\102\131\103\uffc6\104\uffc6\106\116\107\127\110\123" +
    "\111\110\112\113\113\130\001\002\000\072\041\uffb6\054" +
    "\uffb6\055\125\056\uffb6\060\uffb6\062\uffb6\063\uffb6\064\uffb6" +
    "\066\uffb6\067\uffb6\070\uffb6\071\uffb6\072\115\073\uffb6\074" +
    "\uffb6\075\uffb6\076\uffb6\077\uffb6\101\uffb6\102\uffb6\103\uffb6" +
    "\104\uffb6\106\uffb6\107\uffb6\110\uffb6\111\uffb6\112\uffb6\113" +
    "\uffb6\001\002\000\072\041\uffbc\054\uffbc\055\125\056\uffbc" +
    "\060\uffbc\062\uffbc\063\uffbc\064\uffbc\066\105\067\124\070" +
    "\121\071\122\072\115\073\111\074\103\075\uffbc\076\uffbc" +
    "\077\uffbc\101\uffbc\102\uffbc\103\uffbc\104\uffbc\106\uffbc\107" +
    "\uffbc\110\uffbc\111\uffbc\112\uffbc\113\uffbc\001\002\000\040" +
    "\045\043\047\012\050\055\051\052\052\056\053\024\061" +
    "\014\063\010\065\036\067\017\100\051\105\021\116\046" +
    "\117\034\120\063\001\002\000\062\054\uff9f\055\125\060" +
    "\uff9f\063\114\066\105\067\124\070\121\071\122\072\115" +
    "\073\111\074\103\075\120\076\107\077\112\101\102\102" +
    "\131\103\104\104\106\106\116\107\127\110\123\111\110" +
    "\112\113\113\130\001\002\000\004\045\202\001\002\000" +
    "\004\060\uff9d\001\002\000\004\046\176\001\002\000\040" +
    "\045\043\047\012\050\055\051\052\052\056\053\024\061" +
    "\014\063\010\065\036\067\017\100\051\105\021\116\046" +
    "\117\034\120\063\001\002\000\004\041\uffb0\001\002\000" +
    "\040\045\043\047\012\050\055\051\052\052\056\053\024" +
    "\061\014\063\010\065\036\067\017\100\051\105\021\116" +
    "\046\117\034\120\063\001\002\000\004\041\uffa1\001\002" +
    "\000\062\041\uffa0\054\210\055\125\063\114\066\105\067" +
    "\124\070\121\071\122\072\115\073\111\074\103\075\120" +
    "\076\107\077\112\101\102\102\131\103\104\104\106\106" +
    "\116\107\127\110\123\111\110\112\113\113\130\001\002" +
    "\000\044\041\uffe6\045\043\047\012\050\055\051\052\052" +
    "\056\053\024\060\uffe6\061\014\063\010\065\036\067\017" +
    "\100\051\105\021\116\046\117\034\120\063\001\002\000" +
    "\006\041\uffe5\060\uffe5\001\002\000\064\041\uffe8\054\213" +
    "\055\125\060\uffe8\063\114\066\105\067\124\070\121\071" +
    "\122\072\115\073\111\074\103\075\120\076\107\077\112" +
    "\101\102\102\131\103\104\104\106\106\116\107\127\110" +
    "\123\111\110\112\113\113\130\001\002\000\040\045\043" +
    "\047\012\050\055\051\052\052\056\053\024\061\014\063" +
    "\010\065\036\067\017\100\051\105\021\116\046\117\034" +
    "\120\063\001\002\000\006\041\uffe7\060\uffe7\001\002\000" +
    "\004\061\216\001\002\000\006\045\221\060\217\001\002" +
    "\000\004\056\242\001\002\000\004\060\224\001\002\000" +
    "\006\054\222\060\uff80\001\002\000\004\045\221\001\002" +
    "\000\004\060\uff7f\001\002\000\004\056\225\001\002\000" +
    "\062\006\uff7e\015\uff7e\020\uff7e\027\uff7e\032\uff7e\033\uff7e" +
    "\034\uff7e\040\uff7e\041\uff7e\045\uff7e\047\uff7e\050\uff7e\051" +
    "\uff7e\052\uff7e\053\uff7e\061\uff7e\063\uff7e\065\uff7e\067\uff7e" +
    "\100\uff7e\105\uff7e\116\uff7e\117\uff7e\120\uff7e\001\002\000" +
    "\062\006\050\015\030\020\041\027\015\032\033\033\057" +
    "\034\016\040\064\041\231\045\043\047\012\050\055\051" +
    "\052\052\056\053\024\061\014\063\010\065\036\067\017" +
    "\100\051\105\021\116\046\117\034\120\063\001\002\000" +
    "\066\006\uff8d\014\uff8d\015\uff8d\020\uff8d\027\uff8d\032\uff8d" +
    "\033\uff8d\034\uff8d\040\uff8d\041\uff8d\045\uff8d\047\uff8d\050" +
    "\uff8d\051\uff8d\052\uff8d\053\uff8d\061\uff8d\063\uff8d\065\uff8d" +
    "\067\uff8d\100\uff8d\105\uff8d\115\uff8d\116\uff8d\117\uff8d\120" +
    "\uff8d\001\002\000\066\006\uff7d\014\uff7d\015\uff7d\020\uff7d" +
    "\027\uff7d\032\uff7d\033\uff7d\034\uff7d\040\uff7d\041\uff7d\045" +
    "\uff7d\047\uff7d\050\uff7d\051\uff7d\052\uff7d\053\uff7d\061\uff7d" +
    "\063\uff7d\065\uff7d\067\uff7d\100\uff7d\105\uff7d\115\uff7d\116" +
    "\uff7d\117\uff7d\120\uff7d\001\002\000\004\114\235\001\002" +
    "\000\004\041\234\001\002\000\066\006\uff86\014\uff86\015" +
    "\uff86\020\uff86\027\uff86\032\uff86\033\uff86\034\uff86\040\uff86" +
    "\041\uff86\045\uff86\047\uff86\050\uff86\051\uff86\052\uff86\053" +
    "\uff86\061\uff86\063\uff86\065\uff86\067\uff86\100\uff86\105\uff86" +
    "\115\uff86\116\uff86\117\uff86\120\uff86\001\002\000\066\006" +
    "\uff8e\014\uff8e\015\uff8e\020\uff8e\027\uff8e\032\uff8e\033\uff8e" +
    "\034\uff8e\040\uff8e\041\uff8e\045\uff8e\047\uff8e\050\uff8e\051" +
    "\uff8e\052\uff8e\053\uff8e\061\uff8e\063\uff8e\065\uff8e\067\uff8e" +
    "\100\uff8e\105\uff8e\115\uff8e\116\uff8e\117\uff8e\120\uff8e\001" +
    "\002\000\060\006\050\015\030\020\041\027\015\032\033" +
    "\033\057\034\016\040\064\045\043\047\012\050\055\051" +
    "\052\052\056\053\024\061\014\063\010\065\036\067\017" +
    "\100\051\105\021\116\046\117\034\120\063\001\002\000" +
    "\004\115\241\001\002\000\062\006\050\015\030\020\041" +
    "\027\015\032\033\033\057\034\016\040\064\045\043\047" +
    "\012\050\055\051\052\052\056\053\024\061\014\063\010" +
    "\065\036\067\017\100\051\105\021\115\uff88\116\046\117" +
    "\034\120\063\001\002\000\004\115\uff87\001\002\000\066" +
    "\006\uff85\014\uff85\015\uff85\020\uff85\027\uff85\032\uff85\033" +
    "\uff85\034\uff85\040\uff85\041\uff85\045\uff85\047\uff85\050\uff85" +
    "\051\uff85\052\uff85\053\uff85\061\uff85\063\uff85\065\uff85\067" +
    "\uff85\100\uff85\105\uff85\115\uff85\116\uff85\117\uff85\120\uff85" +
    "\001\002\000\062\006\uff7c\015\uff7c\020\uff7c\027\uff7c\032" +
    "\uff7c\033\uff7c\034\uff7c\040\uff7c\041\uff7c\045\uff7c\047\uff7c" +
    "\050\uff7c\051\uff7c\052\uff7c\053\uff7c\061\uff7c\063\uff7c\065" +
    "\uff7c\067\uff7c\100\uff7c\105\uff7c\116\uff7c\117\uff7c\120\uff7c" +
    "\001\002\000\062\006\050\015\030\020\041\027\015\032" +
    "\033\033\057\034\016\040\064\041\231\045\043\047\012" +
    "\050\055\051\052\052\056\053\024\061\014\063\010\065" +
    "\036\067\017\100\051\105\021\116\046\117\034\120\063" +
    "\001\002\000\066\006\uff7b\014\uff7b\015\uff7b\020\uff7b\027" +
    "\uff7b\032\uff7b\033\uff7b\034\uff7b\040\uff7b\041\uff7b\045\uff7b" +
    "\047\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b\061\uff7b\063" +
    "\uff7b\065\uff7b\067\uff7b\100\uff7b\105\uff7b\115\uff7b\116\uff7b" +
    "\117\uff7b\120\uff7b\001\002\000\072\041\uffb2\054\uffb2\055" +
    "\125\056\uffb2\060\uffb2\062\uffb2\063\uffb2\064\uffb2\066\uffb2" +
    "\067\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2\075" +
    "\uffb2\076\uffb2\077\uffb2\101\uffb2\102\uffb2\103\uffb2\104\uffb2" +
    "\106\uffb2\107\uffb2\110\uffb2\111\uffb2\112\uffb2\113\uffb2\001" +
    "\002\000\060\055\125\056\247\063\114\066\105\067\124" +
    "\070\121\071\122\072\115\073\111\074\103\075\120\076" +
    "\107\077\112\101\102\102\131\103\104\104\106\106\116" +
    "\107\127\110\123\111\110\112\113\113\130\001\002\000" +
    "\062\006\050\015\030\020\041\027\015\032\033\033\057" +
    "\034\016\040\064\041\231\045\043\047\012\050\055\051" +
    "\052\052\056\053\024\061\014\063\010\065\036\067\017" +
    "\100\051\105\021\116\046\117\034\120\063\001\002\000" +
    "\066\006\uff81\014\uff81\015\uff81\020\uff81\027\uff81\032\uff81" +
    "\033\uff81\034\uff81\040\uff81\041\uff81\045\uff81\047\uff81\050" +
    "\uff81\051\uff81\052\uff81\053\uff81\061\uff81\063\uff81\065\uff81" +
    "\067\uff81\100\uff81\105\uff81\115\uff81\116\uff81\117\uff81\120" +
    "\uff81\001\002\000\004\046\uffa5\001\002\000\040\045\043" +
    "\047\012\050\055\051\052\052\056\053\024\061\014\063" +
    "\010\065\036\067\017\100\051\105\021\116\046\117\034" +
    "\120\063\001\002\000\040\045\043\047\012\050\055\051" +
    "\052\052\056\053\024\061\014\063\010\065\036\067\017" +
    "\100\051\105\021\116\046\117\034\120\063\001\002\000" +
    "\060\041\uffa2\055\125\063\114\066\105\067\124\070\121" +
    "\071\122\072\115\073\111\074\103\075\120\076\107\077" +
    "\112\101\102\102\131\103\104\104\106\106\116\107\127" +
    "\110\123\111\110\112\113\113\130\001\002\000\006\046" +
    "\uffa9\054\252\001\002\000\056\055\125\063\114\066\105" +
    "\067\124\070\121\071\122\072\115\073\111\074\103\075" +
    "\120\076\107\077\112\101\102\102\131\103\104\104\106" +
    "\106\116\107\127\110\123\111\110\112\113\113\130\001" +
    "\002\000\064\046\uffaa\054\252\055\uffec\061\072\063\uffec" +
    "\066\uffec\067\uffec\070\uffec\071\uffec\072\uffec\073\uffec\074" +
    "\uffec\075\uffec\076\uffec\077\uffec\101\uffec\102\uffec\103\uffec" +
    "\104\uffec\106\uffec\107\uffec\110\uffec\111\uffec\112\uffec\113" +
    "\uffec\001\002\000\004\046\uffa8\001\002\000\064\041\uffcf" +
    "\046\uffab\054\uffab\055\uffcf\063\uffcf\066\uffcf\067\uffcf\070" +
    "\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf" +
    "\077\uffcf\101\uffcf\102\uffcf\103\uffcf\104\uffcf\106\uffcf\107" +
    "\uffcf\110\uffcf\111\uffcf\112\uffcf\113\uffcf\001\002\000\004" +
    "\046\uffa7\001\002\000\072\041\uffdf\054\uffdf\055\uffdf\056" +
    "\uffdf\060\uffdf\062\uffdf\063\uffdf\064\uffdf\066\uffdf\067\uffdf" +
    "\070\uffdf\071\uffdf\072\uffdf\073\uffdf\074\uffdf\075\uffdf\076" +
    "\uffdf\077\uffdf\101\uffdf\102\uffdf\103\uffdf\104\uffdf\106\uffdf" +
    "\107\uffdf\110\uffdf\111\uffdf\112\uffdf\113\uffdf\001\002\000" +
    "\004\064\273\001\002\000\006\054\271\064\uffdd\001\002" +
    "\000\060\055\125\056\267\063\114\066\105\067\124\070" +
    "\121\071\122\072\115\073\111\074\103\075\120\076\107" +
    "\077\112\101\102\102\131\103\104\104\106\106\116\107" +
    "\127\110\123\111\110\112\113\113\130\001\002\000\040" +
    "\045\043\047\012\050\055\051\052\052\056\053\024\061" +
    "\014\063\010\065\036\067\017\100\051\105\021\116\046" +
    "\117\034\120\063\001\002\000\062\054\uffde\055\125\063" +
    "\114\064\uffde\066\105\067\124\070\121\071\122\072\115" +
    "\073\111\074\103\075\120\076\107\077\112\101\102\102" +
    "\131\103\104\104\106\106\116\107\127\110\123\111\110" +
    "\112\113\113\130\001\002\000\040\045\043\047\012\050" +
    "\055\051\052\052\056\053\024\061\014\063\010\065\036" +
    "\067\017\100\051\105\021\116\046\117\034\120\063\001" +
    "\002\000\004\064\uffdc\001\002\000\072\041\uffe0\054\uffe0" +
    "\055\uffe0\056\uffe0\060\uffe0\062\uffe0\063\uffe0\064\uffe0\066" +
    "\uffe0\067\uffe0\070\uffe0\071\uffe0\072\uffe0\073\uffe0\074\uffe0" +
    "\075\uffe0\076\uffe0\077\uffe0\101\uffe0\102\uffe0\103\uffe0\104" +
    "\uffe0\106\uffe0\107\uffe0\110\uffe0\111\uffe0\112\uffe0\113\uffe0" +
    "\001\002\000\004\041\uffac\001\002\000\062\041\uffad\054" +
    "\210\055\125\063\114\066\105\067\124\070\121\071\122" +
    "\072\115\073\111\074\103\075\120\076\107\077\112\101" +
    "\102\102\131\103\104\104\106\106\116\107\127\110\123" +
    "\111\110\112\113\113\130\001\002\000\060\055\125\056" +
    "\277\063\114\066\105\067\124\070\121\071\122\072\115" +
    "\073\111\074\103\075\120\076\107\077\112\101\102\102" +
    "\131\103\104\104\106\106\116\107\127\110\123\111\110" +
    "\112\113\113\130\001\002\000\062\006\050\015\030\020" +
    "\041\027\015\032\033\033\057\034\016\040\064\041\231" +
    "\045\043\047\012\050\055\051\052\052\056\053\024\061" +
    "\014\063\010\065\036\067\017\100\051\105\021\116\046" +
    "\117\034\120\063\001\002\000\066\006\uff84\014\301\015" +
    "\uff84\020\uff84\027\uff84\032\uff84\033\uff84\034\uff84\040\uff84" +
    "\041\uff84\045\uff84\047\uff84\050\uff84\051\uff84\052\uff84\053" +
    "\uff84\061\uff84\063\uff84\065\uff84\067\uff84\100\uff84\105\uff84" +
    "\115\uff84\116\uff84\117\uff84\120\uff84\001\002\000\004\056" +
    "\302\001\002\000\062\006\050\015\030\020\041\027\015" +
    "\032\033\033\057\034\016\040\064\041\231\045\043\047" +
    "\012\050\055\051\052\052\056\053\024\061\014\063\010" +
    "\065\036\067\017\100\051\105\021\116\046\117\034\120" +
    "\063\001\002\000\066\006\uff83\014\uff83\015\uff83\020\uff83" +
    "\027\uff83\032\uff83\033\uff83\034\uff83\040\uff83\041\uff83\045" +
    "\uff83\047\uff83\050\uff83\051\uff83\052\uff83\053\uff83\061\uff83" +
    "\063\uff83\065\uff83\067\uff83\100\uff83\105\uff83\115\uff83\116" +
    "\uff83\117\uff83\120\uff83\001\002\000\062\002\ufffe\006\050" +
    "\015\030\020\041\027\015\032\033\033\057\034\016\040" +
    "\064\045\043\047\012\050\055\051\052\052\056\053\024" +
    "\061\014\063\010\065\036\067\017\100\051\105\021\116" +
    "\046\117\034\120\063\001\002\000\004\002\uffff\001\002" +
    "\000\072\041\uffb3\054\uffb3\055\125\056\uffb3\060\uffb3\062" +
    "\uffb3\063\uffb3\064\uffb3\066\105\067\124\070\121\071\122" +
    "\072\115\073\111\074\103\075\120\076\107\077\112\101" +
    "\102\102\131\103\uffb3\104\uffb3\106\116\107\127\110\123" +
    "\111\110\112\113\113\130\001\002\000\004\046\uffa6\001" +
    "\002\000\040\045\043\047\012\050\055\051\052\052\056" +
    "\053\024\061\014\063\010\065\036\067\017\100\051\105" +
    "\021\116\046\117\034\120\063\001\002\000\004\041\uffa3" +
    "\001\002\000\062\041\uffa4\054\210\055\125\063\114\066" +
    "\105\067\124\070\121\071\122\072\115\073\111\074\103" +
    "\075\120\076\107\077\112\101\102\102\131\103\104\104" +
    "\106\106\116\107\127\110\123\111\110\112\113\113\130" +
    "\001\002\000\072\041\ufffa\054\ufffa\055\ufffa\056\ufffa\060" +
    "\ufffa\062\ufffa\063\ufffa\064\ufffa\066\ufffa\067\ufffa\070\ufffa" +
    "\071\ufffa\072\ufffa\073\ufffa\074\ufffa\075\ufffa\076\ufffa\077" +
    "\ufffa\101\ufffa\102\ufffa\103\ufffa\104\ufffa\106\ufffa\107\ufffa" +
    "\110\ufffa\111\ufffa\112\ufffa\113\ufffa\001\002\000\072\041" +
    "\ufff8\054\ufff8\055\ufff8\056\ufff8\060\ufff8\062\ufff8\063\ufff8" +
    "\064\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8\073" +
    "\ufff8\074\ufff8\075\ufff8\076\ufff8\077\ufff8\101\ufff8\102\ufff8" +
    "\103\ufff8\104\ufff8\106\ufff8\107\ufff8\110\ufff8\111\ufff8\112" +
    "\ufff8\113\ufff8\001\002\000\072\041\ufff6\054\ufff6\055\ufff6" +
    "\056\ufff6\060\ufff6\062\ufff6\063\ufff6\064\ufff6\066\ufff6\067" +
    "\ufff6\070\ufff6\071\ufff6\072\ufff6\073\ufff6\074\ufff6\075\ufff6" +
    "\076\ufff6\077\ufff6\101\ufff6\102\ufff6\103\ufff6\104\ufff6\106" +
    "\ufff6\107\ufff6\110\ufff6\111\ufff6\112\ufff6\113\ufff6\001\002" +
    "\000\004\025\317\001\002\000\040\045\043\047\012\050" +
    "\055\051\052\052\056\053\024\061\014\063\010\065\036" +
    "\067\017\100\051\105\021\116\046\117\034\120\063\001" +
    "\002\000\060\055\125\056\321\063\114\066\105\067\124" +
    "\070\121\071\122\072\115\073\111\074\103\075\120\076" +
    "\107\077\112\101\102\102\131\103\104\104\106\106\116" +
    "\107\127\110\123\111\110\112\113\113\130\001\002\000" +
    "\062\006\050\015\030\020\041\027\015\032\033\033\057" +
    "\034\016\040\064\041\231\045\043\047\012\050\055\051" +
    "\052\052\056\053\024\061\014\063\010\065\036\067\017" +
    "\100\051\105\021\116\046\117\034\120\063\001\002\000" +
    "\066\006\uff82\014\uff82\015\uff82\020\uff82\027\uff82\032\uff82" +
    "\033\uff82\034\uff82\040\uff82\041\uff82\045\uff82\047\uff82\050" +
    "\uff82\051\uff82\052\uff82\053\uff82\061\uff82\063\uff82\065\uff82" +
    "\067\uff82\100\uff82\105\uff82\115\uff82\116\uff82\117\uff82\120" +
    "\uff82\001\002\000\072\041\uffea\054\uffea\055\uffea\056\uffea" +
    "\060\uffea\062\uffea\063\uffea\064\uffea\066\uffea\067\uffea\070" +
    "\uffea\071\uffea\072\uffea\073\uffea\074\uffea\075\uffea\076\uffea" +
    "\077\uffea\101\uffea\102\uffea\103\uffea\104\uffea\106\uffea\107" +
    "\uffea\110\uffea\111\uffea\112\uffea\113\uffea\001\002\000\004" +
    "\060\327\001\002\000\062\054\210\055\125\060\326\063" +
    "\114\066\105\067\124\070\121\071\122\072\115\073\111" +
    "\074\103\075\120\076\107\077\112\101\102\102\131\103" +
    "\104\104\106\106\116\107\127\110\123\111\110\112\113" +
    "\113\130\001\002\000\072\041\uffc8\054\uffc8\055\uffc8\056" +
    "\uffc8\060\uffc8\062\uffc8\063\uffc8\064\uffc8\066\uffc8\067\uffc8" +
    "\070\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076" +
    "\uffc8\077\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8\106\uffc8" +
    "\107\uffc8\110\uffc8\111\uffc8\112\uffc8\113\uffc8\001\002\000" +
    "\072\041\uffe9\054\uffe9\055\uffe9\056\uffe9\060\uffe9\062\uffe9" +
    "\063\uffe9\064\uffe9\066\uffe9\067\uffe9\070\uffe9\071\uffe9\072" +
    "\uffe9\073\uffe9\074\uffe9\075\uffe9\076\uffe9\077\uffe9\101\uffe9" +
    "\102\uffe9\103\uffe9\104\uffe9\106\uffe9\107\uffe9\110\uffe9\111" +
    "\uffe9\112\uffe9\113\uffe9\001\002\000\072\041\uffe4\054\uffe4" +
    "\055\uffe4\056\uffe4\060\uffe4\062\uffe4\063\uffe4\064\uffe4\066" +
    "\uffe4\067\uffe4\070\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4" +
    "\075\uffe4\076\uffe4\077\uffe4\101\uffe4\102\uffe4\103\uffe4\104" +
    "\uffe4\106\uffe4\107\uffe4\110\uffe4\111\uffe4\112\uffe4\113\uffe4" +
    "\001\002\000\004\062\335\001\002\000\062\054\333\055" +
    "\125\062\uffe2\063\114\066\105\067\124\070\121\071\122" +
    "\072\115\073\111\074\103\075\120\076\107\077\112\101" +
    "\102\102\131\103\104\104\106\106\116\107\127\110\123" +
    "\111\110\112\113\113\130\001\002\000\040\045\043\047" +
    "\012\050\055\051\052\052\056\053\024\061\014\063\010" +
    "\065\036\067\017\100\051\105\021\116\046\117\034\120" +
    "\063\001\002\000\004\062\uffe1\001\002\000\072\041\uffe3" +
    "\054\uffe3\055\uffe3\056\uffe3\060\uffe3\062\uffe3\063\uffe3\064" +
    "\uffe3\066\uffe3\067\uffe3\070\uffe3\071\uffe3\072\uffe3\073\uffe3" +
    "\074\uffe3\075\uffe3\076\uffe3\077\uffe3\101\uffe3\102\uffe3\103" +
    "\uffe3\104\uffe3\106\uffe3\107\uffe3\110\uffe3\111\uffe3\112\uffe3" +
    "\113\uffe3\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\334\000\070\002\036\003\005\007\012\010\030\015" +
    "\024\017\060\020\034\026\064\027\043\030\046\031\031" +
    "\032\037\033\061\035\025\036\057\037\041\040\010\043" +
    "\017\046\052\050\026\051\003\056\053\057\044\060\021" +
    "\061\006\062\022\064\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\002\036\003\005\010\331\026\064\027\043\030\046\031" +
    "\031\043\067\046\052\047\330\050\026\051\003\056\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\002\036\003\005\010\324\026\064\027\043" +
    "\030\046\031\031\043\067\046\052\050\026\051\003\053" +
    "\323\056\053\001\001\000\002\001\001\000\004\043\315" +
    "\001\001\000\002\001\001\000\006\016\306\025\070\001" +
    "\001\000\032\002\036\003\005\010\305\026\064\027\043" +
    "\030\046\031\031\043\067\046\052\050\026\051\003\056" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\002\036\003\005\010\275\026\064\027\043" +
    "\030\046\031\031\043\067\046\052\050\026\051\003\056" +
    "\053\001\001\000\004\055\260\001\001\000\002\001\001" +
    "\000\034\002\036\003\005\010\274\026\064\027\043\030" +
    "\046\031\031\043\067\046\052\050\026\051\003\053\273" +
    "\056\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\002\036\003\005\010\265\026\064\027\043\030\046" +
    "\031\031\043\067\044\263\045\264\046\052\050\026\051" +
    "\003\056\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\250\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\002\036\003\005\010\245\026" +
    "\064\027\043\030\046\031\031\043\067\046\052\050\026" +
    "\051\003\056\053\001\001\000\032\002\036\003\005\010" +
    "\244\026\064\027\043\030\046\031\031\043\067\046\052" +
    "\050\026\051\003\056\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\002\036\003\005\010\065\026\064\027\043\030\046\031" +
    "\031\043\067\046\052\050\026\051\003\054\066\056\053" +
    "\001\001\000\002\001\001\000\004\055\125\001\001\000" +
    "\002\001\001\000\004\025\070\001\001\000\002\001\001" +
    "\000\040\002\036\003\005\010\076\022\072\023\074\024" +
    "\077\026\064\027\043\030\046\031\031\043\067\046\052" +
    "\050\026\051\003\056\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\002\036\003\005\010\174\026\064\027\043\030\046" +
    "\031\031\043\067\046\052\050\026\051\003\056\053\001" +
    "\001\000\032\002\036\003\005\010\173\026\064\027\043" +
    "\030\046\031\031\043\067\046\052\050\026\051\003\056" +
    "\053\001\001\000\032\002\036\003\005\010\172\026\064" +
    "\027\043\030\046\031\031\043\067\046\052\050\026\051" +
    "\003\056\053\001\001\000\032\002\036\003\005\010\171" +
    "\026\064\027\043\030\046\031\031\043\067\046\052\050" +
    "\026\051\003\056\053\001\001\000\032\002\036\003\005" +
    "\010\170\026\064\027\043\030\046\031\031\043\067\046" +
    "\052\050\026\051\003\056\053\001\001\000\032\002\036" +
    "\003\005\010\167\026\064\027\043\030\046\031\031\043" +
    "\067\046\052\050\026\051\003\056\053\001\001\000\032" +
    "\002\036\003\005\010\166\026\064\027\043\030\046\031" +
    "\031\043\067\046\052\050\026\051\003\056\053\001\001" +
    "\000\032\002\036\003\005\010\165\026\064\027\043\030" +
    "\046\031\031\043\067\046\052\050\026\051\003\056\053" +
    "\001\001\000\032\002\036\003\005\010\164\026\064\027" +
    "\043\030\046\031\031\043\067\046\052\050\026\051\003" +
    "\056\053\001\001\000\032\002\036\003\005\010\163\026" +
    "\064\027\043\030\046\031\031\043\067\046\052\050\026" +
    "\051\003\056\053\001\001\000\034\002\036\003\005\010" +
    "\147\011\150\026\064\027\043\030\046\031\031\043\067" +
    "\046\052\050\026\051\003\056\053\001\001\000\032\002" +
    "\036\003\005\010\145\026\064\027\043\030\046\031\031" +
    "\043\067\046\052\050\026\051\003\056\053\001\001\000" +
    "\032\002\036\003\005\010\144\026\064\027\043\030\046" +
    "\031\031\043\067\046\052\050\026\051\003\056\053\001" +
    "\001\000\040\002\036\003\005\010\076\022\072\023\074" +
    "\024\143\026\064\027\043\030\046\031\031\043\067\046" +
    "\052\050\026\051\003\056\053\001\001\000\032\002\036" +
    "\003\005\010\142\026\064\027\043\030\046\031\031\043" +
    "\067\046\052\050\026\051\003\056\053\001\001\000\032" +
    "\002\036\003\005\010\141\026\064\027\043\030\046\031" +
    "\031\043\067\046\052\050\026\051\003\056\053\001\001" +
    "\000\032\002\036\003\005\010\140\026\064\027\043\030" +
    "\046\031\031\043\067\046\052\050\026\051\003\056\053" +
    "\001\001\000\032\002\036\003\005\010\137\026\064\027" +
    "\043\030\046\031\031\043\067\046\052\050\026\051\003" +
    "\056\053\001\001\000\032\002\036\003\005\010\136\026" +
    "\064\027\043\030\046\031\031\043\067\046\052\050\026" +
    "\051\003\056\053\001\001\000\004\043\134\001\001\000" +
    "\002\001\001\000\032\002\036\003\005\010\133\026\064" +
    "\027\043\030\046\031\031\043\067\046\052\050\026\051" +
    "\003\056\053\001\001\000\032\002\036\003\005\010\132" +
    "\026\064\027\043\030\046\031\031\043\067\046\052\050" +
    "\026\051\003\056\053\001\001\000\032\002\036\003\005" +
    "\010\131\026\064\027\043\030\046\031\031\043\067\046" +
    "\052\050\026\051\003\056\053\001\001\000\004\055\125" +
    "\001\001\000\004\055\125\001\001\000\004\055\125\001" +
    "\001\000\004\025\135\001\001\000\002\001\001\000\004" +
    "\055\125\001\001\000\004\055\125\001\001\000\004\055" +
    "\125\001\001\000\004\055\125\001\001\000\004\055\125" +
    "\001\001\000\002\001\001\000\004\055\125\001\001\000" +
    "\004\055\125\001\001\000\034\002\036\003\005\010\156" +
    "\012\162\026\064\027\043\030\046\031\031\043\067\046" +
    "\052\050\026\051\003\056\053\001\001\000\004\055\125" +
    "\001\001\000\002\001\001\000\004\055\152\001\001\000" +
    "\002\001\001\000\034\002\036\003\005\010\156\012\155" +
    "\026\064\027\043\030\046\031\031\043\067\046\052\050" +
    "\026\051\003\056\053\001\001\000\032\002\036\003\005" +
    "\010\161\026\064\027\043\030\046\031\031\043\067\046" +
    "\052\050\026\051\003\056\053\001\001\000\002\001\001" +
    "\000\004\055\125\001\001\000\032\002\036\003\005\010" +
    "\160\026\064\027\043\030\046\031\031\043\067\046\052" +
    "\050\026\051\003\056\053\001\001\000\004\055\125\001" +
    "\001\000\004\055\125\001\001\000\002\001\001\000\004" +
    "\055\125\001\001\000\004\055\125\001\001\000\004\055" +
    "\125\001\001\000\004\055\125\001\001\000\004\055\125" +
    "\001\001\000\004\055\125\001\001\000\004\055\125\001" +
    "\001\000\004\055\125\001\001\000\004\055\125\001\001" +
    "\000\004\055\125\001\001\000\032\002\036\003\005\010" +
    "\176\026\064\027\043\030\046\031\031\043\067\046\052" +
    "\050\026\051\003\056\053\001\001\000\004\055\125\001" +
    "\001\000\006\022\072\023\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\002\036\003\005\010\065\026" +
    "\064\027\043\030\046\031\031\043\067\046\052\050\026" +
    "\051\003\054\203\056\053\001\001\000\002\001\001\000" +
    "\034\002\036\003\005\010\206\026\064\027\043\030\046" +
    "\031\031\043\067\046\052\050\026\051\003\053\205\056" +
    "\053\001\001\000\002\001\001\000\004\055\125\001\001" +
    "\000\034\002\036\003\005\010\211\026\064\027\043\030" +
    "\046\031\031\043\067\046\052\050\026\051\003\052\210" +
    "\056\053\001\001\000\002\001\001\000\004\055\125\001" +
    "\001\000\034\002\036\003\005\010\211\026\064\027\043" +
    "\030\046\031\031\043\067\046\052\050\026\051\003\052" +
    "\213\056\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\063\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\063\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\065\225\001\001\000" +
    "\066\002\036\003\005\007\012\010\030\015\024\017\060" +
    "\020\034\026\064\027\043\030\046\031\031\032\037\033" +
    "\231\034\232\035\226\036\057\037\041\040\010\042\227" +
    "\043\017\046\052\050\026\051\003\056\053\057\044\062" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\066\002\036\003\005\007\012\010\030\015\024" +
    "\017\060\020\034\026\064\027\043\030\046\031\031\032" +
    "\037\033\231\034\236\035\226\036\057\037\041\040\010" +
    "\041\235\043\017\046\052\050\026\051\003\056\053\057" +
    "\044\062\022\001\001\000\002\001\001\000\066\002\036" +
    "\003\005\007\012\010\030\015\024\017\060\020\034\026" +
    "\064\027\043\030\046\031\031\032\037\033\231\034\236" +
    "\035\226\036\057\037\041\040\010\041\237\043\017\046" +
    "\052\050\026\051\003\056\053\057\044\062\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\066\242\001" +
    "\001\000\066\002\036\003\005\007\012\010\030\015\024" +
    "\017\060\020\034\026\064\027\043\030\046\031\031\032" +
    "\037\033\231\034\232\035\226\036\057\037\041\040\010" +
    "\042\243\043\017\046\052\050\026\051\003\056\053\057" +
    "\044\062\022\001\001\000\002\001\001\000\004\055\125" +
    "\001\001\000\004\055\125\001\001\000\066\002\036\003" +
    "\005\007\012\010\030\015\024\017\060\020\034\026\064" +
    "\027\043\030\046\031\031\032\037\033\231\034\232\035" +
    "\226\036\057\037\041\040\010\042\247\043\017\046\052" +
    "\050\026\051\003\056\053\057\044\062\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\002\036\003\005" +
    "\010\255\026\064\027\043\030\046\031\031\043\256\046" +
    "\052\050\026\051\003\056\053\057\254\001\001\000\032" +
    "\002\036\003\005\010\253\026\064\027\043\030\046\031" +
    "\031\043\067\046\052\050\026\051\003\056\053\001\001" +
    "\000\004\055\125\001\001\000\004\016\261\001\001\000" +
    "\004\055\260\001\001\000\006\016\257\025\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\125\001\001\000\032\002\036\003\005\010\267\026" +
    "\064\027\043\030\046\031\031\043\067\046\052\050\026" +
    "\051\003\056\053\001\001\000\004\055\125\001\001\000" +
    "\036\002\036\003\005\010\265\026\064\027\043\030\046" +
    "\031\031\043\067\044\271\045\264\046\052\050\026\051" +
    "\003\056\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\125\001\001\000\004\055" +
    "\125\001\001\000\066\002\036\003\005\007\012\010\030" +
    "\015\024\017\060\020\034\026\064\027\043\030\046\031" +
    "\031\032\037\033\231\034\232\035\226\036\057\037\041" +
    "\040\010\042\277\043\017\046\052\050\026\051\003\056" +
    "\053\057\044\062\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\066\002\036\003\005\007\012\010\030\015" +
    "\024\017\060\020\034\026\064\027\043\030\046\031\031" +
    "\032\037\033\231\034\232\035\226\036\057\037\041\040" +
    "\010\042\302\043\017\046\052\050\026\051\003\056\053" +
    "\057\044\062\022\001\001\000\002\001\001\000\066\002" +
    "\036\003\005\007\012\010\030\015\024\017\060\020\034" +
    "\026\064\027\043\030\046\031\031\032\037\033\061\035" +
    "\025\036\057\037\041\040\010\043\017\046\052\050\026" +
    "\051\003\056\053\057\044\060\021\061\304\062\022\001" +
    "\001\000\002\001\001\000\004\055\125\001\001\000\002" +
    "\001\001\000\034\002\036\003\005\010\311\026\064\027" +
    "\043\030\046\031\031\043\067\046\052\050\026\051\003" +
    "\053\310\056\053\001\001\000\002\001\001\000\004\055" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\002\036\003\005\010" +
    "\317\026\064\027\043\030\046\031\031\043\067\046\052" +
    "\050\026\051\003\056\053\001\001\000\004\055\125\001" +
    "\001\000\066\002\036\003\005\007\012\010\030\015\024" +
    "\017\060\020\034\026\064\027\043\030\046\031\031\032" +
    "\037\033\231\034\232\035\226\036\057\037\041\040\010" +
    "\042\321\043\017\046\052\050\026\051\003\056\053\057" +
    "\044\062\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\055\125\001\001\000\034\002\036\003\005\010" +
    "\331\026\064\027\043\030\046\031\031\043\067\046\052" +
    "\047\333\050\026\051\003\056\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    //MANTENGO UN STACK DE GENERADORES Y PUSHEO EL PRIMERO
    ParserStatus.StackGenerador.push(new Generador());

    }





    public void syntax_error(Symbol s){
        System.out.println("Error de sintaxis "+s.sym+" en la linea "+(s.left+1)+" y la columna "+s.right);
        System.out.println(s.value);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error de sintaxis "+s.sym);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // func_def ::= DEF name LPAREN RPAREN COLON NT$1 suite 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateFunctionDef(d,n,null,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_def",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$1 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 RuleGenerator.generateNewScope(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // func_def ::= DEF name LPAREN func_parameters RPAREN COLON NT$0 suite 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object fp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateFunctionDef(d,n,fp,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_def",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$0 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object fp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 RuleGenerator.generateNewScope(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // func_parameters ::= NAME COMA func_parameters 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateFunParams(n,fp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_parameters",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // func_parameters ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateFunParams(n,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_parameters",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // while_stmt ::= WHILE expression COLON suite 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=RuleGenerator.generateWhileStatement(e,c,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // for_stmt ::= FOR name IN expression COLON suite 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=RuleGenerator.generateForStatement(n,exp,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // if_stmt ::= IF expression COLON suite ELSE COLON suite 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateIfStatement(e,c1,s1,c2,s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // if_stmt ::= IF expression COLON suite 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateIfStatement(e,c,s1,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // suite ::= NEWLINE INDENT stmt_list DEDENT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("suite",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // suite ::= stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("suite",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // stmt_list ::= stmt stmt_list 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.joinBloques(s,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // stmt_list ::= stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // compound_stmt ::= func_def 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // compound_stmt ::= for_stmt 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // compound_stmt ::= while_stmt 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // compound_stmt ::= if_stmt 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // stmt ::= compound_stmt 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // stmt ::= small_stmt NEWLINE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // small_stmt ::= flow_stmt 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // small_stmt ::= print_stmt 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // small_stmt ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // small_stmt ::= expr_stmt 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // flow_stmt ::= return_stmt 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // flow_stmt ::= CONTINUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // flow_stmt ::= BREAK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // func_call ::= name trailer 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateFunctionCall(n,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // func_call ::= expression DOT name trailer 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateNameFunctionCall(e,d,n,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // trailer ::= LPAREN argument_list RPAREN 
            {
              Object RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = al; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trailer",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // trailer ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trailer",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // argument_list ::= named_argument_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // argument_list ::= expression COMA argument_list 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateArguments(c,e,al); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // argument_list ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateArguments(null,e,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // named_argument_list ::= named_argument COMA named_argument_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("named_argument_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // named_argument_list ::= named_argument 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("named_argument_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // named_argument ::= NAME ASSIGN expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("named_argument",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr_stmt ::= namelist ASSIGN expression 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int auleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int auright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object au = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateUnpackAssignation(n,au,tr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr_stmt ::= namelist ASSIGN tuplemaker 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int auleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int auright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object au = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateTupleMakerAssignation(n,au,tr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr_stmt ::= assign_exprsub ASSIGN expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int auleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int auright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object au = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSubscriptAssignation(e,au,exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr_stmt ::= name ASSIGN tuplemaker 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int auleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int auright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object au = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateTupleMakerSingleAssignation(n,au,tr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr_stmt ::= name ASSIGN expression 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int auleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int auright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object au = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateAssignation(n,au,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // namelist ::= assign_exprsub namecoma 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.joinNames(e,nc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namelist",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // namelist ::= name namecoma 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.joinNames(n,nc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namelist",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // namecoma ::= COMA assign_exprsub namecoma 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.joinNames(n,nc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namecoma",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // namecoma ::= COMA name namecoma 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.joinNames(n,nc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namecoma",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // namecoma ::= COMA assign_exprsub 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.addSetIndex(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namecoma",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // namecoma ::= COMA name 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                ParseResult pr = RuleGenerator.storeName(n);
                                                                pr.argumentos = 1;
                                                                RESULT = pr;
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namecoma",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // assign_exprsub ::= expression subscript 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int subleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sub = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSubscriptForAssign(exp1,sub); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_exprsub",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // return_stmt ::= RETURN tuplemaker 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateReturnTup(r,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // return_stmt ::= RETURN expression 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateReturnExp(r,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // return_stmt ::= RETURN 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateReturnEmpty(r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // print_stmt ::= PRINT printtrail 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generatePrintNewline(p,n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // printtrail ::= expression COMA printtrail 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generatePrint(e,c,p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printtrail",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // printtrail ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generatePrint(e,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printtrail",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= NOTB expression 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateUnaryOperation(op,a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= NOT expression 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateUnaryOperation(op,a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= expression EXP expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= expression DIVE expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= expression MOD expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= expression DIV expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= expression MULT expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= expression MINUS expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= expression PLUS expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= expression SHIFTR expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= expression SHIFTL expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= expression ANDB expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= expression XORB expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= expression ORB expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= expression EQUALS expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= expression DIFF expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= expression MAJOREQ expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= expression MINOREQ expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= expression MAJOR expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= expression MINOR expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= expression AND expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= expression OR expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= exprsub 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= func_call 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= tuple 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= list 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= dictionary 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= atom 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.loadNameOrConst(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exprsub ::= expression subscript 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int subleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sub = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateFullSubscript(exp1,sub); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprsub",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // slice_rest ::= COLON 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_rest",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // slice_rest ::= COLON expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_rest",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // slice_rest ::= expression COLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_rest",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // slice_rest ::= expression COLON expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_rest",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // slice_rest ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_rest",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // slice_expression ::= COLON 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // slice_expression ::= COLON slice_rest 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // slice_expression ::= expression COLON slice_rest 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // slice_expression ::= expression COLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // slice_expression ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // subscript ::= LBRACKET slice_expression RBRACKET subscript 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSubscript(l,e,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subscript",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // subscript ::= LBRACKET slice_expression RBRACKET 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateSubscript(l,e,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subscript",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // dictorsetmaker ::= dictorsetelement COMA dictorsetmaker 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e1,c,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // dictorsetmaker ::= dictorsetelement 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(d,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // dictorsetelement ::= expression COLON expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateDictItem(e1,c,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dictorsetelement",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // dictionary ::= LCURLY RCURLY 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateListTupleDict(c,null,OpCode.CREATE_DICT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dictionary",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dictionary ::= LCURLY dictorsetmaker RCURLY 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateListTupleDict(c,e,OpCode.CREATE_DICT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dictionary",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // listmaker ::= expression COMA listmaker 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e,c,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listmaker",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // listmaker ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listmaker",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // list ::= LBRACKET listmaker RBRACKET 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateListTupleDict(b,l,OpCode.CREATE_LIST);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // list ::= LBRACKET RBRACKET 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateListTupleDict(b,null,OpCode.CREATE_LIST); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tuplemaker ::= expression COMA tupletrail 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e,c,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuplemaker",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tuplemaker ::= expression COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuplemaker",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tupletrail ::= expression COMA tupletrail 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e,c,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tupletrail",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tupletrail ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tupletrail",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tuple ::= LPAREN tuplemaker RPAREN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateListTupleDict(b,l,OpCode.CREATE_TUPLE);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tuple ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateListTupleDict(b,null,OpCode.CREATE_TUPLE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // atom ::= constant 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // atom ::= name 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // name ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = RuleGenerator.generateName((LexerToken)n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // constant ::= FALSE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // constant ::= TRUE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // constant ::= NONE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // constant ::= STRING3 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constant ::= STRING 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constant ::= float 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constant ::= long 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constant ::= integer 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // float ::= MINUS FLOAT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateMinusConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("float",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // float ::= FLOAT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("float",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // long ::= MINUS LONG 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateMinusConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("long",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // long ::= LONG 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("long",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // integer ::= MINUS INTEGER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateMinusConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // integer ::= INTEGER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // single_input ::= compound_stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("single_input",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // single_input ::= small_stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("single_input",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // input ::= single_input NEWLINE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // input ::= single_input NEWLINE input 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.joinBloques(s,i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= input 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                System.out.println("EL PROGRAMA ESTA BIEN");
                                Bloque b = ParseResult.getAs(i);
                                Code code = ParserStatus.StackGenerador.peek().crearCodigo("Compilador","Compilador",b);
                                RESULT = code;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

