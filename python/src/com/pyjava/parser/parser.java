
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jul 13 22:38:09 UYT 2015
//----------------------------------------------------

package com.pyjava.parser;

import com.pyjava.core.exceptions.PyException;
import com.pyjava.core.runtime.*;
import java_cup.runtime.*;
import com.pyjava.parser.codegen.*;
import com.pyjava.core.*;
import java.util.Deque;
import java.util.LinkedList;
import java.util.Scanner;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jul 13 22:38:09 UYT 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\054\006\000\002\002\004\000\002\025" +
    "\003\000\002\025\004\000\002\027\003\000\002\027\004" +
    "\000\002\026\003\000\002\026\004\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\042\003\000\002\003\003\000\002\003\003" +
    "\000\002\050\004\000\002\050\005\000\002\051\003\000" +
    "\002\051\005\000\002\052\004\000\002\052\005\000\002" +
    "\047\004\000\002\047\005\000\002\046\003\000\002\046" +
    "\005\000\002\045\005\000\002\045\004\000\002\044\005" +
    "\000\002\043\003\000\002\043\005\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\004\000" +
    "\002\010\004\000\002\053\003\000\002\053\005\000\002" +
    "\007\004\000\002\011\004\000\002\011\005\000\002\012" +
    "\003\000\002\012\004\000\002\012\004\000\002\012\005" +
    "\000\002\013\003\000\002\013\004\000\002\014\004\000" +
    "\002\014\005\000\002\015\004\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\020\005\000\002\021" +
    "\003\000\002\021\005\000\002\022\003\000\002\022\005" +
    "\000\002\022\003\000\002\023\004\000\002\023\005\000" +
    "\002\024\006\000\002\024\004\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\032\004" +
    "\000\002\032\004\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\040\003\000\002" +
    "\040\004\000\002\041\003\000\002\041\006\000\002\034" +
    "\007\000\002\034\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\004\045\010\001\002\000\004\046\211\001" +
    "\002\000\004\002\210\001\002\000\006\046\204\054\203" +
    "\001\002\000\004\041\011\001\002\000\074\041\ufff1\046" +
    "\ufff1\054\ufff1\055\ufff1\056\ufff1\060\ufff1\061\ufff1\062\ufff1" +
    "\064\ufff1\066\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1\073" +
    "\ufff1\074\ufff1\075\ufff1\076\ufff1\077\ufff1\101\ufff1\102\ufff1" +
    "\103\ufff1\104\ufff1\106\ufff1\107\ufff1\110\ufff1\111\ufff1\112" +
    "\ufff1\113\ufff1\001\002\000\004\040\013\001\002\000\004" +
    "\041\201\001\002\000\040\045\010\047\041\050\014\051" +
    "\032\052\030\053\031\061\022\063\021\065\025\067\036" +
    "\100\027\105\017\116\023\117\020\120\035\001\002\000" +
    "\070\041\ufffd\054\ufffd\055\ufffd\056\ufffd\060\ufffd\062\ufffd" +
    "\064\ufffd\066\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\073" +
    "\ufffd\074\ufffd\075\ufffd\076\ufffd\077\ufffd\101\ufffd\102\ufffd" +
    "\103\ufffd\104\ufffd\106\ufffd\107\ufffd\110\ufffd\111\ufffd\112" +
    "\ufffd\113\ufffd\001\002\000\070\041\uffdf\054\uffdf\055\uffdf" +
    "\056\uffdf\060\uffdf\062\uffdf\064\uffdf\066\uffdf\067\uffdf\070" +
    "\uffdf\071\uffdf\072\uffdf\073\uffdf\074\uffdf\075\uffdf\076\uffdf" +
    "\077\uffdf\101\uffdf\102\uffdf\103\uffdf\104\uffdf\106\uffdf\107" +
    "\uffdf\110\uffdf\111\uffdf\112\uffdf\113\uffdf\001\002\000\070" +
    "\041\uffef\054\uffef\055\uffef\056\uffef\060\uffef\062\uffef\064" +
    "\uffef\066\uffef\067\uffef\070\uffef\071\uffef\072\uffef\073\uffef" +
    "\074\uffef\075\uffef\076\uffef\077\uffef\101\uffef\102\uffef\103" +
    "\uffef\104\uffef\106\uffef\107\uffef\110\uffef\111\uffef\112\uffef" +
    "\113\uffef\001\002\000\040\045\010\047\041\050\014\051" +
    "\032\052\030\053\031\061\022\063\021\065\025\067\036" +
    "\100\027\105\017\116\023\117\020\120\035\001\002\000" +
    "\070\041\ufff3\054\ufff3\055\ufff3\056\ufff3\060\ufff3\062\ufff3" +
    "\064\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3\073" +
    "\ufff3\074\ufff3\075\ufff3\076\ufff3\077\ufff3\101\ufff3\102\ufff3" +
    "\103\ufff3\104\ufff3\106\ufff3\107\ufff3\110\ufff3\111\ufff3\112" +
    "\ufff3\113\ufff3\001\002\000\042\045\010\047\041\050\014" +
    "\051\032\052\030\053\031\061\022\062\172\063\021\065" +
    "\025\067\036\100\027\105\017\116\023\117\020\120\035" +
    "\001\002\000\042\045\010\047\041\050\014\051\032\052" +
    "\030\053\031\060\160\061\022\063\021\065\025\067\036" +
    "\100\027\105\017\116\023\117\020\120\035\001\002\000" +
    "\070\041\ufff4\054\ufff4\055\ufff4\056\ufff4\060\ufff4\062\ufff4" +
    "\064\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4\072\ufff4\073" +
    "\ufff4\074\ufff4\075\ufff4\076\ufff4\077\ufff4\101\ufff4\102\ufff4" +
    "\103\ufff4\104\ufff4\106\ufff4\107\ufff4\110\ufff4\111\ufff4\112" +
    "\ufff4\113\ufff4\001\002\000\070\041\uffde\054\uffde\055\uffde" +
    "\056\uffde\060\uffde\062\uffde\064\uffde\066\uffde\067\uffde\070" +
    "\uffde\071\uffde\072\uffde\073\uffde\074\uffde\075\uffde\076\uffde" +
    "\077\uffde\101\uffde\102\uffde\103\uffde\104\uffde\106\uffde\107" +
    "\uffde\110\uffde\111\uffde\112\uffde\113\uffde\001\002\000\042" +
    "\045\010\047\041\050\014\051\032\052\030\053\031\061" +
    "\022\063\021\064\147\065\025\067\036\100\027\105\017" +
    "\116\023\117\020\120\035\001\002\000\070\041\uffdb\054" +
    "\uffdb\055\uffdb\056\uffdb\060\uffdb\062\uffdb\064\uffdb\066\uffdb" +
    "\067\uffdb\070\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb\075" +
    "\uffdb\076\uffdb\077\uffdb\101\uffdb\102\uffdb\103\uffdb\104\uffdb" +
    "\106\uffdb\107\uffdb\110\uffdb\111\uffdb\112\uffdb\113\uffdb\001" +
    "\002\000\040\045\010\047\041\050\014\051\032\052\030" +
    "\053\031\061\022\063\021\065\025\067\036\100\027\105" +
    "\017\116\023\117\020\120\035\001\002\000\070\041\ufff6" +
    "\054\ufff6\055\ufff6\056\ufff6\060\ufff6\062\ufff6\064\ufff6\066" +
    "\ufff6\067\ufff6\070\ufff6\071\ufff6\072\ufff6\073\ufff6\074\ufff6" +
    "\075\ufff6\076\ufff6\077\ufff6\101\ufff6\102\ufff6\103\ufff6\104" +
    "\ufff6\106\ufff6\107\ufff6\110\ufff6\111\ufff6\112\ufff6\113\ufff6" +
    "\001\002\000\070\041\ufff5\054\ufff5\055\ufff5\056\ufff5\060" +
    "\ufff5\062\ufff5\064\ufff5\066\ufff5\067\ufff5\070\ufff5\071\ufff5" +
    "\072\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5\077\ufff5\101" +
    "\ufff5\102\ufff5\103\ufff5\104\ufff5\106\ufff5\107\ufff5\110\ufff5" +
    "\111\ufff5\112\ufff5\113\ufff5\001\002\000\070\041\ufffb\054" +
    "\ufffb\055\ufffb\056\ufffb\060\ufffb\062\ufffb\064\ufffb\066\ufffb" +
    "\067\ufffb\070\ufffb\071\ufffb\072\ufffb\073\ufffb\074\ufffb\075" +
    "\ufffb\076\ufffb\077\ufffb\101\ufffb\102\ufffb\103\ufffb\104\ufffb" +
    "\106\ufffb\107\ufffb\110\ufffb\111\ufffb\112\ufffb\113\ufffb\001" +
    "\002\000\060\041\uffc3\054\144\055\101\066\062\067\100" +
    "\070\075\071\076\072\071\073\067\074\060\075\074\076" +
    "\064\077\066\101\057\102\104\103\061\104\063\106\072" +
    "\107\102\110\077\111\065\112\070\113\103\001\002\000" +
    "\070\041\uffdc\054\uffdc\055\uffdc\056\uffdc\060\uffdc\062\uffdc" +
    "\064\uffdc\066\uffdc\067\uffdc\070\uffdc\071\uffdc\072\uffdc\073" +
    "\uffdc\074\uffdc\075\uffdc\076\uffdc\077\uffdc\101\uffdc\102\uffdc" +
    "\103\uffdc\104\uffdc\106\uffdc\107\uffdc\110\uffdc\111\uffdc\112" +
    "\uffdc\113\uffdc\001\002\000\070\041\ufff2\054\ufff2\055\ufff2" +
    "\056\ufff2\060\ufff2\062\ufff2\064\ufff2\066\ufff2\067\ufff2\070" +
    "\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2" +
    "\077\ufff2\101\ufff2\102\ufff2\103\ufff2\104\ufff2\106\ufff2\107" +
    "\ufff2\110\ufff2\111\ufff2\112\ufff2\113\ufff2\001\002\000\010" +
    "\047\141\050\142\051\143\001\002\000\070\041\ufff8\054" +
    "\ufff8\055\ufff8\056\ufff8\060\ufff8\062\ufff8\064\ufff8\066\ufff8" +
    "\067\ufff8\070\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075" +
    "\ufff8\076\ufff8\077\ufff8\101\ufff8\102\ufff8\103\ufff8\104\ufff8" +
    "\106\ufff8\107\ufff8\110\ufff8\111\ufff8\112\ufff8\113\ufff8\001" +
    "\002\000\070\041\ufff9\054\ufff9\055\ufff9\056\ufff9\060\ufff9" +
    "\062\ufff9\064\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9\072" +
    "\ufff9\073\ufff9\074\ufff9\075\ufff9\076\ufff9\077\ufff9\101\ufff9" +
    "\102\ufff9\103\ufff9\104\ufff9\106\ufff9\107\ufff9\110\ufff9\111" +
    "\ufff9\112\ufff9\113\ufff9\001\002\000\070\041\uffff\054\uffff" +
    "\055\uffff\056\uffff\060\uffff\062\uffff\064\uffff\066\uffff\067" +
    "\uffff\070\uffff\071\uffff\072\uffff\073\uffff\074\uffff\075\uffff" +
    "\076\uffff\077\uffff\101\uffff\102\uffff\103\uffff\104\uffff\106" +
    "\uffff\107\uffff\110\uffff\111\uffff\112\uffff\113\uffff\001\002" +
    "\000\070\041\uffdd\054\uffdd\055\uffdd\056\uffdd\060\uffdd\062" +
    "\uffdd\064\uffdd\066\uffdd\067\uffdd\070\uffdd\071\uffdd\072\uffdd" +
    "\073\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd\101\uffdd\102" +
    "\uffdd\103\uffdd\104\uffdd\106\uffdd\107\uffdd\110\uffdd\111\uffdd" +
    "\112\uffdd\113\uffdd\001\002\000\004\041\uffc1\001\002\000" +
    "\070\041\ufff7\054\ufff7\055\ufff7\056\ufff7\060\ufff7\062\ufff7" +
    "\064\ufff7\066\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7\073" +
    "\ufff7\074\ufff7\075\ufff7\076\ufff7\077\ufff7\101\ufff7\102\ufff7" +
    "\103\ufff7\104\ufff7\106\ufff7\107\ufff7\110\ufff7\111\ufff7\112" +
    "\ufff7\113\ufff7\001\002\000\072\041\ufff0\054\ufff0\055\ufff0" +
    "\056\ufff0\060\ufff0\061\047\062\ufff0\064\ufff0\066\ufff0\067" +
    "\ufff0\070\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0\075\ufff0" +
    "\076\ufff0\077\ufff0\101\ufff0\102\ufff0\103\ufff0\104\ufff0\106" +
    "\ufff0\107\ufff0\110\ufff0\111\ufff0\112\ufff0\113\ufff0\001\002" +
    "\000\070\041\uffa9\054\uffa9\055\uffa9\056\uffa9\060\uffa9\062" +
    "\uffa9\064\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9" +
    "\073\uffa9\074\uffa9\075\uffa9\076\uffa9\077\uffa9\101\uffa9\102" +
    "\uffa9\103\uffa9\104\uffa9\106\uffa9\107\uffa9\110\uffa9\111\uffa9" +
    "\112\uffa9\113\uffa9\001\002\000\042\045\053\047\041\050" +
    "\014\051\032\052\030\053\031\060\051\061\022\063\021" +
    "\065\025\067\036\100\027\105\017\116\023\117\020\120" +
    "\035\001\002\000\006\054\136\060\uffb1\001\002\000\070" +
    "\041\uffac\054\uffac\055\uffac\056\uffac\060\uffac\062\uffac\064" +
    "\uffac\066\uffac\067\uffac\070\uffac\071\uffac\072\uffac\073\uffac" +
    "\074\uffac\075\uffac\076\uffac\077\uffac\101\uffac\102\uffac\103" +
    "\uffac\104\uffac\106\uffac\107\uffac\110\uffac\111\uffac\112\uffac" +
    "\113\uffac\001\002\000\004\060\uffad\001\002\000\064\046" +
    "\134\054\ufff1\055\ufff1\060\ufff1\061\ufff1\066\ufff1\067\ufff1" +
    "\070\ufff1\071\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1\076" +
    "\ufff1\077\ufff1\101\ufff1\102\ufff1\103\ufff1\104\ufff1\106\ufff1" +
    "\107\ufff1\110\ufff1\111\ufff1\112\ufff1\113\ufff1\001\002\000" +
    "\060\054\073\055\101\060\uffaf\066\062\067\100\070\075" +
    "\071\076\072\071\073\067\074\060\075\074\076\064\077" +
    "\066\101\057\102\104\103\061\104\063\106\072\107\102" +
    "\110\077\111\065\112\070\113\103\001\002\000\004\060" +
    "\056\001\002\000\070\041\uffab\054\uffab\055\uffab\056\uffab" +
    "\060\uffab\062\uffab\064\uffab\066\uffab\067\uffab\070\uffab\071" +
    "\uffab\072\uffab\073\uffab\074\uffab\075\uffab\076\uffab\077\uffab" +
    "\101\uffab\102\uffab\103\uffab\104\uffab\106\uffab\107\uffab\110" +
    "\uffab\111\uffab\112\uffab\113\uffab\001\002\000\040\045\010" +
    "\047\041\050\014\051\032\052\030\053\031\061\022\063" +
    "\021\065\025\067\036\100\027\105\017\116\023\117\020" +
    "\120\035\001\002\000\040\045\010\047\041\050\014\051" +
    "\032\052\030\053\031\061\022\063\021\065\025\067\036" +
    "\100\027\105\017\116\023\117\020\120\035\001\002\000" +
    "\040\045\010\047\041\050\014\051\032\052\030\053\031" +
    "\061\022\063\021\065\025\067\036\100\027\105\017\116" +
    "\023\117\020\120\035\001\002\000\040\045\010\047\041" +
    "\050\014\051\032\052\030\053\031\061\022\063\021\065" +
    "\025\067\036\100\027\105\017\116\023\117\020\120\035" +
    "\001\002\000\040\045\010\047\041\050\014\051\032\052" +
    "\030\053\031\061\022\063\021\065\025\067\036\100\027" +
    "\105\017\116\023\117\020\120\035\001\002\000\040\045" +
    "\010\047\041\050\014\051\032\052\030\053\031\061\022" +
    "\063\021\065\025\067\036\100\027\105\017\116\023\117" +
    "\020\120\035\001\002\000\040\045\010\047\041\050\014" +
    "\051\032\052\030\053\031\061\022\063\021\065\025\067" +
    "\036\100\027\105\017\116\023\117\020\120\035\001\002" +
    "\000\040\045\010\047\041\050\014\051\032\052\030\053" +
    "\031\061\022\063\021\065\025\067\036\100\027\105\017" +
    "\116\023\117\020\120\035\001\002\000\040\045\010\047" +
    "\041\050\014\051\032\052\030\053\031\061\022\063\021" +
    "\065\025\067\036\100\027\105\017\116\023\117\020\120" +
    "\035\001\002\000\040\045\010\047\041\050\014\051\032" +
    "\052\030\053\031\061\022\063\021\065\025\067\036\100" +
    "\027\105\017\116\023\117\020\120\035\001\002\000\040" +
    "\045\010\047\041\050\014\051\032\052\030\053\031\061" +
    "\022\063\021\065\025\067\036\100\027\105\017\116\023" +
    "\117\020\120\035\001\002\000\040\045\010\047\041\050" +
    "\014\051\032\052\030\053\031\061\022\063\021\065\025" +
    "\067\036\100\027\105\017\116\023\117\020\120\035\001" +
    "\002\000\040\045\053\047\041\050\014\051\032\052\030" +
    "\053\031\061\022\063\021\065\025\067\036\100\027\105" +
    "\017\116\023\117\020\120\035\001\002\000\040\045\010" +
    "\047\041\050\014\051\032\052\030\053\031\061\022\063" +
    "\021\065\025\067\036\100\027\105\017\116\023\117\020" +
    "\120\035\001\002\000\040\045\010\047\041\050\014\051" +
    "\032\052\030\053\031\061\022\063\021\065\025\067\036" +
    "\100\027\105\017\116\023\117\020\120\035\001\002\000" +
    "\040\045\010\047\041\050\014\051\032\052\030\053\031" +
    "\061\022\063\021\065\025\067\036\100\027\105\017\116" +
    "\023\117\020\120\035\001\002\000\040\045\010\047\041" +
    "\050\014\051\032\052\030\053\031\061\022\063\021\065" +
    "\025\067\036\100\027\105\017\116\023\117\020\120\035" +
    "\001\002\000\040\045\010\047\041\050\014\051\032\052" +
    "\030\053\031\061\022\063\021\065\025\067\036\100\027" +
    "\105\017\116\023\117\020\120\035\001\002\000\004\045" +
    "\010\001\002\000\040\045\010\047\041\050\014\051\032" +
    "\052\030\053\031\061\022\063\021\065\025\067\036\100" +
    "\027\105\017\116\023\117\020\120\035\001\002\000\040" +
    "\045\010\047\041\050\014\051\032\052\030\053\031\061" +
    "\022\063\021\065\025\067\036\100\027\105\017\116\023" +
    "\117\020\120\035\001\002\000\040\045\010\047\041\050" +
    "\014\051\032\052\030\053\031\061\022\063\021\065\025" +
    "\067\036\100\027\105\017\116\023\117\020\120\035\001" +
    "\002\000\070\041\uffcd\054\uffcd\055\101\056\uffcd\060\uffcd" +
    "\062\uffcd\064\uffcd\066\062\067\100\070\075\071\076\072" +
    "\071\073\067\074\060\075\uffcd\076\uffcd\077\uffcd\101\uffcd" +
    "\102\uffcd\103\uffcd\104\uffcd\106\uffcd\107\uffcd\110\uffcd\111" +
    "\uffcd\112\uffcd\113\uffcd\001\002\000\070\041\uffd4\054\uffd4" +
    "\055\101\056\uffd4\060\uffd4\062\uffd4\064\uffd4\066\062\067" +
    "\100\070\075\071\076\072\071\073\067\074\060\075\074" +
    "\076\064\077\066\101\057\102\104\103\uffd4\104\uffd4\106" +
    "\uffd4\107\uffd4\110\uffd4\111\uffd4\112\uffd4\113\uffd4\001\002" +
    "\000\070\041\uffd3\054\uffd3\055\101\056\uffd3\060\uffd3\062" +
    "\uffd3\064\uffd3\066\062\067\100\070\075\071\076\072\071" +
    "\073\067\074\060\075\074\076\064\077\066\101\057\102" +
    "\104\103\uffd3\104\uffd3\106\uffd3\107\uffd3\110\uffd3\111\uffd3" +
    "\112\uffd3\113\uffd3\001\002\000\004\061\047\001\002\000" +
    "\070\041\uffaa\054\uffaa\055\uffaa\056\uffaa\060\uffaa\062\uffaa" +
    "\064\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa\073" +
    "\uffaa\074\uffaa\075\uffaa\076\uffaa\077\uffaa\101\uffaa\102\uffaa" +
    "\103\uffaa\104\uffaa\106\uffaa\107\uffaa\110\uffaa\111\uffaa\112" +
    "\uffaa\113\uffaa\001\002\000\070\041\uffcb\054\uffcb\055\101" +
    "\056\uffcb\060\uffcb\062\uffcb\064\uffcb\066\uffcb\067\uffcb\070" +
    "\075\071\076\072\071\073\067\074\060\075\uffcb\076\uffcb" +
    "\077\uffcb\101\uffcb\102\uffcb\103\uffcb\104\uffcb\106\uffcb\107" +
    "\uffcb\110\uffcb\111\uffcb\112\uffcb\113\uffcb\001\002\000\070" +
    "\041\uffd7\054\uffd7\055\101\056\uffd7\060\uffd7\062\uffd7\064" +
    "\uffd7\066\062\067\100\070\075\071\076\072\071\073\067" +
    "\074\060\075\074\076\064\077\066\101\057\102\104\103" +
    "\uffd7\104\uffd7\106\uffd7\107\uffd7\110\uffd7\111\uffd7\112\uffd7" +
    "\113\uffd7\001\002\000\070\041\uffc9\054\uffc9\055\101\056" +
    "\uffc9\060\uffc9\062\uffc9\064\uffc9\066\uffc9\067\uffc9\070\uffc9" +
    "\071\uffc9\072\071\073\uffc9\074\uffc9\075\uffc9\076\uffc9\077" +
    "\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\106\uffc9\107\uffc9" +
    "\110\uffc9\111\uffc9\112\uffc9\113\uffc9\001\002\000\070\041" +
    "\uffca\054\uffca\055\101\056\uffca\060\uffca\062\uffca\064\uffca" +
    "\066\uffca\067\uffca\070\uffca\071\uffca\072\071\073\uffca\074" +
    "\uffca\075\uffca\076\uffca\077\uffca\101\uffca\102\uffca\103\uffca" +
    "\104\uffca\106\uffca\107\uffca\110\uffca\111\uffca\112\uffca\113" +
    "\uffca\001\002\000\070\041\uffcf\054\uffcf\055\101\056\uffcf" +
    "\060\uffcf\062\uffcf\064\uffcf\066\062\067\100\070\075\071" +
    "\076\072\071\073\067\074\060\075\uffcf\076\uffcf\077\uffcf" +
    "\101\057\102\104\103\uffcf\104\uffcf\106\uffcf\107\uffcf\110" +
    "\uffcf\111\uffcf\112\uffcf\113\uffcf\001\002\000\004\060\uffae" +
    "\001\002\000\070\041\uffd2\054\uffd2\055\101\056\uffd2\060" +
    "\uffd2\062\uffd2\064\uffd2\066\062\067\100\070\075\071\076" +
    "\072\071\073\067\074\060\075\074\076\064\077\066\101" +
    "\057\102\104\103\uffd2\104\uffd2\106\uffd2\107\uffd2\110\uffd2" +
    "\111\uffd2\112\uffd2\113\uffd2\001\002\000\070\041\uffc6\054" +
    "\uffc6\055\101\056\uffc6\060\uffc6\062\uffc6\064\uffc6\066\uffc6" +
    "\067\uffc6\070\uffc6\071\uffc6\072\071\073\uffc6\074\uffc6\075" +
    "\uffc6\076\uffc6\077\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6" +
    "\106\uffc6\107\uffc6\110\uffc6\111\uffc6\112\uffc6\113\uffc6\001" +
    "\002\000\070\041\uffd5\054\uffd5\055\101\056\uffd5\060\uffd5" +
    "\062\uffd5\064\uffd5\066\062\067\100\070\075\071\076\072" +
    "\071\073\067\074\060\075\074\076\064\077\066\101\057" +
    "\102\104\103\uffd5\104\uffd5\106\uffd5\107\uffd5\110\uffd5\111" +
    "\uffd5\112\uffd5\113\uffd5\001\002\000\070\041\uffc7\054\uffc7" +
    "\055\101\056\uffc7\060\uffc7\062\uffc7\064\uffc7\066\uffc7\067" +
    "\uffc7\070\uffc7\071\uffc7\072\071\073\uffc7\074\uffc7\075\uffc7" +
    "\076\uffc7\077\uffc7\101\uffc7\102\uffc7\103\uffc7\104\uffc7\106" +
    "\uffc7\107\uffc7\110\uffc7\111\uffc7\112\uffc7\113\uffc7\001\002" +
    "\000\070\041\uffd0\054\uffd0\055\101\056\uffd0\060\uffd0\062" +
    "\uffd0\064\uffd0\066\062\067\100\070\075\071\076\072\071" +
    "\073\067\074\060\075\074\076\uffd0\077\uffd0\101\057\102" +
    "\104\103\uffd0\104\uffd0\106\uffd0\107\uffd0\110\uffd0\111\uffd0" +
    "\112\uffd0\113\uffd0\001\002\000\070\041\uffd6\054\uffd6\055" +
    "\101\056\uffd6\060\uffd6\062\uffd6\064\uffd6\066\062\067\100" +
    "\070\075\071\076\072\071\073\067\074\060\075\074\076" +
    "\064\077\066\101\057\102\104\103\uffd6\104\uffd6\106\uffd6" +
    "\107\uffd6\110\uffd6\111\uffd6\112\uffd6\113\uffd6\001\002\000" +
    "\070\041\uffd1\054\uffd1\055\101\056\uffd1\060\uffd1\062\uffd1" +
    "\064\uffd1\066\062\067\100\070\075\071\076\072\071\073" +
    "\067\074\060\075\074\076\uffd1\077\066\101\057\102\104" +
    "\103\uffd1\104\uffd1\106\uffd1\107\uffd1\110\uffd1\111\uffd1\112" +
    "\uffd1\113\uffd1\001\002\000\070\041\uffd9\054\uffd9\055\101" +
    "\056\uffd9\060\uffd9\062\uffd9\064\uffd9\066\062\067\100\070" +
    "\075\071\076\072\071\073\067\074\060\075\074\076\064" +
    "\077\066\101\057\102\104\103\061\104\uffd9\106\072\107" +
    "\102\110\077\111\065\112\070\113\103\001\002\000\070" +
    "\041\uffcc\054\uffcc\055\101\056\uffcc\060\uffcc\062\uffcc\064" +
    "\uffcc\066\uffcc\067\uffcc\070\075\071\076\072\071\073\067" +
    "\074\060\075\uffcc\076\uffcc\077\uffcc\101\uffcc\102\uffcc\103" +
    "\uffcc\104\uffcc\106\uffcc\107\uffcc\110\uffcc\111\uffcc\112\uffcc" +
    "\113\uffcc\001\002\000\070\041\uffd8\054\uffd8\055\101\056" +
    "\uffd8\060\uffd8\062\uffd8\064\uffd8\066\062\067\100\070\075" +
    "\071\076\072\071\073\067\074\060\075\074\076\064\077" +
    "\066\101\057\102\104\103\uffd8\104\uffd8\106\072\107\102" +
    "\110\077\111\065\112\070\113\103\001\002\000\070\041" +
    "\uffc8\054\uffc8\055\101\056\uffc8\060\uffc8\062\uffc8\064\uffc8" +
    "\066\uffc8\067\uffc8\070\uffc8\071\uffc8\072\071\073\uffc8\074" +
    "\uffc8\075\uffc8\076\uffc8\077\uffc8\101\uffc8\102\uffc8\103\uffc8" +
    "\104\uffc8\106\uffc8\107\uffc8\110\uffc8\111\uffc8\112\uffc8\113" +
    "\uffc8\001\002\000\070\041\uffce\054\uffce\055\101\056\uffce" +
    "\060\uffce\062\uffce\064\uffce\066\062\067\100\070\075\071" +
    "\076\072\071\073\067\074\060\075\uffce\076\uffce\077\uffce" +
    "\101\uffce\102\uffce\103\uffce\104\uffce\106\uffce\107\uffce\110" +
    "\uffce\111\uffce\112\uffce\113\uffce\001\002\000\040\045\010" +
    "\047\041\050\014\051\032\052\030\053\031\061\022\063" +
    "\021\065\025\067\036\100\027\105\017\116\023\117\020" +
    "\120\035\001\002\000\060\054\uffb2\055\101\060\uffb2\066" +
    "\062\067\100\070\075\071\076\072\071\073\067\074\060" +
    "\075\074\076\064\077\066\101\057\102\104\103\061\104" +
    "\063\106\072\107\102\110\077\111\065\112\070\113\103" +
    "\001\002\000\004\045\140\001\002\000\004\060\uffb0\001" +
    "\002\000\004\046\134\001\002\000\070\041\ufffe\054\ufffe" +
    "\055\ufffe\056\ufffe\060\ufffe\062\ufffe\064\ufffe\066\ufffe\067" +
    "\ufffe\070\ufffe\071\ufffe\072\ufffe\073\ufffe\074\ufffe\075\ufffe" +
    "\076\ufffe\077\ufffe\101\ufffe\102\ufffe\103\ufffe\104\ufffe\106" +
    "\ufffe\107\ufffe\110\ufffe\111\ufffe\112\ufffe\113\ufffe\001\002" +
    "\000\070\041\ufffc\054\ufffc\055\ufffc\056\ufffc\060\ufffc\062" +
    "\ufffc\064\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc" +
    "\073\ufffc\074\ufffc\075\ufffc\076\ufffc\077\ufffc\101\ufffc\102" +
    "\ufffc\103\ufffc\104\ufffc\106\ufffc\107\ufffc\110\ufffc\111\ufffc" +
    "\112\ufffc\113\ufffc\001\002\000\070\041\ufffa\054\ufffa\055" +
    "\ufffa\056\ufffa\060\ufffa\062\ufffa\064\ufffa\066\ufffa\067\ufffa" +
    "\070\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa\075\ufffa\076" +
    "\ufffa\077\ufffa\101\ufffa\102\ufffa\103\ufffa\104\ufffa\106\ufffa" +
    "\107\ufffa\110\ufffa\111\ufffa\112\ufffa\113\ufffa\001\002\000" +
    "\040\045\010\047\041\050\014\051\032\052\030\053\031" +
    "\061\022\063\021\065\025\067\036\100\027\105\017\116" +
    "\023\117\020\120\035\001\002\000\004\041\uffc2\001\002" +
    "\000\070\041\uffc4\054\uffc4\055\101\056\uffc4\060\uffc4\062" +
    "\uffc4\064\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4\072\uffc4" +
    "\073\uffc4\074\uffc4\075\uffc4\076\uffc4\077\uffc4\101\uffc4\102" +
    "\uffc4\103\uffc4\104\uffc4\106\uffc4\107\uffc4\110\uffc4\111\uffc4" +
    "\112\uffc4\113\uffc4\001\002\000\070\041\uffe3\054\uffe3\055" +
    "\uffe3\056\uffe3\060\uffe3\062\uffe3\064\uffe3\066\uffe3\067\uffe3" +
    "\070\uffe3\071\uffe3\072\uffe3\073\uffe3\074\uffe3\075\uffe3\076" +
    "\uffe3\077\uffe3\101\uffe3\102\uffe3\103\uffe3\104\uffe3\106\uffe3" +
    "\107\uffe3\110\uffe3\111\uffe3\112\uffe3\113\uffe3\001\002\000" +
    "\004\064\157\001\002\000\006\054\155\064\uffe1\001\002" +
    "\000\056\055\101\056\153\066\062\067\100\070\075\071" +
    "\076\072\071\073\067\074\060\075\074\076\064\077\066" +
    "\101\057\102\104\103\061\104\063\106\072\107\102\110" +
    "\077\111\065\112\070\113\103\001\002\000\040\045\010" +
    "\047\041\050\014\051\032\052\030\053\031\061\022\063" +
    "\021\065\025\067\036\100\027\105\017\116\023\117\020" +
    "\120\035\001\002\000\060\054\uffe2\055\101\064\uffe2\066" +
    "\062\067\100\070\075\071\076\072\071\073\067\074\060" +
    "\075\074\076\064\077\066\101\057\102\104\103\061\104" +
    "\063\106\072\107\102\110\077\111\065\112\070\113\103" +
    "\001\002\000\040\045\010\047\041\050\014\051\032\052" +
    "\030\053\031\061\022\063\021\065\025\067\036\100\027" +
    "\105\017\116\023\117\020\120\035\001\002\000\004\064" +
    "\uffe0\001\002\000\070\041\uffe4\054\uffe4\055\uffe4\056\uffe4" +
    "\060\uffe4\062\uffe4\064\uffe4\066\uffe4\067\uffe4\070\uffe4\071" +
    "\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4\076\uffe4\077\uffe4" +
    "\101\uffe4\102\uffe4\103\uffe4\104\uffe4\106\uffe4\107\uffe4\110" +
    "\uffe4\111\uffe4\112\uffe4\113\uffe4\001\002\000\070\041\uffee" +
    "\054\uffee\055\uffee\056\uffee\060\uffee\062\uffee\064\uffee\066" +
    "\uffee\067\uffee\070\uffee\071\uffee\072\uffee\073\uffee\074\uffee" +
    "\075\uffee\076\uffee\077\uffee\101\uffee\102\uffee\103\uffee\104" +
    "\uffee\106\uffee\107\uffee\110\uffee\111\uffee\112\uffee\113\uffee" +
    "\001\002\000\004\060\171\001\002\000\060\054\164\055" +
    "\101\060\163\066\062\067\100\070\075\071\076\072\071" +
    "\073\067\074\060\075\074\076\064\077\066\101\057\102" +
    "\104\103\061\104\063\106\072\107\102\110\077\111\065" +
    "\112\070\113\103\001\002\000\070\041\uffda\054\uffda\055" +
    "\uffda\056\uffda\060\uffda\062\uffda\064\uffda\066\uffda\067\uffda" +
    "\070\uffda\071\uffda\072\uffda\073\uffda\074\uffda\075\uffda\076" +
    "\uffda\077\uffda\101\uffda\102\uffda\103\uffda\104\uffda\106\uffda" +
    "\107\uffda\110\uffda\111\uffda\112\uffda\113\uffda\001\002\000" +
    "\044\041\uffea\045\010\047\041\050\014\051\032\052\030" +
    "\053\031\060\uffea\061\022\063\021\065\025\067\036\100" +
    "\027\105\017\116\023\117\020\120\035\001\002\000\006" +
    "\041\uffe9\060\uffe9\001\002\000\062\041\uffec\054\167\055" +
    "\101\060\uffec\066\062\067\100\070\075\071\076\072\071" +
    "\073\067\074\060\075\074\076\064\077\066\101\057\102" +
    "\104\103\061\104\063\106\072\107\102\110\077\111\065" +
    "\112\070\113\103\001\002\000\040\045\010\047\041\050" +
    "\014\051\032\052\030\053\031\061\022\063\021\065\025" +
    "\067\036\100\027\105\017\116\023\117\020\120\035\001" +
    "\002\000\006\041\uffeb\060\uffeb\001\002\000\070\041\uffed" +
    "\054\uffed\055\uffed\056\uffed\060\uffed\062\uffed\064\uffed\066" +
    "\uffed\067\uffed\070\uffed\071\uffed\072\uffed\073\uffed\074\uffed" +
    "\075\uffed\076\uffed\077\uffed\101\uffed\102\uffed\103\uffed\104" +
    "\uffed\106\uffed\107\uffed\110\uffed\111\uffed\112\uffed\113\uffed" +
    "\001\002\000\070\041\uffe8\054\uffe8\055\uffe8\056\uffe8\060" +
    "\uffe8\062\uffe8\064\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8" +
    "\072\uffe8\073\uffe8\074\uffe8\075\uffe8\076\uffe8\077\uffe8\101" +
    "\uffe8\102\uffe8\103\uffe8\104\uffe8\106\uffe8\107\uffe8\110\uffe8" +
    "\111\uffe8\112\uffe8\113\uffe8\001\002\000\004\062\177\001" +
    "\002\000\060\054\175\055\101\062\uffe6\066\062\067\100" +
    "\070\075\071\076\072\071\073\067\074\060\075\074\076" +
    "\064\077\066\101\057\102\104\103\061\104\063\106\072" +
    "\107\102\110\077\111\065\112\070\113\103\001\002\000" +
    "\040\045\010\047\041\050\014\051\032\052\030\053\031" +
    "\061\022\063\021\065\025\067\036\100\027\105\017\116" +
    "\023\117\020\120\035\001\002\000\004\062\uffe5\001\002" +
    "\000\070\041\uffe7\054\uffe7\055\uffe7\056\uffe7\060\uffe7\062" +
    "\uffe7\064\uffe7\066\uffe7\067\uffe7\070\uffe7\071\uffe7\072\uffe7" +
    "\073\uffe7\074\uffe7\075\uffe7\076\uffe7\077\uffe7\101\uffe7\102" +
    "\uffe7\103\uffe7\104\uffe7\106\uffe7\107\uffe7\110\uffe7\111\uffe7" +
    "\112\uffe7\113\uffe7\001\002\000\070\041\uffc5\054\uffc5\055" +
    "\101\056\uffc5\060\uffc5\062\uffc5\064\uffc5\066\062\067\100" +
    "\070\075\071\076\072\071\073\067\074\060\075\074\076" +
    "\064\077\066\101\057\102\104\103\uffc5\104\uffc5\106\072" +
    "\107\102\110\077\111\065\112\070\113\103\001\002\000" +
    "\004\002\001\001\002\000\004\046\uffb6\001\002\000\004" +
    "\045\010\001\002\000\040\045\010\047\041\050\014\051" +
    "\032\052\030\053\031\061\022\063\021\065\025\067\036" +
    "\100\027\105\017\116\023\117\020\120\035\001\002\000" +
    "\056\041\uffb5\055\101\066\062\067\100\070\075\071\076" +
    "\072\071\073\067\074\060\075\074\076\064\077\066\101" +
    "\057\102\104\103\061\104\063\106\072\107\102\110\077" +
    "\111\065\112\070\113\103\001\002\000\006\046\uffb8\054" +
    "\203\001\002\000\004\046\uffb7\001\002\000\004\002\000" +
    "\001\002\000\040\045\010\047\041\050\014\051\032\052" +
    "\030\053\031\061\022\063\021\065\025\067\036\100\027" +
    "\105\017\116\023\117\020\120\035\001\002\000\004\041" +
    "\uffb4\001\002\000\060\041\uffb3\054\164\055\101\066\062" +
    "\067\100\070\075\071\076\072\071\073\067\074\060\075" +
    "\074\076\064\077\066\101\057\102\104\103\061\104\063" +
    "\106\072\107\102\110\077\111\065\112\070\113\103\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\012\015\003\016\006\042\005\054\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\011\001\001\000\002\001\001\000\032\002\015\003\014" +
    "\010\032\024\025\025\037\026\043\027\036\042\044\045" +
    "\023\047\041\050\033\053\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\002\015\003" +
    "\014\010\177\024\025\025\037\026\043\027\036\042\044" +
    "\045\023\047\041\050\033\001\001\000\002\001\001\000" +
    "\032\002\015\003\014\010\173\024\025\025\037\026\043" +
    "\027\036\042\044\045\023\046\172\047\041\050\033\001" +
    "\001\000\032\002\015\003\014\010\161\024\025\025\037" +
    "\026\043\027\036\042\044\045\023\047\041\050\033\052" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\002\015\003\014\010\151\024\025\025\037\026\043\027" +
    "\036\042\044\043\147\044\150\045\023\047\041\050\033" +
    "\001\001\000\002\001\001\000\030\002\015\003\014\010" +
    "\145\024\025\025\037\026\043\027\036\042\044\045\023" +
    "\047\041\050\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\045\001\001\000" +
    "\002\001\001\000\036\002\015\003\014\010\053\020\047" +
    "\021\051\022\054\024\025\025\037\026\043\027\036\042" +
    "\044\045\023\047\041\050\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\002\015\003\014\010\132\024\025\025\037\026\043\027" +
    "\036\042\044\045\023\047\041\050\033\001\001\000\030" +
    "\002\015\003\014\010\131\024\025\025\037\026\043\027" +
    "\036\042\044\045\023\047\041\050\033\001\001\000\030" +
    "\002\015\003\014\010\130\024\025\025\037\026\043\027" +
    "\036\042\044\045\023\047\041\050\033\001\001\000\030" +
    "\002\015\003\014\010\127\024\025\025\037\026\043\027" +
    "\036\042\044\045\023\047\041\050\033\001\001\000\030" +
    "\002\015\003\014\010\126\024\025\025\037\026\043\027" +
    "\036\042\044\045\023\047\041\050\033\001\001\000\030" +
    "\002\015\003\014\010\125\024\025\025\037\026\043\027" +
    "\036\042\044\045\023\047\041\050\033\001\001\000\030" +
    "\002\015\003\014\010\124\024\025\025\037\026\043\027" +
    "\036\042\044\045\023\047\041\050\033\001\001\000\030" +
    "\002\015\003\014\010\123\024\025\025\037\026\043\027" +
    "\036\042\044\045\023\047\041\050\033\001\001\000\030" +
    "\002\015\003\014\010\122\024\025\025\037\026\043\027" +
    "\036\042\044\045\023\047\041\050\033\001\001\000\030" +
    "\002\015\003\014\010\121\024\025\025\037\026\043\027" +
    "\036\042\044\045\023\047\041\050\033\001\001\000\030" +
    "\002\015\003\014\010\120\024\025\025\037\026\043\027" +
    "\036\042\044\045\023\047\041\050\033\001\001\000\030" +
    "\002\015\003\014\010\117\024\025\025\037\026\043\027" +
    "\036\042\044\045\023\047\041\050\033\001\001\000\036" +
    "\002\015\003\014\010\053\020\047\021\051\022\116\024" +
    "\025\025\037\026\043\027\036\042\044\045\023\047\041" +
    "\050\033\001\001\000\030\002\015\003\014\010\115\024" +
    "\025\025\037\026\043\027\036\042\044\045\023\047\041" +
    "\050\033\001\001\000\030\002\015\003\014\010\114\024" +
    "\025\025\037\026\043\027\036\042\044\045\023\047\041" +
    "\050\033\001\001\000\030\002\015\003\014\010\113\024" +
    "\025\025\037\026\043\027\036\042\044\045\023\047\041" +
    "\050\033\001\001\000\030\002\015\003\014\010\112\024" +
    "\025\025\037\026\043\027\036\042\044\045\023\047\041" +
    "\050\033\001\001\000\030\002\015\003\014\010\111\024" +
    "\025\025\037\026\043\027\036\042\044\045\023\047\041" +
    "\050\033\001\001\000\004\042\107\001\001\000\030\002" +
    "\015\003\014\010\106\024\025\025\037\026\043\027\036" +
    "\042\044\045\023\047\041\050\033\001\001\000\030\002" +
    "\015\003\014\010\105\024\025\025\037\026\043\027\036" +
    "\042\044\045\023\047\041\050\033\001\001\000\030\002" +
    "\015\003\014\010\104\024\025\025\037\026\043\027\036" +
    "\042\044\045\023\047\041\050\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\002\015\003\014\010\134\024\025\025\037\026" +
    "\043\027\036\042\044\045\023\047\041\050\033\001\001" +
    "\000\002\001\001\000\006\020\047\021\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\002\015\003\014\010" +
    "\032\024\025\025\037\026\043\027\036\042\044\045\023" +
    "\047\041\050\033\053\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\002\015\003\014\010" +
    "\153\024\025\025\037\026\043\027\036\042\044\045\023" +
    "\047\041\050\033\001\001\000\002\001\001\000\034\002" +
    "\015\003\014\010\151\024\025\025\037\026\043\027\036" +
    "\042\044\043\155\044\150\045\023\047\041\050\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\002\015\003\014\010\165\024\025\025\037\026\043" +
    "\027\036\042\044\045\023\047\041\050\033\051\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\002\015" +
    "\003\014\010\165\024\025\025\037\026\043\027\036\042" +
    "\044\045\023\047\041\050\033\051\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\002\015\003\014\010\173" +
    "\024\025\025\037\026\043\027\036\042\044\045\023\046" +
    "\175\047\041\050\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\205\001\001\000\030\002\015\003\014" +
    "\010\204\024\025\025\037\026\043\027\036\042\044\045" +
    "\023\047\041\050\033\001\001\000\002\001\001\000\004" +
    "\014\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\002\015\003\014\010\212\024\025\025\037\026\043" +
    "\027\036\042\044\045\023\047\041\050\033\052\211\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    //MANTENGO UN STACK DE GENERADORES Y PUSHEO EL PRIMERO
    ParserStatus.StackGenerador.push(new Generador());

    }





    public void syntax_error(Symbol s){
        System.out.println("Error de sintaxis "+s.sym+" en la linea "+(s.left+1)+" y la columna "+s.right);
        System.out.println(s.value);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error de sintaxis "+s.sym);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // if_stmt ::= IF expression COLON suite NEWLINE ELSE COLON suite NEWLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // if_stmt ::= IF expression COLON suite NEWLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // suite ::= NEWLINE INDENT stmt_list DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("suite",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // suite ::= stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("suite",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // stmt_list ::= stmt stmt_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // stmt_list ::= stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // compound_stmt ::= func_def 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // compound_stmt ::= for_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // compound_stmt ::= while_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // compound_stmt ::= if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // stmt ::= compound_stmt NEWLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // stmt ::= small_stmt NEWLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // small_stmt ::= flow_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // small_stmt ::= print_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // small_stmt ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // small_stmt ::= expr_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // flow_stmt ::= return_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // flow_stmt ::= CONTINUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // flow_stmt ::= BREAK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // func_call ::= name trailer 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateFunctionCall(n,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // func_call ::= expression DOT name trailer 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateNameFunctionCall(e,d,n,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // trailer ::= LPAREN argument_list RPAREN 
            {
              Object RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = al; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trailer",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // trailer ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trailer",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // argument_list ::= named_argument_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // argument_list ::= expression COMA argument_list 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateArguments(c,e,al); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // argument_list ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateArguments(null,e,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // named_argument_list ::= named_argument COMA named_argument_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("named_argument_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // named_argument_list ::= named_argument 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("named_argument_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // named_argument ::= NAME ASSIGN expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("named_argument",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr_stmt ::= namelist ASSIGN expression 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int auleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int auright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object au = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateUnpackAssignation(n,au,tr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr_stmt ::= namelist ASSIGN tuplemaker 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int auleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int auright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object au = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateTupleMakerAssignation(n,au,tr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr_stmt ::= name ASSIGN expression 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int auleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int auright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object au = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateAssignation(n,au,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // namelist ::= name namecoma 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.joinNames(n,nc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namelist",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // namecoma ::= COMA name namecoma 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.joinNames(n,nc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namecoma",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // namecoma ::= COMA name 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.storeName(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namecoma",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // return_stmt ::= RETURN testlist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // return_stmt ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // testlist ::= expression testcoma COMA 
            {
              Object RESULT =null;
		 System.out.println("TESTLIST 4"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("testlist",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // testlist ::= expression testcoma 
            {
              Object RESULT =null;
		 System.out.println("TESTLIST 3"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("testlist",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // testlist ::= expression COMA 
            {
              Object RESULT =null;
		 System.out.println("TESTLIST 2"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("testlist",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // testlist ::= expression 
            {
              Object RESULT =null;
		 System.out.println("TESTLIST 1"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("testlist",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // testcoma ::= COMA expression testcoma 
            {
              Object RESULT =null;
		 System.out.println("TESTCOMA 2"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("testcoma",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // testcoma ::= COMA expression 
            {
              Object RESULT =null;
		 System.out.println("TESTCOMA 1"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("testcoma",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // print_stmt ::= PRINT printtrail 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generatePrintNewline(p,n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // printtrail ::= expression COMA printtrail 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generatePrint(e,c,p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printtrail",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // printtrail ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generatePrint(e,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printtrail",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= NOTB expression 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateUnaryOperation(op,a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= NOT expression 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateUnaryOperation(op,a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= expression EXP expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= expression DIVE expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= expression MOD expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= expression DIV expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= expression MULT expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= expression MINUS expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= expression PLUS expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= expression SHIFTR expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= expression SHIFTL expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= expression ANDB expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= expression XORB expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= expression ORB expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= expression EQUALS expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= expression DIFF expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= expression MAJOREQ expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= expression MINOREQ expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= expression MAJOR expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= expression MINOR expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= expression AND expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= expression OR expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= func_call 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= tuple 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= list 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= dictionary 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= atom 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.loadNameOrConst(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dictorsetmaker ::= dictorsetelement COMA dictorsetmaker 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e1,c,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // dictorsetmaker ::= dictorsetelement 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(d,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dictorsetelement ::= expression COLON expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateDictItem(e1,c,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dictorsetelement",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // dictionary ::= LCURLY RCURLY 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateListTupleDict(c,null,OpCode.CREATE_DICT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dictionary",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // dictionary ::= LCURLY dictorsetmaker RCURLY 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateListTupleDict(c,e,OpCode.CREATE_DICT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dictionary",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // listmaker ::= expression COMA listmaker 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e,c,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listmaker",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // listmaker ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listmaker",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // list ::= LBRACKET listmaker RBRACKET 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateListTupleDict(b,l,OpCode.CREATE_LIST);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // list ::= LBRACKET RBRACKET 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateListTupleDict(b,null,OpCode.CREATE_LIST); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tuplemaker ::= expression COMA tupletrail 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e,c,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuplemaker",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tuplemaker ::= expression COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuplemaker",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tupletrail ::= expression COMA tupletrail 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e,c,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tupletrail",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tupletrail ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tupletrail",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tuple ::= LPAREN tuplemaker RPAREN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateListTupleDict(b,l,OpCode.CREATE_TUPLE);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tuple ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateListTupleDict(b,null,OpCode.CREATE_TUPLE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // atom ::= constant 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // atom ::= name 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // name ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = RuleGenerator.generateName((LexerToken)n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constant ::= FALSE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constant ::= TRUE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constant ::= NONE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constant ::= STRING3 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constant ::= STRING 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constant ::= float 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constant ::= long 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constant ::= integer 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // float ::= MINUS FLOAT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateMinusConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("float",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // float ::= FLOAT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("float",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // long ::= MINUS LONG 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateMinusConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("long",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // long ::= LONG 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("long",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // integer ::= MINUS INTEGER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateMinusConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // integer ::= INTEGER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= expr_stmt NEWLINE print_stmt NEWLINE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    System.out.println("EL PROGRAMA ESTA BIEN");
    Bloque as = ParseResult.getAs(e);
    Bloque bloq = ParseResult.getAs(b);
    as.instrucciones.addAll(bloq.instrucciones);

    Code code = ParserStatus.StackGenerador.peek().crearCodigo("lala","lala",as);
    RESULT = code;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

