
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jul 12 21:25:06 UYT 2015
//----------------------------------------------------

package com.pyjava.parser;

import com.pyjava.core.exceptions.PyException;
import com.pyjava.core.runtime.*;
import java_cup.runtime.*;
import com.pyjava.parser.codegen.*;
import com.pyjava.core.*;
import java.util.Deque;
import java.util.LinkedList;
import java.util.Scanner;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jul 12 21:25:06 UYT 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\043\004\000\002\002\004\000\002\025" +
    "\003\000\002\025\004\000\002\027\003\000\002\027\004" +
    "\000\002\026\003\000\002\026\004\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\042\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\006\003\000\002\006" +
    "\003\000\002\010\003\000\002\010\005\000\002\010\005" +
    "\000\002\010\004\000\002\007\004\000\002\011\004\000" +
    "\002\011\005\000\002\012\003\000\002\012\004\000\002" +
    "\012\004\000\002\012\005\000\002\013\003\000\002\013" +
    "\004\000\002\014\004\000\002\014\005\000\002\015\003" +
    "\000\002\015\004\000\002\016\005\000\002\017\003\000" +
    "\002\020\005\000\002\021\003\000\002\021\005\000\002" +
    "\022\003\000\002\022\005\000\002\022\003\000\002\023" +
    "\004\000\002\023\005\000\002\024\006\000\002\024\004" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\032\004\000\002\032\004\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\040\003\000\002\040\004\000\002\041\003\000" +
    "\002\041\006\000\002\034\007\000\002\034\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\004\040\006\001\002\000\004\041\116\001" +
    "\002\000\004\002\115\001\002\000\034\045\013\047\031" +
    "\050\007\051\023\052\021\053\022\061\015\067\026\100" +
    "\020\105\012\116\016\117\014\120\025\001\002\000\062" +
    "\041\ufffd\054\ufffd\055\ufffd\060\ufffd\066\ufffd\067\ufffd\070" +
    "\ufffd\071\ufffd\072\ufffd\073\ufffd\074\ufffd\075\ufffd\076\ufffd" +
    "\077\ufffd\101\ufffd\102\ufffd\103\ufffd\104\ufffd\106\ufffd\107" +
    "\ufffd\110\ufffd\111\ufffd\112\ufffd\113\ufffd\001\002\000\062" +
    "\041\uffd7\054\uffd7\055\uffd7\060\uffd7\066\uffd7\067\uffd7\070" +
    "\uffd7\071\uffd7\072\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7" +
    "\077\uffd7\101\uffd7\102\uffd7\103\uffd7\104\uffd7\106\uffd7\107" +
    "\uffd7\110\uffd7\111\uffd7\112\uffd7\113\uffd7\001\002\000\062" +
    "\041\uffef\054\uffef\055\uffef\060\uffef\066\uffef\067\uffef\070" +
    "\uffef\071\uffef\072\uffef\073\uffef\074\uffef\075\uffef\076\uffef" +
    "\077\uffef\101\uffef\102\uffef\103\uffef\104\uffef\106\uffef\107" +
    "\uffef\110\uffef\111\uffef\112\uffef\113\uffef\001\002\000\034" +
    "\045\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\061" +
    "\uffd9\067\uffd9\100\uffd9\105\uffd9\116\uffd9\117\uffd9\120\uffd9" +
    "\001\002\000\064\041\ufff1\054\ufff1\055\ufff1\060\ufff1\061" +
    "\066\066\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1\073\ufff1" +
    "\074\ufff1\075\ufff1\076\ufff1\077\ufff1\101\ufff1\102\ufff1\103" +
    "\ufff1\104\ufff1\106\ufff1\107\ufff1\110\ufff1\111\ufff1\112\ufff1" +
    "\113\ufff1\001\002\000\062\041\ufff3\054\ufff3\055\ufff3\060" +
    "\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3\073\ufff3" +
    "\074\ufff3\075\ufff3\076\ufff3\077\ufff3\101\ufff3\102\ufff3\103" +
    "\ufff3\104\ufff3\106\ufff3\107\ufff3\110\ufff3\111\ufff3\112\ufff3" +
    "\113\ufff3\001\002\000\034\045\013\047\031\050\007\051" +
    "\023\052\021\053\022\061\015\067\026\100\020\105\012" +
    "\116\016\117\014\120\025\001\002\000\062\041\ufff4\054" +
    "\ufff4\055\ufff4\060\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4" +
    "\072\ufff4\073\ufff4\074\ufff4\075\ufff4\076\ufff4\077\ufff4\101" +
    "\ufff4\102\ufff4\103\ufff4\104\ufff4\106\ufff4\107\ufff4\110\ufff4" +
    "\111\ufff4\112\ufff4\113\ufff4\001\002\000\062\041\uffee\054" +
    "\uffee\055\uffee\060\uffee\066\uffee\067\uffee\070\uffee\071\uffee" +
    "\072\uffee\073\uffee\074\uffee\075\uffee\076\uffee\077\uffee\101" +
    "\uffee\102\uffee\103\uffee\104\uffee\106\uffee\107\uffee\110\uffee" +
    "\111\uffee\112\uffee\113\uffee\001\002\000\034\045\uffd8\047" +
    "\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\061\uffd8\067\uffd8" +
    "\100\uffd8\105\uffd8\116\uffd8\117\uffd8\120\uffd8\001\002\000" +
    "\062\041\ufff6\054\ufff6\055\ufff6\060\ufff6\066\ufff6\067\ufff6" +
    "\070\ufff6\071\ufff6\072\ufff6\073\ufff6\074\ufff6\075\ufff6\076" +
    "\ufff6\077\ufff6\101\ufff6\102\ufff6\103\ufff6\104\ufff6\106\ufff6" +
    "\107\ufff6\110\ufff6\111\ufff6\112\ufff6\113\ufff6\001\002\000" +
    "\062\041\ufff5\054\ufff5\055\ufff5\060\ufff5\066\ufff5\067\ufff5" +
    "\070\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5\076" +
    "\ufff5\077\ufff5\101\ufff5\102\ufff5\103\ufff5\104\ufff5\106\ufff5" +
    "\107\ufff5\110\ufff5\111\ufff5\112\ufff5\113\ufff5\001\002\000" +
    "\062\041\ufffb\054\ufffb\055\ufffb\060\ufffb\066\ufffb\067\ufffb" +
    "\070\ufffb\071\ufffb\072\ufffb\073\ufffb\074\ufffb\075\ufffb\076" +
    "\ufffb\077\ufffb\101\ufffb\102\ufffb\103\ufffb\104\ufffb\106\ufffb" +
    "\107\ufffb\110\ufffb\111\ufffb\112\ufffb\113\ufffb\001\002\000" +
    "\056\041\uffd3\055\060\066\041\067\057\070\054\071\055" +
    "\072\050\073\046\074\036\075\053\076\043\077\045\101" +
    "\037\102\063\103\040\104\042\106\051\107\061\110\056" +
    "\111\044\112\047\113\062\001\002\000\062\041\ufff2\054" +
    "\ufff2\055\ufff2\060\ufff2\066\ufff2\067\ufff2\070\ufff2\071\ufff2" +
    "\072\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2\077\ufff2\101" +
    "\ufff2\102\ufff2\103\ufff2\104\ufff2\106\ufff2\107\ufff2\110\ufff2" +
    "\111\ufff2\112\ufff2\113\ufff2\001\002\000\010\047\110\050" +
    "\111\051\112\001\002\000\062\041\ufff8\054\ufff8\055\ufff8" +
    "\060\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8\073" +
    "\ufff8\074\ufff8\075\ufff8\076\ufff8\077\ufff8\101\ufff8\102\ufff8" +
    "\103\ufff8\104\ufff8\106\ufff8\107\ufff8\110\ufff8\111\ufff8\112" +
    "\ufff8\113\ufff8\001\002\000\062\041\ufff9\054\ufff9\055\ufff9" +
    "\060\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9\073" +
    "\ufff9\074\ufff9\075\ufff9\076\ufff9\077\ufff9\101\ufff9\102\ufff9" +
    "\103\ufff9\104\ufff9\106\ufff9\107\ufff9\110\ufff9\111\ufff9\112" +
    "\ufff9\113\ufff9\001\002\000\062\041\uffff\054\uffff\055\uffff" +
    "\060\uffff\066\uffff\067\uffff\070\uffff\071\uffff\072\uffff\073" +
    "\uffff\074\uffff\075\uffff\076\uffff\077\uffff\101\uffff\102\uffff" +
    "\103\uffff\104\uffff\106\uffff\107\uffff\110\uffff\111\uffff\112" +
    "\uffff\113\uffff\001\002\000\034\045\013\047\031\050\007" +
    "\051\023\052\021\053\022\061\015\067\026\100\020\105" +
    "\012\116\016\117\014\120\025\001\002\000\062\041\ufff7" +
    "\054\ufff7\055\ufff7\060\ufff7\066\ufff7\067\ufff7\070\ufff7\071" +
    "\ufff7\072\ufff7\073\ufff7\074\ufff7\075\ufff7\076\ufff7\077\ufff7" +
    "\101\ufff7\102\ufff7\103\ufff7\104\ufff7\106\ufff7\107\ufff7\110" +
    "\ufff7\111\ufff7\112\ufff7\113\ufff7\001\002\000\062\041\ufff0" +
    "\054\ufff0\055\ufff0\060\ufff0\066\ufff0\067\ufff0\070\ufff0\071" +
    "\ufff0\072\ufff0\073\ufff0\074\ufff0\075\ufff0\076\ufff0\077\ufff0" +
    "\101\ufff0\102\ufff0\103\ufff0\104\ufff0\106\ufff0\107\ufff0\110" +
    "\ufff0\111\ufff0\112\ufff0\113\ufff0\001\002\000\062\041\uffd4" +
    "\054\uffd4\055\060\060\uffd4\066\041\067\057\070\054\071" +
    "\055\072\050\073\046\074\036\075\053\076\043\077\045" +
    "\101\037\102\063\103\040\104\042\106\051\107\061\110" +
    "\056\111\044\112\047\113\062\001\002\000\034\045\uffdc" +
    "\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\061\uffdc\067" +
    "\uffdc\100\uffdc\105\uffdc\116\uffdc\117\uffdc\120\uffdc\001\002" +
    "\000\034\045\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053" +
    "\uffe2\061\uffe2\067\uffe2\100\uffe2\105\uffe2\116\uffe2\117\uffe2" +
    "\120\uffe2\001\002\000\034\045\uffec\047\uffec\050\uffec\051" +
    "\uffec\052\uffec\053\uffec\061\uffec\067\uffec\100\uffec\105\uffec" +
    "\116\uffec\117\uffec\120\uffec\001\002\000\034\045\uffe0\047" +
    "\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\061\uffe0\067\uffe0" +
    "\100\uffe0\105\uffe0\116\uffe0\117\uffe0\120\uffe0\001\002\000" +
    "\034\045\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed" +
    "\061\uffed\067\uffed\100\uffed\105\uffed\116\uffed\117\uffed\120" +
    "\uffed\001\002\000\034\045\uffe5\047\uffe5\050\uffe5\051\uffe5" +
    "\052\uffe5\053\uffe5\061\uffe5\067\uffe5\100\uffe5\105\uffe5\116" +
    "\uffe5\117\uffe5\120\uffe5\001\002\000\034\045\uffea\047\uffea" +
    "\050\uffea\051\uffea\052\uffea\053\uffea\061\uffea\067\uffea\100" +
    "\uffea\105\uffea\116\uffea\117\uffea\120\uffea\001\002\000\034" +
    "\045\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\061" +
    "\uffe4\067\uffe4\100\uffe4\105\uffe4\116\uffe4\117\uffe4\120\uffe4" +
    "\001\002\000\034\045\uffdb\047\uffdb\050\uffdb\051\uffdb\052" +
    "\uffdb\053\uffdb\061\uffdb\067\uffdb\100\uffdb\105\uffdb\116\uffdb" +
    "\117\uffdb\120\uffdb\001\002\000\034\045\uffe9\047\uffe9\050" +
    "\uffe9\051\uffe9\052\uffe9\053\uffe9\061\uffe9\067\uffe9\100\uffe9" +
    "\105\uffe9\116\uffe9\117\uffe9\120\uffe9\001\002\000\034\045" +
    "\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\061\uffda" +
    "\067\uffda\100\uffda\105\uffda\116\uffda\117\uffda\120\uffda\001" +
    "\002\000\034\045\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6" +
    "\053\uffe6\061\uffe6\067\uffe6\100\uffe6\105\uffe6\116\uffe6\117" +
    "\uffe6\120\uffe6\001\002\000\034\045\013\047\031\050\007" +
    "\051\023\052\021\053\022\061\015\067\026\100\020\105" +
    "\012\116\016\117\014\120\025\001\002\000\034\045\uffe3" +
    "\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\061\uffe3\067" +
    "\uffe3\100\uffe3\105\uffe3\116\uffe3\117\uffe3\120\uffe3\001\002" +
    "\000\034\045\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053" +
    "\uffde\061\uffde\067\uffde\100\uffde\105\uffde\116\uffde\117\uffde" +
    "\120\uffde\001\002\000\034\045\uffdd\047\uffdd\050\uffdd\051" +
    "\uffdd\052\uffdd\053\uffdd\061\uffdd\067\uffdd\100\uffdd\105\uffdd" +
    "\116\uffdd\117\uffdd\120\uffdd\001\002\000\034\045\uffeb\047" +
    "\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\061\uffeb\067\uffeb" +
    "\100\uffeb\105\uffeb\116\uffeb\117\uffeb\120\uffeb\001\002\000" +
    "\034\045\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf" +
    "\061\uffdf\067\uffdf\100\uffdf\105\uffdf\116\uffdf\117\uffdf\120" +
    "\uffdf\001\002\000\004\045\064\001\002\000\034\045\uffe7" +
    "\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\061\uffe7\067" +
    "\uffe7\100\uffe7\105\uffe7\116\uffe7\117\uffe7\120\uffe7\001\002" +
    "\000\034\045\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053" +
    "\uffe8\061\uffe8\067\uffe8\100\uffe8\105\uffe8\116\uffe8\117\uffe8" +
    "\120\uffe8\001\002\000\034\045\uffe1\047\uffe1\050\uffe1\051" +
    "\uffe1\052\uffe1\053\uffe1\061\uffe1\067\uffe1\100\uffe1\105\uffe1" +
    "\116\uffe1\117\uffe1\120\uffe1\001\002\000\004\061\066\001" +
    "\002\000\062\041\uffbc\054\uffbc\055\uffbc\060\uffbc\066\uffbc" +
    "\067\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc\074\uffbc\075" +
    "\uffbc\076\uffbc\077\uffbc\101\uffbc\102\uffbc\103\uffbc\104\uffbc" +
    "\106\uffbc\107\uffbc\110\uffbc\111\uffbc\112\uffbc\113\uffbc\001" +
    "\002\000\036\045\072\047\031\050\007\051\023\052\021" +
    "\053\022\060\070\061\015\067\026\100\020\105\012\116" +
    "\016\117\014\120\025\001\002\000\006\054\104\060\uffc3" +
    "\001\002\000\062\041\uffbe\054\uffbe\055\uffbe\060\uffbe\066" +
    "\uffbe\067\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe" +
    "\075\uffbe\076\uffbe\077\uffbe\101\uffbe\102\uffbe\103\uffbe\104" +
    "\uffbe\106\uffbe\107\uffbe\110\uffbe\111\uffbe\112\uffbe\113\uffbe" +
    "\001\002\000\004\060\uffbf\001\002\000\064\046\102\054" +
    "\ufff1\055\ufff1\060\ufff1\061\066\066\ufff1\067\ufff1\070\ufff1" +
    "\071\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1\076\ufff1\077" +
    "\ufff1\101\ufff1\102\ufff1\103\ufff1\104\ufff1\106\ufff1\107\ufff1" +
    "\110\ufff1\111\ufff1\112\ufff1\113\ufff1\001\002\000\006\054" +
    "\077\060\uffc1\001\002\000\060\054\uffc5\055\060\060\uffc5" +
    "\066\041\067\057\070\054\071\055\072\050\073\046\074" +
    "\036\075\053\076\043\077\045\101\037\102\063\103\040" +
    "\104\042\106\051\107\061\110\056\111\044\112\047\113" +
    "\062\001\002\000\004\060\076\001\002\000\062\041\uffbd" +
    "\054\uffbd\055\uffbd\060\uffbd\066\uffbd\067\uffbd\070\uffbd\071" +
    "\uffbd\072\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd" +
    "\101\uffbd\102\uffbd\103\uffbd\104\uffbd\106\uffbd\107\uffbd\110" +
    "\uffbd\111\uffbd\112\uffbd\113\uffbd\001\002\000\034\045\072" +
    "\047\031\050\007\051\023\052\021\053\022\061\015\067" +
    "\026\100\020\105\012\116\016\117\014\120\025\001\002" +
    "\000\004\060\uffc0\001\002\000\062\041\uffbb\054\uffbb\055" +
    "\uffbb\060\uffbb\066\uffbb\067\uffbb\070\uffbb\071\uffbb\072\uffbb" +
    "\073\uffbb\074\uffbb\075\uffbb\076\uffbb\077\uffbb\101\uffbb\102" +
    "\uffbb\103\uffbb\104\uffbb\106\uffbb\107\uffbb\110\uffbb\111\uffbb" +
    "\112\uffbb\113\uffbb\001\002\000\034\045\013\047\031\050" +
    "\007\051\023\052\021\053\022\061\015\067\026\100\020" +
    "\105\012\116\016\117\014\120\025\001\002\000\060\054" +
    "\uffc4\055\060\060\uffc4\066\041\067\057\070\054\071\055" +
    "\072\050\073\046\074\036\075\053\076\043\077\045\101" +
    "\037\102\063\103\040\104\042\106\051\107\061\110\056" +
    "\111\044\112\047\113\062\001\002\000\004\045\106\001" +
    "\002\000\004\060\uffc2\001\002\000\004\046\102\001\002" +
    "\000\062\041\uffd5\054\uffd5\055\060\060\uffd5\066\041\067" +
    "\057\070\054\071\055\072\050\073\046\074\036\075\053" +
    "\076\043\077\045\101\037\102\063\103\040\104\042\106" +
    "\051\107\061\110\056\111\044\112\047\113\062\001\002" +
    "\000\062\041\ufffe\054\ufffe\055\ufffe\060\ufffe\066\ufffe\067" +
    "\ufffe\070\ufffe\071\ufffe\072\ufffe\073\ufffe\074\ufffe\075\ufffe" +
    "\076\ufffe\077\ufffe\101\ufffe\102\ufffe\103\ufffe\104\ufffe\106" +
    "\ufffe\107\ufffe\110\ufffe\111\ufffe\112\ufffe\113\ufffe\001\002" +
    "\000\062\041\ufffc\054\ufffc\055\ufffc\060\ufffc\066\ufffc\067" +
    "\ufffc\070\ufffc\071\ufffc\072\ufffc\073\ufffc\074\ufffc\075\ufffc" +
    "\076\ufffc\077\ufffc\101\ufffc\102\ufffc\103\ufffc\104\ufffc\106" +
    "\ufffc\107\ufffc\110\ufffc\111\ufffc\112\ufffc\113\ufffc\001\002" +
    "\000\062\041\ufffa\054\ufffa\055\ufffa\060\ufffa\066\ufffa\067" +
    "\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa\075\ufffa" +
    "\076\ufffa\077\ufffa\101\ufffa\102\ufffa\103\ufffa\104\ufffa\106" +
    "\ufffa\107\ufffa\110\ufffa\111\ufffa\112\ufffa\113\ufffa\001\002" +
    "\000\056\055\060\060\114\066\041\067\057\070\054\071" +
    "\055\072\050\073\046\074\036\075\053\076\043\077\045" +
    "\101\037\102\063\103\040\104\042\106\051\107\061\110" +
    "\056\111\044\112\047\113\062\001\002\000\062\041\uffd6" +
    "\054\uffd6\055\uffd6\060\uffd6\066\uffd6\067\uffd6\070\uffd6\071" +
    "\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6\077\uffd6" +
    "\101\uffd6\102\uffd6\103\uffd6\104\uffd6\106\uffd6\107\uffd6\110" +
    "\uffd6\111\uffd6\112\uffd6\113\uffd6\001\002\000\004\002\000" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\006\007\003\043\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\002\010\003\007\006\031" +
    "\010\023\024\016\025\027\026\032\027\026\042\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\100\001\001\000\002\001" +
    "\001\000\024\002\010\003\007\006\031\010\112\024\016" +
    "\025\027\026\032\027\026\042\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\002\010\003" +
    "\007\006\031\010\034\024\016\025\027\026\032\027\026" +
    "\042\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\002\010\003\007\006\031\010\106\024\016" +
    "\025\027\026\032\027\026\042\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\064\001\001" +
    "\000\002\001\001\000\034\002\010\003\007\006\031\010" +
    "\073\017\072\020\066\021\070\022\074\024\016\025\027" +
    "\026\032\027\026\042\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\100\001\001" +
    "\000\002\001\001\000\004\005\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\002\010\003\007\006\031" +
    "\010\073\017\072\020\066\021\070\022\077\024\016\025" +
    "\027\026\032\027\026\042\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\002\010\003\007\006\031\010" +
    "\102\024\016\025\027\026\032\027\026\042\033\001\001" +
    "\000\004\005\051\001\001\000\006\020\066\021\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    //MANTENGO UN STACK DE GENERADORES Y PUSHEO EL PRIMERO
    ParserStatus.StackGenerador.push(new Generador());

    }





    public void syntax_error(Symbol s){
        System.out.println("Error de sintaxis "+s.sym+" en la linea "+(s.left+1)+" y la columna "+s.right);
        System.out.println(s.value);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error de sintaxis "+s.sym);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // if_stmt ::= IF expression COLON suite NEWLINE ELSE COLON suite NEWLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // if_stmt ::= IF expression COLON suite NEWLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // suite ::= NEWLINE INDENT stmt_list DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("suite",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // suite ::= stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("suite",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // stmt_list ::= stmt stmt_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // stmt_list ::= stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // compound_stmt ::= func_def 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // compound_stmt ::= for_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // compound_stmt ::= while_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // compound_stmt ::= if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // stmt ::= compound_stmt NEWLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // stmt ::= small_stmt NEWLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // small_stmt ::= flow_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // small_stmt ::= print_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // small_stmt ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // small_stmt ::= expr_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // flow_stmt ::= return_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // flow_stmt ::= CONTINUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // flow_stmt ::= BREAK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // func_call ::= NAME trailer 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // func_call ::= expression DOT NAME trailer 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // trailer ::= LPAREN argument_list RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("trailer",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // trailer ::= LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("trailer",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // argument_list ::= named_argument_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // argument_list ::= argument COMA argument_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // argument_list ::= argument 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // named_argument_list ::= named_argument COMA named_argument_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("named_argument_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // named_argument_list ::= named_argument 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("named_argument_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // named_argument ::= NAME ASSIGN expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("named_argument",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // argument ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr_stmt ::= namelist ASSIGN testlist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // namelist ::= NAME namecoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("namelist",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // namelist ::= NAME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("namelist",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // namecoma ::= COMA NAME namecoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("namecoma",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // namecoma ::= COMA NAME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("namecoma",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // return_stmt ::= RETURN testlist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // return_stmt ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // testlist ::= expression testcoma COMA 
            {
              Object RESULT =null;
		 System.out.println("TESTLIST 4"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("testlist",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // testlist ::= expression testcoma 
            {
              Object RESULT =null;
		 System.out.println("TESTLIST 3"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("testlist",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // testlist ::= expression COMA 
            {
              Object RESULT =null;
		 System.out.println("TESTLIST 2"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("testlist",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // testlist ::= expression 
            {
              Object RESULT =null;
		 System.out.println("TESTLIST 1"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("testlist",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // testcoma ::= COMA expression testcoma 
            {
              Object RESULT =null;
		 System.out.println("TESTCOMA 2"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("testcoma",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // testcoma ::= COMA expression 
            {
              Object RESULT =null;
		 System.out.println("TESTCOMA 1"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("testcoma",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // print_stmt ::= PRINT expression 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generatePrint(p,n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= unary_operator expression 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateUnaryOperation(op,a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= expression binary_operator expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= atom 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.loadNameOrConst(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // unary_operator ::= NOTB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // unary_operator ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // binary_operator ::= EXP 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // binary_operator ::= DIVE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // binary_operator ::= MOD 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // binary_operator ::= DIV 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // binary_operator ::= MULT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // binary_operator ::= MINUS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // binary_operator ::= PLUS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // binary_operator ::= SHIFTR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // binary_operator ::= SHIFTL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // binary_operator ::= ANDB 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // binary_operator ::= XORB 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // binary_operator ::= ORB 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // binary_operator ::= EQUALS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // binary_operator ::= DIFF 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // binary_operator ::= MAJOREQ 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // binary_operator ::= MINOREQ 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // binary_operator ::= MAJOR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // binary_operator ::= MINOR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // binary_operator ::= AND 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // binary_operator ::= OR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // atom ::= func_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // atom ::= constant 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // atom ::= name 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // name ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = RuleGenerator.generateName((LexerToken)n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constant ::= FALSE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constant ::= TRUE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constant ::= NONE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constant ::= STRING3 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constant ::= STRING 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constant ::= float 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constant ::= long 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constant ::= integer 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // float ::= MINUS FLOAT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateMinusConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("float",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // float ::= FLOAT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("float",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // long ::= MINUS LONG 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateMinusConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("long",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // long ::= LONG 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("long",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // integer ::= MINUS INTEGER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateMinusConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // integer ::= INTEGER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= print_stmt NEWLINE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    System.out.println("EL PROGRAMA ESTA BIEN");
    Bloque bloq = ParseResult.getAs(b);
    Code code = ParserStatus.StackGenerador.peek().crearCodigo("lala","lala",bloq);
    RESULT = code;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

