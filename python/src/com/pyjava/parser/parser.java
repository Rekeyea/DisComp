
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jul 12 02:03:07 UYT 2015
//----------------------------------------------------

package com.pyjava.parser;

import com.pyjava.core.exceptions.PyException;
import com.pyjava.core.runtime.*;
import java_cup.runtime.*;
import com.pyjava.parser.codegen.*;
import com.pyjava.core.*;
import java.util.Deque;
import java.util.LinkedList;
import java.util.Scanner;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jul 12 02:03:07 UYT 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\011\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\003\003\000\002\003\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\006\003\000\002\006\003" +
    "\000\002\010\003\000\002\010\005\000\002\010\005\000" +
    "\002\010\004\000\002\004\005\000\002\007\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\053\000\032\045\024\047\004\050\006\051\023\052" +
    "\011\053\016\061\022\100\020\105\021\116\017\117\007" +
    "\120\013\001\002\000\052\041\uffff\060\uffff\066\uffff\067" +
    "\uffff\070\uffff\071\uffff\074\uffff\075\uffff\076\uffff\077\uffff" +
    "\101\uffff\102\uffff\103\uffff\104\uffff\106\uffff\107\uffff\110" +
    "\uffff\111\uffff\112\uffff\113\uffff\001\002\000\032\045\024" +
    "\047\004\050\006\051\023\052\011\053\016\061\022\100" +
    "\020\105\021\116\017\117\007\120\013\001\002\000\052" +
    "\041\ufffe\060\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\074" +
    "\ufffe\075\ufffe\076\ufffe\077\ufffe\101\ufffe\102\ufffe\103\ufffe" +
    "\104\ufffe\106\ufffe\107\ufffe\110\ufffe\111\ufffe\112\ufffe\113" +
    "\ufffe\001\002\000\052\041\ufff9\060\ufff9\066\ufff9\067\ufff9" +
    "\070\ufff9\071\ufff9\074\ufff9\075\ufff9\076\ufff9\077\ufff9\101" +
    "\ufff9\102\ufff9\103\ufff9\104\ufff9\106\ufff9\107\ufff9\110\ufff9" +
    "\111\ufff9\112\ufff9\113\ufff9\001\002\000\004\002\054\001" +
    "\002\000\052\041\ufffc\060\ufffc\066\ufffc\067\ufffc\070\ufffc" +
    "\071\ufffc\074\ufffc\075\ufffc\076\ufffc\077\ufffc\101\ufffc\102" +
    "\ufffc\103\ufffc\104\ufffc\106\ufffc\107\ufffc\110\ufffc\111\ufffc" +
    "\112\ufffc\113\ufffc\001\002\000\052\041\uffe1\060\uffe1\066" +
    "\uffe1\067\uffe1\070\uffe1\071\uffe1\074\uffe1\075\uffe1\076\uffe1" +
    "\077\uffe1\101\uffe1\102\uffe1\103\uffe1\104\uffe1\106\uffe1\107" +
    "\uffe1\110\uffe1\111\uffe1\112\uffe1\113\uffe1\001\002\000\052" +
    "\041\ufff8\060\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8\074" +
    "\ufff8\075\ufff8\076\ufff8\077\ufff8\101\ufff8\102\ufff8\103\ufff8" +
    "\104\ufff8\106\ufff8\107\ufff8\110\ufff8\111\ufff8\112\ufff8\113" +
    "\ufff8\001\002\000\050\041\053\066\031\067\046\070\042" +
    "\071\044\074\027\075\043\076\034\077\036\101\026\102" +
    "\051\103\030\104\032\106\040\107\047\110\045\111\035" +
    "\112\037\113\050\001\002\000\052\041\ufff6\060\ufff6\066" +
    "\ufff6\067\ufff6\070\ufff6\071\ufff6\074\ufff6\075\ufff6\076\ufff6" +
    "\077\ufff6\101\ufff6\102\ufff6\103\ufff6\104\ufff6\106\ufff6\107" +
    "\ufff6\110\ufff6\111\ufff6\112\ufff6\113\ufff6\001\002\000\052" +
    "\041\ufffb\060\ufffb\066\ufffb\067\ufffb\070\ufffb\071\ufffb\074" +
    "\ufffb\075\ufffb\076\ufffb\077\ufffb\101\ufffb\102\ufffb\103\ufffb" +
    "\104\ufffb\106\ufffb\107\ufffb\110\ufffb\111\ufffb\112\ufffb\113" +
    "\ufffb\001\002\000\052\041\ufffa\060\ufffa\066\ufffa\067\ufffa" +
    "\070\ufffa\071\ufffa\074\ufffa\075\ufffa\076\ufffa\077\ufffa\101" +
    "\ufffa\102\ufffa\103\ufffa\104\ufffa\106\ufffa\107\ufffa\110\ufffa" +
    "\111\ufffa\112\ufffa\113\ufffa\001\002\000\032\045\uffe2\047" +
    "\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\061\uffe2\100\uffe2" +
    "\105\uffe2\116\uffe2\117\uffe2\120\uffe2\001\002\000\032\045" +
    "\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\061\uffe3" +
    "\100\uffe3\105\uffe3\116\uffe3\117\uffe3\120\uffe3\001\002\000" +
    "\032\045\024\047\004\050\006\051\023\052\011\053\016" +
    "\061\022\100\020\105\021\116\017\117\007\120\013\001" +
    "\002\000\052\041\ufffd\060\ufffd\066\ufffd\067\ufffd\070\ufffd" +
    "\071\ufffd\074\ufffd\075\ufffd\076\ufffd\077\ufffd\101\ufffd\102" +
    "\ufffd\103\ufffd\104\ufffd\106\ufffd\107\ufffd\110\ufffd\111\ufffd" +
    "\112\ufffd\113\ufffd\001\002\000\052\041\ufff7\060\ufff7\066" +
    "\ufff7\067\ufff7\070\ufff7\071\ufff7\074\ufff7\075\ufff7\076\ufff7" +
    "\077\ufff7\101\ufff7\102\ufff7\103\ufff7\104\ufff7\106\ufff7\107" +
    "\ufff7\110\ufff7\111\ufff7\112\ufff7\113\ufff7\001\002\000\050" +
    "\060\033\066\031\067\046\070\042\071\044\074\027\075" +
    "\043\076\034\077\036\101\026\102\051\103\030\104\032" +
    "\106\040\107\047\110\045\111\035\112\037\113\050\001" +
    "\002\000\032\045\uffea\047\uffea\050\uffea\051\uffea\052\uffea" +
    "\053\uffea\061\uffea\100\uffea\105\uffea\116\uffea\117\uffea\120" +
    "\uffea\001\002\000\032\045\uffe4\047\uffe4\050\uffe4\051\uffe4" +
    "\052\uffe4\053\uffe4\061\uffe4\100\uffe4\105\uffe4\116\uffe4\117" +
    "\uffe4\120\uffe4\001\002\000\032\045\ufff4\047\ufff4\050\ufff4" +
    "\051\ufff4\052\ufff4\053\ufff4\061\ufff4\100\ufff4\105\ufff4\116" +
    "\ufff4\117\ufff4\120\ufff4\001\002\000\032\045\uffe8\047\uffe8" +
    "\050\uffe8\051\uffe8\052\uffe8\053\uffe8\061\uffe8\100\uffe8\105" +
    "\uffe8\116\uffe8\117\uffe8\120\uffe8\001\002\000\032\045\ufff5" +
    "\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\061\ufff5\100" +
    "\ufff5\105\ufff5\116\ufff5\117\ufff5\120\ufff5\001\002\000\052" +
    "\041\uffe0\060\uffe0\066\uffe0\067\uffe0\070\uffe0\071\uffe0\074" +
    "\uffe0\075\uffe0\076\uffe0\077\uffe0\101\uffe0\102\uffe0\103\uffe0" +
    "\104\uffe0\106\uffe0\107\uffe0\110\uffe0\111\uffe0\112\uffe0\113" +
    "\uffe0\001\002\000\032\045\uffed\047\uffed\050\uffed\051\uffed" +
    "\052\uffed\053\uffed\061\uffed\100\uffed\105\uffed\116\uffed\117" +
    "\uffed\120\uffed\001\002\000\032\045\ufff2\047\ufff2\050\ufff2" +
    "\051\ufff2\052\ufff2\053\ufff2\061\ufff2\100\ufff2\105\ufff2\116" +
    "\ufff2\117\ufff2\120\ufff2\001\002\000\032\045\uffec\047\uffec" +
    "\050\uffec\051\uffec\052\uffec\053\uffec\061\uffec\100\uffec\105" +
    "\uffec\116\uffec\117\uffec\120\uffec\001\002\000\032\045\ufff1" +
    "\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\061\ufff1\100" +
    "\ufff1\105\ufff1\116\ufff1\117\ufff1\120\ufff1\001\002\000\032" +
    "\045\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053\uffee\061" +
    "\uffee\100\uffee\105\uffee\116\uffee\117\uffee\120\uffee\001\002" +
    "\000\032\045\024\047\004\050\006\051\023\052\011\053" +
    "\016\061\022\100\020\105\021\116\017\117\007\120\013" +
    "\001\002\000\032\045\uffe6\047\uffe6\050\uffe6\051\uffe6\052" +
    "\uffe6\053\uffe6\061\uffe6\100\uffe6\105\uffe6\116\uffe6\117\uffe6" +
    "\120\uffe6\001\002\000\032\045\uffeb\047\uffeb\050\uffeb\051" +
    "\uffeb\052\uffeb\053\uffeb\061\uffeb\100\uffeb\105\uffeb\116\uffeb" +
    "\117\uffeb\120\uffeb\001\002\000\032\045\uffe5\047\uffe5\050" +
    "\uffe5\051\uffe5\052\uffe5\053\uffe5\061\uffe5\100\uffe5\105\uffe5" +
    "\116\uffe5\117\uffe5\120\uffe5\001\002\000\032\045\ufff3\047" +
    "\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\061\ufff3\100\ufff3" +
    "\105\ufff3\116\ufff3\117\ufff3\120\ufff3\001\002\000\032\045" +
    "\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\061\uffe7" +
    "\100\uffe7\105\uffe7\116\uffe7\117\uffe7\120\uffe7\001\002\000" +
    "\032\045\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef" +
    "\061\uffef\100\uffef\105\uffef\116\uffef\117\uffef\120\uffef\001" +
    "\002\000\032\045\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0" +
    "\053\ufff0\061\ufff0\100\ufff0\105\ufff0\116\ufff0\117\ufff0\120" +
    "\ufff0\001\002\000\032\045\uffe9\047\uffe9\050\uffe9\051\uffe9" +
    "\052\uffe9\053\uffe9\061\uffe9\100\uffe9\105\uffe9\116\uffe9\117" +
    "\uffe9\120\uffe9\001\002\000\052\041\uffdf\060\uffdf\066\031" +
    "\067\046\070\042\071\044\074\027\075\043\076\034\077" +
    "\036\101\026\102\051\103\030\104\032\106\040\107\047" +
    "\110\045\111\035\112\037\113\050\001\002\000\004\002" +
    "\001\001\002\000\004\002\000\001\002\000\052\041\uffde" +
    "\060\uffde\066\031\067\046\070\042\071\044\074\027\075" +
    "\043\076\034\077\036\101\026\102\051\103\030\104\032" +
    "\106\040\107\047\110\045\111\035\112\037\113\050\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\053\000\014\002\014\003\011\006\004\010\013\011" +
    "\007\001\001\000\002\001\001\000\012\002\014\003\011" +
    "\006\004\010\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\014\003\011\006\004\010" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\002\014" +
    "\003\011\006\004\010\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\040\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    //MANTENGO UN STACK DE GENERADORES Y PUSHEO EL PRIMERO
    ParserStatus.StackGenerador.push(new Generador());

    }





    public void syntax_error(Symbol s){
        System.out.println("Error de sintaxis "+s.sym+" en la linea "+(s.left+1)+" y la columna "+s.right);
        System.out.println(s.value);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error de sintaxis "+s.sym);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // print_stmt ::= PRINT NAME 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                        /*
                                        int lineNumber = ((LexerToken)p).NumeroFila;
                                        Name name = ParserStatus.StackGenerador.peek().createName(((LexerToken)n).TokenValue);
                                        LinkedList<Instruccion> instrucciones = new LinkedList<>();
                                        instrucciones.add(new Instruccion(lineNumber, OpCode.LOAD_NAME,(name).index));
                                        instrucciones.add(new Instruccion(lineNumber, OpCode.PRINT_ITEM,0));
                                        instrucciones.add(new Instruccion(lineNumber, OpCode.PRINT_NEWLINE,0));
                                        RESULT = ParserStatus.StackGenerador.peek().crearBloque(instrucciones,null,null);
                                        */
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // assignment ::= atom ASSIGN atom 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int auleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int auright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object au = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                            /*int lineNumber = ((LexerToken)au).NumeroFila;
                                            LinkedList<Instruccion> instrucciones = new LinkedList<>();
                                            if(b instanceof Const){
                                                instrucciones.add(new Instruccion(lineNumber, OpCode.LOAD_CONST,((Const)b).index));
                                            }else{
                                                instrucciones.add(new Instruccion(lineNumber, OpCode.LOAD_NAME, ((Name)b).index));
                                            }
                                            instrucciones.add(new Instruccion(lineNumber,OpCode.STORE_NAME,((Name)a).index));
                                            RESULT = ParserStatus.StackGenerador.peek().crearBloque(instrucciones,null,null);
                                            */
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= unary_operator expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= expression binary_operator expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("a: "+a+" b: "+b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("DETECTA PARENTESIS CON: "+n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= atom 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // unary_operator ::= NOTB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // unary_operator ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // binary_operator ::= MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // binary_operator ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // binary_operator ::= MULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // binary_operator ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // binary_operator ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // binary_operator ::= SHIFTR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // binary_operator ::= SHIFTL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // binary_operator ::= ANDB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // binary_operator ::= XORB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // binary_operator ::= ORB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // binary_operator ::= EQUALS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // binary_operator ::= DIFF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // binary_operator ::= MAJOREQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // binary_operator ::= MINOREQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // binary_operator ::= MAJOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // binary_operator ::= MINOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // binary_operator ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // binary_operator ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // atom ::= constant 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n;/*RESULT = n;*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // atom ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ((LexerToken)n).TokenValue;/*RESULT = RuleGenerator.generateName((LexerToken)n);*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constant ::= FALSE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = RuleGenerator.generateConstant((LexerToken)n);*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constant ::= TRUE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = RuleGenerator.generateConstant((LexerToken)n);*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // constant ::= NONE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = RuleGenerator.generateConstant((LexerToken)n);*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // constant ::= STRING3 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = RuleGenerator.generateConstant((LexerToken)n);*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // constant ::= STRING 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = RuleGenerator.generateConstant((LexerToken)n);*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // constant ::= FLOAT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = RuleGenerator.generateConstant((LexerToken)n);*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // constant ::= LONG 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = RuleGenerator.generateConstant((LexerToken)n);*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // constant ::= INTEGER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ((LexerToken)n).TokenValue;/*RESULT = RuleGenerator.generateConstant((LexerToken)n);*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= expression NEWLINE 
            {
              Object RESULT =null;
		
    /*Bloque b1 = (Bloque)a;
    Bloque b2 = (Bloque)b;
    Bloque bRes = ParserStatus.StackGenerador.peek().crearBloque(b1.instrucciones,null,b2.instrucciones);
    Code code = ParserStatus.StackGenerador.peek().crearCodigo("lala","lala",bRes);
    RESULT = code;*/

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

