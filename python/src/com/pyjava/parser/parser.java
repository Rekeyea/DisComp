
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jul 17 02:08:52 UYT 2015
//----------------------------------------------------

package com.pyjava.parser;

import com.pyjava.core.exceptions.PyException;
import com.pyjava.core.runtime.*;
import java_cup.runtime.*;
import com.pyjava.parser.codegen.*;
import com.pyjava.core.*;
import java.util.Deque;
import java.util.LinkedList;
import java.util.Scanner;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jul 17 02:08:52 UYT 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\223\000\002\067\003\000\002\002\004\000\002\065" +
    "\003\000\002\065\003\000\002\065\004\000\002\065\004" +
    "\000\002\034\003\000\002\034\003\000\002\066\004\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\062\005\000\002\062\004" +
    "\000\002\062\003\000\002\060\003\000\002\060\003\000" +
    "\002\061\003\000\002\061\004\000\002\027\003\000\002" +
    "\027\004\000\002\031\003\000\002\031\004\000\002\030" +
    "\003\000\002\030\004\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\043\003\000\002\003\003\000\002\003\003\000\002\051" +
    "\004\000\002\051\005\000\002\052\003\000\002\052\005" +
    "\000\002\053\004\000\002\053\005\000\002\050\004\000" +
    "\002\050\005\000\002\047\003\000\002\047\005\000\002" +
    "\046\005\000\002\046\004\000\002\045\005\000\002\044" +
    "\003\000\002\044\005\000\002\055\005\000\002\055\006" +
    "\000\002\011\003\000\002\011\004\000\002\011\003\000" +
    "\002\011\004\000\002\011\004\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\006\000\002\011" +
    "\005\000\002\011\006\000\002\011\006\000\002\011\007" +
    "\000\002\056\004\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\004\000" +
    "\002\010\004\000\002\054\003\000\002\054\005\000\002" +
    "\007\004\000\002\015\003\000\002\015\004\000\002\015" +
    "\004\000\002\057\004\000\002\016\004\000\002\016\004" +
    "\000\002\016\005\000\002\016\005\000\002\017\004\000" +
    "\002\017\004\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\022\005\000\002\023\003\000\002\023\005" +
    "\000\002\024\003\000\002\024\005\000\002\024\003\000" +
    "\002\025\004\000\002\025\005\000\002\026\006\000\002" +
    "\026\004\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\041\003\000\002\041\004\000\002\042\003" +
    "\000\002\042\006\000\002\036\006\000\002\036\011\000" +
    "\002\040\010\000\002\037\006\000\002\064\003\000\002" +
    "\064\005\000\002\070\002\000\002\063\012\000\002\071" +
    "\002\000\002\063\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\062\006\052\015\026\020\040\027\014\032" +
    "\031\033\060\034\015\040\065\041\035\045\043\047\011" +
    "\050\056\051\053\052\057\053\022\061\012\063\007\065" +
    "\034\067\016\100\051\105\020\116\050\117\032\120\064" +
    "\001\002\000\072\041\uffb6\054\uffb6\055\uffb6\056\uffb6\060" +
    "\uffb6\062\uffb6\063\uffb6\064\uffb6\066\uffb6\067\uffb6\070\uffb6" +
    "\071\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6\077" +
    "\uffb6\101\uffb6\102\uffb6\103\uffb6\104\uffb6\106\uffb6\107\uffb6" +
    "\110\uffb6\111\uffb6\112\uffb6\113\uffb6\001\002\000\004\002" +
    "\342\001\002\000\072\041\uffb9\054\uffb9\055\uffb9\056\uffb9" +
    "\060\uffb9\062\uffb9\063\uffb9\064\uffb9\066\uffb9\067\uffb9\070" +
    "\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\076\uffb9" +
    "\077\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9\106\uffb9\107" +
    "\uffb9\110\uffb9\111\uffb9\112\uffb9\113\uffb9\001\002\000\042" +
    "\045\043\047\011\050\056\051\053\052\057\053\022\061" +
    "\012\062\334\063\007\065\034\067\016\100\051\105\020" +
    "\116\050\117\032\120\064\001\002\000\070\002\ufff2\006" +
    "\ufff2\014\ufff2\015\ufff2\020\ufff2\027\ufff2\032\ufff2\033\ufff2" +
    "\034\ufff2\040\ufff2\041\ufff2\045\ufff2\047\ufff2\050\ufff2\051" +
    "\ufff2\052\ufff2\053\ufff2\061\ufff2\063\ufff2\065\ufff2\067\ufff2" +
    "\100\ufff2\105\ufff2\115\ufff2\116\ufff2\117\ufff2\120\ufff2\001" +
    "\002\000\072\041\uffe9\054\uffe9\055\uffe9\056\uffe9\060\uffe9" +
    "\062\uffe9\063\uffe9\064\uffe9\066\uffe9\067\uffe9\070\uffe9\071" +
    "\uffe9\072\uffe9\073\uffe9\074\uffe9\075\uffe9\076\uffe9\077\uffe9" +
    "\101\uffe9\102\uffe9\103\uffe9\104\uffe9\106\uffe9\107\uffe9\110" +
    "\uffe9\111\uffe9\112\uffe9\113\uffe9\001\002\000\042\045\043" +
    "\047\011\050\056\051\053\052\057\053\022\060\327\061" +
    "\012\063\007\065\034\067\016\100\051\105\020\116\050" +
    "\117\032\120\064\001\002\000\004\041\ufff6\001\002\000" +
    "\004\041\uff7e\001\002\000\004\045\043\001\002\000\010" +
    "\047\317\050\320\051\321\001\002\000\066\041\uffda\046" +
    "\314\054\256\055\uffda\061\075\063\uffda\066\uffda\067\uffda" +
    "\070\uffda\071\uffda\072\uffda\073\uffda\074\uffda\075\uffda\076" +
    "\uffda\077\uffda\101\uffda\102\uffda\103\uffda\104\uffda\106\uffda" +
    "\107\uffda\110\uffda\111\uffda\112\uffda\113\uffda\001\002\000" +
    "\040\045\043\047\011\050\056\051\053\052\057\053\022" +
    "\061\012\063\007\065\034\067\016\100\051\105\020\116" +
    "\050\117\032\120\064\001\002\000\070\002\ufff1\006\ufff1" +
    "\014\ufff1\015\ufff1\020\ufff1\027\ufff1\032\ufff1\033\ufff1\034" +
    "\ufff1\040\ufff1\041\ufff1\045\ufff1\047\ufff1\050\ufff1\051\ufff1" +
    "\052\ufff1\053\ufff1\061\ufff1\063\ufff1\065\ufff1\067\ufff1\100" +
    "\ufff1\105\ufff1\115\ufff1\116\ufff1\117\ufff1\120\ufff1\001\002" +
    "\000\072\041\uffdf\054\uffdf\055\uffdf\056\uffdf\060\uffdf\062" +
    "\uffdf\063\uffdf\064\uffdf\066\uffdf\067\uffdf\070\uffdf\071\uffdf" +
    "\072\uffdf\073\uffdf\074\uffdf\075\uffdf\076\uffdf\077\uffdf\101" +
    "\uffdf\102\uffdf\103\uffdf\104\uffdf\106\uffdf\107\uffdf\110\uffdf" +
    "\111\uffdf\112\uffdf\113\uffdf\001\002\000\070\002\ufffa\006" +
    "\ufffa\014\ufffa\015\ufffa\020\ufffa\027\ufffa\032\ufffa\033\ufffa" +
    "\034\ufffa\040\ufffa\041\ufffa\045\ufffa\047\ufffa\050\ufffa\051" +
    "\ufffa\052\ufffa\053\ufffa\061\ufffa\063\ufffa\065\ufffa\067\ufffa" +
    "\100\ufffa\105\ufffa\115\ufffa\116\ufffa\117\ufffa\120\ufffa\001" +
    "\002\000\004\041\uff7d\001\002\000\072\041\uffb7\054\uffb7" +
    "\055\uffb7\056\uffb7\060\uffb7\062\uffb7\063\uffb7\064\uffb7\066" +
    "\uffb7\067\uffb7\070\uffb7\071\uffb7\072\uffb7\073\uffb7\074\uffb7" +
    "\075\uffb7\076\uffb7\077\uffb7\101\uffb7\102\uffb7\103\uffb7\104" +
    "\uffb7\106\uffb7\107\uffb7\110\uffb7\111\uffb7\112\uffb7\113\uffb7" +
    "\001\002\000\040\045\043\047\011\050\056\051\053\052" +
    "\057\053\022\061\012\063\007\065\034\067\016\100\051" +
    "\105\020\116\050\117\032\120\064\001\002\000\060\041" +
    "\ufff7\055\130\063\117\066\110\067\127\070\123\071\125" +
    "\072\120\073\115\074\105\075\124\076\112\077\114\101" +
    "\106\102\134\103\107\104\111\106\121\107\132\110\126" +
    "\111\113\112\116\113\133\001\002\000\072\041\uffe2\054" +
    "\uffe2\055\uffe2\056\uffe2\060\uffe2\062\uffe2\063\uffe2\064\uffe2" +
    "\066\uffe2\067\uffe2\070\uffe2\071\uffe2\072\uffe2\073\uffe2\074" +
    "\uffe2\075\uffe2\076\uffe2\077\uffe2\101\uffe2\102\uffe2\103\uffe2" +
    "\104\uffe2\106\uffe2\107\uffe2\110\uffe2\111\uffe2\112\uffe2\113" +
    "\uffe2\001\002\000\042\041\uff99\045\043\047\011\050\056" +
    "\051\053\052\057\053\022\061\012\063\007\065\034\067" +
    "\016\100\051\105\020\116\050\117\032\120\064\001\002" +
    "\000\072\041\uffdd\054\uffdd\055\uffdd\056\uffdd\060\uffdd\062" +
    "\uffdd\063\uffdd\064\uffdd\066\uffdd\067\uffdd\070\uffdd\071\uffdd" +
    "\072\uffdd\073\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd\101" +
    "\uffdd\102\uffdd\103\uffdd\104\uffdd\106\uffdd\107\uffdd\110\uffdd" +
    "\111\uffdd\112\uffdd\113\uffdd\001\002\000\004\041\ufff8\001" +
    "\002\000\042\045\043\047\011\050\056\051\053\052\057" +
    "\053\022\061\012\063\007\064\271\065\034\067\016\100" +
    "\051\105\020\116\050\117\032\120\064\001\002\000\064" +
    "\002\uffff\006\052\015\026\020\040\027\014\032\031\033" +
    "\060\034\015\040\065\041\035\045\043\047\011\050\056" +
    "\051\053\052\057\053\022\061\012\063\007\065\034\067" +
    "\016\100\051\105\020\116\050\117\032\120\064\001\002" +
    "\000\072\041\uffd9\054\uffd9\055\uffd9\056\uffd9\060\uffd9\062" +
    "\uffd9\063\uffd9\064\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9" +
    "\072\uffd9\073\uffd9\074\uffd9\075\uffd9\076\uffd9\077\uffd9\101" +
    "\uffd9\102\uffd9\103\uffd9\104\uffd9\106\uffd9\107\uffd9\110\uffd9" +
    "\111\uffd9\112\uffd9\113\uffd9\001\002\000\004\041\ufff5\001" +
    "\002\000\004\041\uff7f\001\002\000\070\002\ufff3\006\ufff3" +
    "\014\ufff3\015\ufff3\020\ufff3\027\ufff3\032\ufff3\033\ufff3\034" +
    "\ufff3\040\ufff3\041\ufff3\045\ufff3\047\ufff3\050\ufff3\051\ufff3" +
    "\052\ufff3\053\ufff3\061\ufff3\063\ufff3\065\ufff3\067\ufff3\100" +
    "\ufff3\105\ufff3\115\ufff3\116\ufff3\117\ufff3\120\ufff3\001\002" +
    "\000\070\002\ufffb\006\ufffb\014\ufffb\015\ufffb\020\ufffb\027" +
    "\ufffb\032\ufffb\033\ufffb\034\ufffb\040\ufffb\041\ufffb\045\ufffb" +
    "\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\061\ufffb\063" +
    "\ufffb\065\ufffb\067\ufffb\100\ufffb\105\ufffb\115\ufffb\116\ufffb" +
    "\117\ufffb\120\ufffb\001\002\000\100\025\uffdb\041\uffdb\046" +
    "\uffdb\054\uffdb\055\uffdb\056\uffdb\060\uffdb\061\uffdb\062\uffdb" +
    "\063\uffdb\064\uffdb\066\uffdb\067\uffdb\070\uffdb\071\uffdb\072" +
    "\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb\101\uffdb" +
    "\102\uffdb\103\uffdb\104\uffdb\106\uffdb\107\uffdb\110\uffdb\111" +
    "\uffdb\112\uffdb\113\uffdb\001\002\000\072\041\uffe3\054\uffe3" +
    "\055\uffe3\056\uffe3\060\uffe3\062\uffe3\063\uffe3\064\uffe3\066" +
    "\uffe3\067\uffe3\070\uffe3\071\uffe3\072\uffe3\073\uffe3\074\uffe3" +
    "\075\uffe3\076\uffe3\077\uffe3\101\uffe3\102\uffe3\103\uffe3\104" +
    "\uffe3\106\uffe3\107\uffe3\110\uffe3\111\uffe3\112\uffe3\113\uffe3" +
    "\001\002\000\006\046\257\054\256\001\002\000\004\002" +
    "\001\001\002\000\072\041\uffe1\054\uffe1\055\uffe1\056\uffe1" +
    "\060\uffe1\062\uffe1\063\uffe1\064\uffe1\066\uffe1\067\uffe1\070" +
    "\uffe1\071\uffe1\072\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1" +
    "\077\uffe1\101\uffe1\102\uffe1\103\uffe1\104\uffe1\106\uffe1\107" +
    "\uffe1\110\uffe1\111\uffe1\112\uffe1\113\uffe1\001\002\000\072" +
    "\041\uffde\054\uffde\055\uffde\056\uffde\060\uffde\062\uffde\063" +
    "\uffde\064\uffde\066\uffde\067\uffde\070\uffde\071\uffde\072\uffde" +
    "\073\uffde\074\uffde\075\uffde\076\uffde\077\uffde\101\uffde\102" +
    "\uffde\103\uffde\104\uffde\106\uffde\107\uffde\110\uffde\111\uffde" +
    "\112\uffde\113\uffde\001\002\000\040\045\043\047\011\050" +
    "\056\051\053\052\057\053\022\061\012\063\007\065\034" +
    "\067\016\100\051\105\020\116\050\117\032\120\064\001" +
    "\002\000\040\045\043\047\011\050\056\051\053\052\057" +
    "\053\022\061\012\063\007\065\034\067\016\100\051\105" +
    "\020\116\050\117\032\120\064\001\002\000\072\041\uffe5" +
    "\054\uffe5\055\uffe5\056\uffe5\060\uffe5\062\uffe5\063\uffe5\064" +
    "\uffe5\066\uffe5\067\uffe5\070\uffe5\071\uffe5\072\uffe5\073\uffe5" +
    "\074\uffe5\075\uffe5\076\uffe5\077\uffe5\101\uffe5\102\uffe5\103" +
    "\uffe5\104\uffe5\106\uffe5\107\uffe5\110\uffe5\111\uffe5\112\uffe5" +
    "\113\uffe5\001\002\000\072\041\uffb4\054\uffb4\055\uffb4\056" +
    "\uffb4\060\uffb4\062\uffb4\063\uffb4\064\uffb4\066\uffb4\067\uffb4" +
    "\070\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4\076" +
    "\uffb4\077\uffb4\101\uffb4\102\uffb4\103\uffb4\104\uffb4\106\uffb4" +
    "\107\uffb4\110\uffb4\111\uffb4\112\uffb4\113\uffb4\001\002\000" +
    "\072\041\uffb8\054\uffb8\055\uffb8\056\uffb8\060\uffb8\062\uffb8" +
    "\063\uffb8\064\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8\072" +
    "\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\101\uffb8" +
    "\102\uffb8\103\uffb8\104\uffb8\106\uffb8\107\uffb8\110\uffb8\111" +
    "\uffb8\112\uffb8\113\uffb8\001\002\000\072\041\uffe7\054\uffe7" +
    "\055\uffe7\056\uffe7\060\uffe7\062\uffe7\063\uffe7\064\uffe7\066" +
    "\uffe7\067\uffe7\070\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7" +
    "\075\uffe7\076\uffe7\077\uffe7\101\uffe7\102\uffe7\103\uffe7\104" +
    "\uffe7\106\uffe7\107\uffe7\110\uffe7\111\uffe7\112\uffe7\113\uffe7" +
    "\001\002\000\072\041\uffe0\054\uffe0\055\uffe0\056\uffe0\060" +
    "\uffe0\062\uffe0\063\uffe0\064\uffe0\066\uffe0\067\uffe0\070\uffe0" +
    "\071\uffe0\072\uffe0\073\uffe0\074\uffe0\075\uffe0\076\uffe0\077" +
    "\uffe0\101\uffe0\102\uffe0\103\uffe0\104\uffe0\106\uffe0\107\uffe0" +
    "\110\uffe0\111\uffe0\112\uffe0\113\uffe0\001\002\000\004\045" +
    "\043\001\002\000\070\002\ufff4\006\ufff4\014\ufff4\015\ufff4" +
    "\020\ufff4\027\ufff4\032\ufff4\033\ufff4\034\ufff4\040\ufff4\041" +
    "\ufff4\045\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4" +
    "\061\ufff4\063\ufff4\065\ufff4\067\ufff4\100\ufff4\105\ufff4\115" +
    "\ufff4\116\ufff4\117\ufff4\120\ufff4\001\002\000\004\046\214" +
    "\001\002\000\004\041\213\001\002\000\072\041\uffdc\054" +
    "\uffdc\055\uffdc\056\uffdc\060\uffdc\062\uffdc\063\uffdc\064\uffdc" +
    "\066\uffdc\067\uffdc\070\uffdc\071\uffdc\072\uffdc\073\uffdc\074" +
    "\uffdc\075\uffdc\076\uffdc\077\uffdc\101\uffdc\102\uffdc\103\uffdc" +
    "\104\uffdc\106\uffdc\107\uffdc\110\uffdc\111\uffdc\112\uffdc\113" +
    "\uffdc\001\002\000\040\045\043\047\011\050\056\051\053" +
    "\052\057\053\022\061\012\063\007\065\034\067\016\100" +
    "\051\105\020\116\050\117\032\120\064\001\002\000\064" +
    "\002\ufffe\006\052\015\026\020\040\027\014\032\031\033" +
    "\060\034\015\040\065\041\035\045\043\047\011\050\056" +
    "\051\053\052\057\053\022\061\012\063\007\065\034\067" +
    "\016\100\051\105\020\116\050\117\032\120\064\001\002" +
    "\000\072\041\uffb5\054\uffb5\055\uffb5\056\uffb5\060\uffb5\062" +
    "\uffb5\063\uffb5\064\uffb5\066\uffb5\067\uffb5\070\uffb5\071\uffb5" +
    "\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5\077\uffb5\101" +
    "\uffb5\102\uffb5\103\uffb5\104\uffb5\106\uffb5\107\uffb5\110\uffb5" +
    "\111\uffb5\112\uffb5\113\uffb5\001\002\000\004\002\ufffc\001" +
    "\002\000\062\041\uff9c\054\211\055\130\063\117\066\110" +
    "\067\127\070\123\071\125\072\120\073\115\074\105\075" +
    "\124\076\112\077\114\101\106\102\134\103\107\104\111" +
    "\106\121\107\132\110\126\111\113\112\116\113\133\001" +
    "\002\000\004\041\uff9a\001\002\000\074\041\uffda\054\uffda" +
    "\055\uffda\056\uffda\060\uffda\061\075\062\uffda\063\uffda\064" +
    "\uffda\066\uffda\067\uffda\070\uffda\071\uffda\072\uffda\073\uffda" +
    "\074\uffda\075\uffda\076\uffda\077\uffda\101\uffda\102\uffda\103" +
    "\uffda\104\uffda\106\uffda\107\uffda\110\uffda\111\uffda\112\uffda" +
    "\113\uffda\001\002\000\072\041\uff80\054\uff80\055\uff80\056" +
    "\uff80\060\uff80\062\uff80\063\uff80\064\uff80\066\uff80\067\uff80" +
    "\070\uff80\071\uff80\072\uff80\073\uff80\074\uff80\075\uff80\076" +
    "\uff80\077\uff80\101\uff80\102\uff80\103\uff80\104\uff80\106\uff80" +
    "\107\uff80\110\uff80\111\uff80\112\uff80\113\uff80\001\002\000" +
    "\042\045\101\047\011\050\056\051\053\052\057\053\022" +
    "\060\077\061\012\063\007\065\034\067\016\100\051\105" +
    "\020\116\050\117\032\120\064\001\002\000\006\054\206" +
    "\060\uff88\001\002\000\072\041\uff83\054\uff83\055\uff83\056" +
    "\uff83\060\uff83\062\uff83\063\uff83\064\uff83\066\uff83\067\uff83" +
    "\070\uff83\071\uff83\072\uff83\073\uff83\074\uff83\075\uff83\076" +
    "\uff83\077\uff83\101\uff83\102\uff83\103\uff83\104\uff83\106\uff83" +
    "\107\uff83\110\uff83\111\uff83\112\uff83\113\uff83\001\002\000" +
    "\004\060\uff84\001\002\000\066\046\204\054\uffdb\055\uffdb" +
    "\060\uffdb\061\uffdb\063\uffdb\066\uffdb\067\uffdb\070\uffdb\071" +
    "\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb" +
    "\101\uffdb\102\uffdb\103\uffdb\104\uffdb\106\uffdb\107\uffdb\110" +
    "\uffdb\111\uffdb\112\uffdb\113\uffdb\001\002\000\062\054\122" +
    "\055\130\060\uff86\063\117\066\110\067\127\070\123\071" +
    "\125\072\120\073\115\074\105\075\124\076\112\077\114" +
    "\101\106\102\134\103\107\104\111\106\121\107\132\110" +
    "\126\111\113\112\116\113\133\001\002\000\004\060\104" +
    "\001\002\000\072\041\uff82\054\uff82\055\uff82\056\uff82\060" +
    "\uff82\062\uff82\063\uff82\064\uff82\066\uff82\067\uff82\070\uff82" +
    "\071\uff82\072\uff82\073\uff82\074\uff82\075\uff82\076\uff82\077" +
    "\uff82\101\uff82\102\uff82\103\uff82\104\uff82\106\uff82\107\uff82" +
    "\110\uff82\111\uff82\112\uff82\113\uff82\001\002\000\040\045" +
    "\043\047\011\050\056\051\053\052\057\053\022\061\012" +
    "\063\007\065\034\067\016\100\051\105\020\116\050\117" +
    "\032\120\064\001\002\000\040\045\043\047\011\050\056" +
    "\051\053\052\057\053\022\061\012\063\007\065\034\067" +
    "\016\100\051\105\020\116\050\117\032\120\064\001\002" +
    "\000\040\045\043\047\011\050\056\051\053\052\057\053" +
    "\022\061\012\063\007\065\034\067\016\100\051\105\020" +
    "\116\050\117\032\120\064\001\002\000\040\045\043\047" +
    "\011\050\056\051\053\052\057\053\022\061\012\063\007" +
    "\065\034\067\016\100\051\105\020\116\050\117\032\120" +
    "\064\001\002\000\040\045\043\047\011\050\056\051\053" +
    "\052\057\053\022\061\012\063\007\065\034\067\016\100" +
    "\051\105\020\116\050\117\032\120\064\001\002\000\040" +
    "\045\043\047\011\050\056\051\053\052\057\053\022\061" +
    "\012\063\007\065\034\067\016\100\051\105\020\116\050" +
    "\117\032\120\064\001\002\000\040\045\043\047\011\050" +
    "\056\051\053\052\057\053\022\061\012\063\007\065\034" +
    "\067\016\100\051\105\020\116\050\117\032\120\064\001" +
    "\002\000\040\045\043\047\011\050\056\051\053\052\057" +
    "\053\022\061\012\063\007\065\034\067\016\100\051\105" +
    "\020\116\050\117\032\120\064\001\002\000\040\045\043" +
    "\047\011\050\056\051\053\052\057\053\022\061\012\063" +
    "\007\065\034\067\016\100\051\105\020\116\050\117\032" +
    "\120\064\001\002\000\040\045\043\047\011\050\056\051" +
    "\053\052\057\053\022\061\012\063\007\065\034\067\016" +
    "\100\051\105\020\116\050\117\032\120\064\001\002\000" +
    "\042\045\043\047\011\050\056\051\053\052\057\053\022" +
    "\056\152\061\012\063\007\065\034\067\016\100\051\105" +
    "\020\116\050\117\032\120\064\001\002\000\040\045\043" +
    "\047\011\050\056\051\053\052\057\053\022\061\012\063" +
    "\007\065\034\067\016\100\051\105\020\116\050\117\032" +
    "\120\064\001\002\000\040\045\043\047\011\050\056\051" +
    "\053\052\057\053\022\061\012\063\007\065\034\067\016" +
    "\100\051\105\020\116\050\117\032\120\064\001\002\000" +
    "\040\045\101\047\011\050\056\051\053\052\057\053\022" +
    "\061\012\063\007\065\034\067\016\100\051\105\020\116" +
    "\050\117\032\120\064\001\002\000\040\045\043\047\011" +
    "\050\056\051\053\052\057\053\022\061\012\063\007\065" +
    "\034\067\016\100\051\105\020\116\050\117\032\120\064" +
    "\001\002\000\040\045\043\047\011\050\056\051\053\052" +
    "\057\053\022\061\012\063\007\065\034\067\016\100\051" +
    "\105\020\116\050\117\032\120\064\001\002\000\040\045" +
    "\043\047\011\050\056\051\053\052\057\053\022\061\012" +
    "\063\007\065\034\067\016\100\051\105\020\116\050\117" +
    "\032\120\064\001\002\000\040\045\043\047\011\050\056" +
    "\051\053\052\057\053\022\061\012\063\007\065\034\067" +
    "\016\100\051\105\020\116\050\117\032\120\064\001\002" +
    "\000\040\045\043\047\011\050\056\051\053\052\057\053" +
    "\022\061\012\063\007\065\034\067\016\100\051\105\020" +
    "\116\050\117\032\120\064\001\002\000\004\045\043\001" +
    "\002\000\072\041\uffba\054\uffba\055\uffba\056\uffba\060\uffba" +
    "\062\uffba\063\uffba\064\uffba\066\uffba\067\uffba\070\uffba\071" +
    "\uffba\072\uffba\073\uffba\074\uffba\075\uffba\076\uffba\077\uffba" +
    "\101\uffba\102\uffba\103\uffba\104\uffba\106\uffba\107\uffba\110" +
    "\uffba\111\uffba\112\uffba\113\uffba\001\002\000\040\045\043" +
    "\047\011\050\056\051\053\052\057\053\022\061\012\063" +
    "\007\065\034\067\016\100\051\105\020\116\050\117\032" +
    "\120\064\001\002\000\040\045\043\047\011\050\056\051" +
    "\053\052\057\053\022\061\012\063\007\065\034\067\016" +
    "\100\051\105\020\116\050\117\032\120\064\001\002\000" +
    "\040\045\043\047\011\050\056\051\053\052\057\053\022" +
    "\061\012\063\007\065\034\067\016\100\051\105\020\116" +
    "\050\117\032\120\064\001\002\000\072\041\uffa6\054\uffa6" +
    "\055\130\056\uffa6\060\uffa6\062\uffa6\063\117\064\uffa6\066" +
    "\110\067\127\070\123\071\125\072\120\073\115\074\105" +
    "\075\uffa6\076\uffa6\077\uffa6\101\uffa6\102\uffa6\103\uffa6\104" +
    "\uffa6\106\uffa6\107\uffa6\110\uffa6\111\uffa6\112\uffa6\113\uffa6" +
    "\001\002\000\072\041\uffad\054\uffad\055\130\056\uffad\060" +
    "\uffad\062\uffad\063\117\064\uffad\066\110\067\127\070\123" +
    "\071\125\072\120\073\115\074\105\075\124\076\112\077" +
    "\114\101\106\102\134\103\uffad\104\uffad\106\uffad\107\uffad" +
    "\110\uffad\111\uffad\112\uffad\113\uffad\001\002\000\072\041" +
    "\uffac\054\uffac\055\130\056\uffac\060\uffac\062\uffac\063\117" +
    "\064\uffac\066\110\067\127\070\123\071\125\072\120\073" +
    "\115\074\105\075\124\076\112\077\114\101\106\102\134" +
    "\103\uffac\104\uffac\106\uffac\107\uffac\110\uffac\111\uffac\112" +
    "\uffac\113\uffac\001\002\000\004\061\075\001\002\000\072" +
    "\041\uff81\054\uff81\055\uff81\056\uff81\060\uff81\062\uff81\063" +
    "\uff81\064\uff81\066\uff81\067\uff81\070\uff81\071\uff81\072\uff81" +
    "\073\uff81\074\uff81\075\uff81\076\uff81\077\uff81\101\uff81\102" +
    "\uff81\103\uff81\104\uff81\106\uff81\107\uff81\110\uff81\111\uff81" +
    "\112\uff81\113\uff81\001\002\000\072\041\uffa4\054\uffa4\055" +
    "\130\056\uffa4\060\uffa4\062\uffa4\063\117\064\uffa4\066\uffa4" +
    "\067\uffa4\070\123\071\125\072\120\073\115\074\105\075" +
    "\uffa4\076\uffa4\077\uffa4\101\uffa4\102\uffa4\103\uffa4\104\uffa4" +
    "\106\uffa4\107\uffa4\110\uffa4\111\uffa4\112\uffa4\113\uffa4\001" +
    "\002\000\072\041\uffb0\054\uffb0\055\130\056\uffb0\060\uffb0" +
    "\062\uffb0\063\117\064\uffb0\066\110\067\127\070\123\071" +
    "\125\072\120\073\115\074\105\075\124\076\112\077\114" +
    "\101\106\102\134\103\uffb0\104\uffb0\106\uffb0\107\uffb0\110" +
    "\uffb0\111\uffb0\112\uffb0\113\uffb0\001\002\000\072\041\uffa2" +
    "\054\uffa2\055\130\056\uffa2\060\uffa2\062\uffa2\063\117\064" +
    "\uffa2\066\uffa2\067\uffa2\070\uffa2\071\uffa2\072\120\073\uffa2" +
    "\074\uffa2\075\uffa2\076\uffa2\077\uffa2\101\uffa2\102\uffa2\103" +
    "\uffa2\104\uffa2\106\uffa2\107\uffa2\110\uffa2\111\uffa2\112\uffa2" +
    "\113\uffa2\001\002\000\072\041\uffa8\054\uffa8\055\130\056" +
    "\uffa8\060\uffa8\062\uffa8\063\117\064\uffa8\066\110\067\127" +
    "\070\123\071\125\072\120\073\115\074\105\075\uffa8\076" +
    "\uffa8\077\uffa8\101\106\102\134\103\uffa8\104\uffa8\106\uffa8" +
    "\107\uffa8\110\uffa8\111\uffa8\112\uffa8\113\uffa8\001\002\000" +
    "\072\041\uffa3\054\uffa3\055\130\056\uffa3\060\uffa3\062\uffa3" +
    "\063\117\064\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072" +
    "\120\073\uffa3\074\uffa3\075\uffa3\076\uffa3\077\uffa3\101\uffa3" +
    "\102\uffa3\103\uffa3\104\uffa3\106\uffa3\107\uffa3\110\uffa3\111" +
    "\uffa3\112\uffa3\113\uffa3\001\002\000\004\060\uff85\001\002" +
    "\000\072\041\uffab\054\uffab\055\130\056\uffab\060\uffab\062" +
    "\uffab\063\117\064\uffab\066\110\067\127\070\123\071\125" +
    "\072\120\073\115\074\105\075\124\076\112\077\114\101" +
    "\106\102\134\103\uffab\104\uffab\106\uffab\107\uffab\110\uffab" +
    "\111\uffab\112\uffab\113\uffab\001\002\000\072\041\uff9f\054" +
    "\uff9f\055\130\056\uff9f\060\uff9f\062\uff9f\063\117\064\uff9f" +
    "\066\uff9f\067\uff9f\070\uff9f\071\uff9f\072\120\073\uff9f\074" +
    "\uff9f\075\uff9f\076\uff9f\077\uff9f\101\uff9f\102\uff9f\103\uff9f" +
    "\104\uff9f\106\uff9f\107\uff9f\110\uff9f\111\uff9f\112\uff9f\113" +
    "\uff9f\001\002\000\044\045\043\047\011\050\056\051\053" +
    "\052\057\053\022\056\165\061\012\062\uffc5\063\007\065" +
    "\034\067\016\100\051\105\020\116\050\117\032\120\064" +
    "\001\002\000\062\055\130\056\157\062\uffc7\063\117\066" +
    "\110\067\127\070\123\071\125\072\120\073\115\074\105" +
    "\075\124\076\112\077\114\101\106\102\134\103\107\104" +
    "\111\106\121\107\132\110\126\111\113\112\116\113\133" +
    "\001\002\000\004\062\155\001\002\000\074\041\uffc9\046" +
    "\uffc9\054\uffc9\055\uffc9\056\uffc9\060\uffc9\062\uffc9\063\uffc9" +
    "\064\uffc9\066\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9\073" +
    "\uffc9\074\uffc9\075\uffc9\076\uffc9\077\uffc9\101\uffc9\102\uffc9" +
    "\103\uffc9\104\uffc9\106\uffc9\107\uffc9\110\uffc9\111\uffc9\112" +
    "\uffc9\113\uffc9\001\002\000\074\041\uffc8\046\uffc8\054\uffc8" +
    "\055\uffc8\056\uffc8\060\uffc8\062\uffc8\063\uffc8\064\uffc8\066" +
    "\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8" +
    "\075\uffc8\076\uffc8\077\uffc8\101\uffc8\102\uffc8\103\uffc8\104" +
    "\uffc8\106\uffc8\107\uffc8\110\uffc8\111\uffc8\112\uffc8\113\uffc8" +
    "\001\002\000\044\045\043\047\011\050\056\051\053\052" +
    "\057\053\022\056\160\061\012\062\uffc4\063\007\065\034" +
    "\067\016\100\051\105\020\116\050\117\032\120\064\001" +
    "\002\000\042\045\043\047\011\050\056\051\053\052\057" +
    "\053\022\061\012\062\uffc0\063\007\065\034\067\016\100" +
    "\051\105\020\116\050\117\032\120\064\001\002\000\062" +
    "\055\130\056\162\062\uffbe\063\117\066\110\067\127\070" +
    "\123\071\125\072\120\073\115\074\105\075\124\076\112" +
    "\077\114\101\106\102\134\103\107\104\111\106\121\107" +
    "\132\110\126\111\113\112\116\113\133\001\002\000\042" +
    "\045\043\047\011\050\056\051\053\052\057\053\022\061" +
    "\012\062\uffbc\063\007\065\034\067\016\100\051\105\020" +
    "\116\050\117\032\120\064\001\002\000\060\055\130\062" +
    "\uffbb\063\117\066\110\067\127\070\123\071\125\072\120" +
    "\073\115\074\105\075\124\076\112\077\114\101\106\102" +
    "\134\103\107\104\111\106\121\107\132\110\126\111\113" +
    "\112\116\113\133\001\002\000\060\055\130\062\uffbd\063" +
    "\117\066\110\067\127\070\123\071\125\072\120\073\115" +
    "\074\105\075\124\076\112\077\114\101\106\102\134\103" +
    "\107\104\111\106\121\107\132\110\126\111\113\112\116" +
    "\113\133\001\002\000\042\045\043\047\011\050\056\051" +
    "\053\052\057\053\022\061\012\062\uffc6\063\007\065\034" +
    "\067\016\100\051\105\020\116\050\117\032\120\064\001" +
    "\002\000\062\055\130\056\167\062\uffc3\063\117\066\110" +
    "\067\127\070\123\071\125\072\120\073\115\074\105\075" +
    "\124\076\112\077\114\101\106\102\134\103\107\104\111" +
    "\106\121\107\132\110\126\111\113\112\116\113\133\001" +
    "\002\000\042\045\043\047\011\050\056\051\053\052\057" +
    "\053\022\061\012\062\uffc1\063\007\065\034\067\016\100" +
    "\051\105\020\116\050\117\032\120\064\001\002\000\060" +
    "\055\130\062\uffbf\063\117\066\110\067\127\070\123\071" +
    "\125\072\120\073\115\074\105\075\124\076\112\077\114" +
    "\101\106\102\134\103\107\104\111\106\121\107\132\110" +
    "\126\111\113\112\116\113\133\001\002\000\060\055\130" +
    "\062\uffc2\063\117\066\110\067\127\070\123\071\125\072" +
    "\120\073\115\074\105\075\124\076\112\077\114\101\106" +
    "\102\134\103\107\104\111\106\121\107\132\110\126\111" +
    "\113\112\116\113\133\001\002\000\072\041\uffae\054\uffae" +
    "\055\130\056\uffae\060\uffae\062\uffae\063\117\064\uffae\066" +
    "\110\067\127\070\123\071\125\072\120\073\115\074\105" +
    "\075\124\076\112\077\114\101\106\102\134\103\uffae\104" +
    "\uffae\106\uffae\107\uffae\110\uffae\111\uffae\112\uffae\113\uffae" +
    "\001\002\000\072\041\uffa0\054\uffa0\055\130\056\uffa0\060" +
    "\uffa0\062\uffa0\063\117\064\uffa0\066\uffa0\067\uffa0\070\uffa0" +
    "\071\uffa0\072\120\073\uffa0\074\uffa0\075\uffa0\076\uffa0\077" +
    "\uffa0\101\uffa0\102\uffa0\103\uffa0\104\uffa0\106\uffa0\107\uffa0" +
    "\110\uffa0\111\uffa0\112\uffa0\113\uffa0\001\002\000\072\041" +
    "\uffa9\054\uffa9\055\130\056\uffa9\060\uffa9\062\uffa9\063\117" +
    "\064\uffa9\066\110\067\127\070\123\071\125\072\120\073" +
    "\115\074\105\075\124\076\uffa9\077\uffa9\101\106\102\134" +
    "\103\uffa9\104\uffa9\106\uffa9\107\uffa9\110\uffa9\111\uffa9\112" +
    "\uffa9\113\uffa9\001\002\000\072\041\uffaf\054\uffaf\055\130" +
    "\056\uffaf\060\uffaf\062\uffaf\063\117\064\uffaf\066\110\067" +
    "\127\070\123\071\125\072\120\073\115\074\105\075\124" +
    "\076\112\077\114\101\106\102\134\103\uffaf\104\uffaf\106" +
    "\uffaf\107\uffaf\110\uffaf\111\uffaf\112\uffaf\113\uffaf\001\002" +
    "\000\072\041\uffaa\054\uffaa\055\130\056\uffaa\060\uffaa\062" +
    "\uffaa\063\117\064\uffaa\066\110\067\127\070\123\071\125" +
    "\072\120\073\115\074\105\075\124\076\uffaa\077\114\101" +
    "\106\102\134\103\uffaa\104\uffaa\106\uffaa\107\uffaa\110\uffaa" +
    "\111\uffaa\112\uffaa\113\uffaa\001\002\000\072\041\uffb2\054" +
    "\uffb2\055\130\056\uffb2\060\uffb2\062\uffb2\063\117\064\uffb2" +
    "\066\110\067\127\070\123\071\125\072\120\073\115\074" +
    "\105\075\124\076\112\077\114\101\106\102\134\103\107" +
    "\104\uffb2\106\121\107\132\110\126\111\113\112\116\113" +
    "\133\001\002\000\072\041\uffa5\054\uffa5\055\130\056\uffa5" +
    "\060\uffa5\062\uffa5\063\117\064\uffa5\066\uffa5\067\uffa5\070" +
    "\123\071\125\072\120\073\115\074\105\075\uffa5\076\uffa5" +
    "\077\uffa5\101\uffa5\102\uffa5\103\uffa5\104\uffa5\106\uffa5\107" +
    "\uffa5\110\uffa5\111\uffa5\112\uffa5\113\uffa5\001\002\000\072" +
    "\041\uffb1\054\uffb1\055\130\056\uffb1\060\uffb1\062\uffb1\063" +
    "\117\064\uffb1\066\110\067\127\070\123\071\125\072\120" +
    "\073\115\074\105\075\124\076\112\077\114\101\106\102" +
    "\134\103\uffb1\104\uffb1\106\121\107\132\110\126\111\113" +
    "\112\116\113\133\001\002\000\072\041\uffa7\054\uffa7\055" +
    "\130\056\uffa7\060\uffa7\062\uffa7\063\117\064\uffa7\066\110" +
    "\067\127\070\123\071\125\072\120\073\115\074\105\075" +
    "\uffa7\076\uffa7\077\uffa7\101\uffa7\102\uffa7\103\uffa7\104\uffa7" +
    "\106\uffa7\107\uffa7\110\uffa7\111\uffa7\112\uffa7\113\uffa7\001" +
    "\002\000\072\041\uffa1\054\uffa1\055\130\056\uffa1\060\uffa1" +
    "\062\uffa1\063\117\064\uffa1\066\uffa1\067\uffa1\070\uffa1\071" +
    "\uffa1\072\120\073\uffa1\074\uffa1\075\uffa1\076\uffa1\077\uffa1" +
    "\101\uffa1\102\uffa1\103\uffa1\104\uffa1\106\uffa1\107\uffa1\110" +
    "\uffa1\111\uffa1\112\uffa1\113\uffa1\001\002\000\040\045\043" +
    "\047\011\050\056\051\053\052\057\053\022\061\012\063" +
    "\007\065\034\067\016\100\051\105\020\116\050\117\032" +
    "\120\064\001\002\000\062\054\uff89\055\130\060\uff89\063" +
    "\117\066\110\067\127\070\123\071\125\072\120\073\115" +
    "\074\105\075\124\076\112\077\114\101\106\102\134\103" +
    "\107\104\111\106\121\107\132\110\126\111\113\112\116" +
    "\113\133\001\002\000\004\045\210\001\002\000\004\060" +
    "\uff87\001\002\000\004\046\204\001\002\000\040\045\043" +
    "\047\011\050\056\051\053\052\057\053\022\061\012\063" +
    "\007\065\034\067\016\100\051\105\020\116\050\117\032" +
    "\120\064\001\002\000\004\041\uff9b\001\002\000\070\002" +
    "\ufff9\006\ufff9\014\ufff9\015\ufff9\020\ufff9\027\ufff9\032\ufff9" +
    "\033\ufff9\034\ufff9\040\ufff9\041\ufff9\045\ufff9\047\ufff9\050" +
    "\ufff9\051\ufff9\052\ufff9\053\ufff9\061\ufff9\063\ufff9\065\ufff9" +
    "\067\ufff9\100\ufff9\105\ufff9\115\ufff9\116\ufff9\117\ufff9\120" +
    "\ufff9\001\002\000\040\045\043\047\011\050\056\051\053" +
    "\052\057\053\022\061\012\063\007\065\034\067\016\100" +
    "\051\105\020\116\050\117\032\120\064\001\002\000\004" +
    "\041\uff8b\001\002\000\062\041\uff8a\054\217\055\130\063" +
    "\117\066\110\067\127\070\123\071\125\072\120\073\115" +
    "\074\105\075\124\076\112\077\114\101\106\102\134\103" +
    "\107\104\111\106\121\107\132\110\126\111\113\112\116" +
    "\113\133\001\002\000\044\041\uffd4\045\043\047\011\050" +
    "\056\051\053\052\057\053\022\060\uffd4\061\012\063\007" +
    "\065\034\067\016\100\051\105\020\116\050\117\032\120" +
    "\064\001\002\000\006\041\uffd3\060\uffd3\001\002\000\064" +
    "\041\uffd6\054\222\055\130\060\uffd6\063\117\066\110\067" +
    "\127\070\123\071\125\072\120\073\115\074\105\075\124" +
    "\076\112\077\114\101\106\102\134\103\107\104\111\106" +
    "\121\107\132\110\126\111\113\112\116\113\133\001\002" +
    "\000\040\045\043\047\011\050\056\051\053\052\057\053" +
    "\022\061\012\063\007\065\034\067\016\100\051\105\020" +
    "\116\050\117\032\120\064\001\002\000\006\041\uffd5\060" +
    "\uffd5\001\002\000\004\061\225\001\002\000\006\045\230" +
    "\060\226\001\002\000\004\056\246\001\002\000\004\060" +
    "\233\001\002\000\006\054\231\060\uff74\001\002\000\004" +
    "\045\230\001\002\000\004\060\uff73\001\002\000\004\056" +
    "\234\001\002\000\062\006\uff72\015\uff72\020\uff72\027\uff72" +
    "\032\uff72\033\uff72\034\uff72\040\uff72\041\uff72\045\uff72\047" +
    "\uff72\050\uff72\051\uff72\052\uff72\053\uff72\061\uff72\063\uff72" +
    "\065\uff72\067\uff72\100\uff72\105\uff72\116\uff72\117\uff72\120" +
    "\uff72\001\002\000\062\006\052\015\026\020\040\027\014" +
    "\032\031\033\060\034\015\040\065\041\237\045\043\047" +
    "\011\050\056\051\053\052\057\053\022\061\012\063\007" +
    "\065\034\067\016\100\051\105\020\116\050\117\032\120" +
    "\064\001\002\000\070\002\uff71\006\uff71\014\uff71\015\uff71" +
    "\020\uff71\027\uff71\032\uff71\033\uff71\034\uff71\040\uff71\041" +
    "\uff71\045\uff71\047\uff71\050\uff71\051\uff71\052\uff71\053\uff71" +
    "\061\uff71\063\uff71\065\uff71\067\uff71\100\uff71\105\uff71\115" +
    "\uff71\116\uff71\117\uff71\120\uff71\001\002\000\004\114\241" +
    "\001\002\000\070\002\uff7a\006\uff7a\014\uff7a\015\uff7a\020" +
    "\uff7a\027\uff7a\032\uff7a\033\uff7a\034\uff7a\040\uff7a\041\uff7a" +
    "\045\uff7a\047\uff7a\050\uff7a\051\uff7a\052\uff7a\053\uff7a\061" +
    "\uff7a\063\uff7a\065\uff7a\067\uff7a\100\uff7a\105\uff7a\115\uff7a" +
    "\116\uff7a\117\uff7a\120\uff7a\001\002\000\060\006\052\015" +
    "\026\020\040\027\014\032\031\033\060\034\015\040\065" +
    "\045\043\047\011\050\056\051\053\052\057\053\022\061" +
    "\012\063\007\065\034\067\016\100\051\105\020\116\050" +
    "\117\032\120\064\001\002\000\004\115\245\001\002\000" +
    "\062\006\052\015\026\020\040\027\014\032\031\033\060" +
    "\034\015\040\065\045\043\047\011\050\056\051\053\052" +
    "\057\053\022\061\012\063\007\065\034\067\016\100\051" +
    "\105\020\115\uff7c\116\050\117\032\120\064\001\002\000" +
    "\004\115\uff7b\001\002\000\070\002\uff79\006\uff79\014\uff79" +
    "\015\uff79\020\uff79\027\uff79\032\uff79\033\uff79\034\uff79\040" +
    "\uff79\041\uff79\045\uff79\047\uff79\050\uff79\051\uff79\052\uff79" +
    "\053\uff79\061\uff79\063\uff79\065\uff79\067\uff79\100\uff79\105" +
    "\uff79\115\uff79\116\uff79\117\uff79\120\uff79\001\002\000\062" +
    "\006\uff70\015\uff70\020\uff70\027\uff70\032\uff70\033\uff70\034" +
    "\uff70\040\uff70\041\uff70\045\uff70\047\uff70\050\uff70\051\uff70" +
    "\052\uff70\053\uff70\061\uff70\063\uff70\065\uff70\067\uff70\100" +
    "\uff70\105\uff70\116\uff70\117\uff70\120\uff70\001\002\000\062" +
    "\006\052\015\026\020\040\027\014\032\031\033\060\034" +
    "\015\040\065\041\237\045\043\047\011\050\056\051\053" +
    "\052\057\053\022\061\012\063\007\065\034\067\016\100" +
    "\051\105\020\116\050\117\032\120\064\001\002\000\070" +
    "\002\uff6f\006\uff6f\014\uff6f\015\uff6f\020\uff6f\027\uff6f\032" +
    "\uff6f\033\uff6f\034\uff6f\040\uff6f\041\uff6f\045\uff6f\047\uff6f" +
    "\050\uff6f\051\uff6f\052\uff6f\053\uff6f\061\uff6f\063\uff6f\065" +
    "\uff6f\067\uff6f\100\uff6f\105\uff6f\115\uff6f\116\uff6f\117\uff6f" +
    "\120\uff6f\001\002\000\060\055\130\056\252\063\117\066" +
    "\110\067\127\070\123\071\125\072\120\073\115\074\105" +
    "\075\124\076\112\077\114\101\106\102\134\103\107\104" +
    "\111\106\121\107\132\110\126\111\113\112\116\113\133" +
    "\001\002\000\062\006\052\015\026\020\040\027\014\032" +
    "\031\033\060\034\015\040\065\041\237\045\043\047\011" +
    "\050\056\051\053\052\057\053\022\061\012\063\007\065" +
    "\034\067\016\100\051\105\020\116\050\117\032\120\064" +
    "\001\002\000\070\002\uff75\006\uff75\014\uff75\015\uff75\020" +
    "\uff75\027\uff75\032\uff75\033\uff75\034\uff75\040\uff75\041\uff75" +
    "\045\uff75\047\uff75\050\uff75\051\uff75\052\uff75\053\uff75\061" +
    "\uff75\063\uff75\065\uff75\067\uff75\100\uff75\105\uff75\115\uff75" +
    "\116\uff75\117\uff75\120\uff75\001\002\000\072\041\uff9d\054" +
    "\uff9d\055\130\056\uff9d\060\uff9d\062\uff9d\063\117\064\uff9d" +
    "\066\uff9d\067\uff9d\070\uff9d\071\uff9d\072\uff9d\073\uff9d\074" +
    "\uff9d\075\uff9d\076\uff9d\077\uff9d\101\uff9d\102\uff9d\103\uff9d" +
    "\104\uff9d\106\uff9d\107\uff9d\110\uff9d\111\uff9d\112\uff9d\113" +
    "\uff9d\001\002\000\004\046\uff90\001\002\000\040\045\043" +
    "\047\011\050\056\051\053\052\057\053\022\061\012\063" +
    "\007\065\034\067\016\100\051\105\020\116\050\117\032" +
    "\120\064\001\002\000\040\045\043\047\011\050\056\051" +
    "\053\052\057\053\022\061\012\063\007\065\034\067\016" +
    "\100\051\105\020\116\050\117\032\120\064\001\002\000" +
    "\004\041\uff8c\001\002\000\062\041\uff8d\054\217\055\130" +
    "\063\117\066\110\067\127\070\123\071\125\072\120\073" +
    "\115\074\105\075\124\076\112\077\114\101\106\102\134" +
    "\103\107\104\111\106\121\107\132\110\126\111\113\112" +
    "\116\113\133\001\002\000\006\046\uff94\054\256\001\002" +
    "\000\056\055\130\063\117\066\110\067\127\070\123\071" +
    "\125\072\120\073\115\074\105\075\124\076\112\077\114" +
    "\101\106\102\134\103\107\104\111\106\121\107\132\110" +
    "\126\111\113\112\116\113\133\001\002\000\064\046\uff95" +
    "\054\256\055\uffda\061\075\063\uffda\066\uffda\067\uffda\070" +
    "\uffda\071\uffda\072\uffda\073\uffda\074\uffda\075\uffda\076\uffda" +
    "\077\uffda\101\uffda\102\uffda\103\uffda\104\uffda\106\uffda\107" +
    "\uffda\110\uffda\111\uffda\112\uffda\113\uffda\001\002\000\004" +
    "\046\uff93\001\002\000\064\041\uffba\046\uff96\054\uff96\055" +
    "\uffba\063\uffba\066\uffba\067\uffba\070\uffba\071\uffba\072\uffba" +
    "\073\uffba\074\uffba\075\uffba\076\uffba\077\uffba\101\uffba\102" +
    "\uffba\103\uffba\104\uffba\106\uffba\107\uffba\110\uffba\111\uffba" +
    "\112\uffba\113\uffba\001\002\000\004\046\uff92\001\002\000" +
    "\004\002\ufffd\001\002\000\072\041\uffcd\054\uffcd\055\uffcd" +
    "\056\uffcd\060\uffcd\062\uffcd\063\uffcd\064\uffcd\066\uffcd\067" +
    "\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\074\uffcd\075\uffcd" +
    "\076\uffcd\077\uffcd\101\uffcd\102\uffcd\103\uffcd\104\uffcd\106" +
    "\uffcd\107\uffcd\110\uffcd\111\uffcd\112\uffcd\113\uffcd\001\002" +
    "\000\004\064\301\001\002\000\006\054\277\064\uffcb\001" +
    "\002\000\060\055\130\056\275\063\117\066\110\067\127" +
    "\070\123\071\125\072\120\073\115\074\105\075\124\076" +
    "\112\077\114\101\106\102\134\103\107\104\111\106\121" +
    "\107\132\110\126\111\113\112\116\113\133\001\002\000" +
    "\040\045\043\047\011\050\056\051\053\052\057\053\022" +
    "\061\012\063\007\065\034\067\016\100\051\105\020\116" +
    "\050\117\032\120\064\001\002\000\062\054\uffcc\055\130" +
    "\063\117\064\uffcc\066\110\067\127\070\123\071\125\072" +
    "\120\073\115\074\105\075\124\076\112\077\114\101\106" +
    "\102\134\103\107\104\111\106\121\107\132\110\126\111" +
    "\113\112\116\113\133\001\002\000\040\045\043\047\011" +
    "\050\056\051\053\052\057\053\022\061\012\063\007\065" +
    "\034\067\016\100\051\105\020\116\050\117\032\120\064" +
    "\001\002\000\004\064\uffca\001\002\000\072\041\uffce\054" +
    "\uffce\055\uffce\056\uffce\060\uffce\062\uffce\063\uffce\064\uffce" +
    "\066\uffce\067\uffce\070\uffce\071\uffce\072\uffce\073\uffce\074" +
    "\uffce\075\uffce\076\uffce\077\uffce\101\uffce\102\uffce\103\uffce" +
    "\104\uffce\106\uffce\107\uffce\110\uffce\111\uffce\112\uffce\113" +
    "\uffce\001\002\000\004\041\uff97\001\002\000\062\041\uff98" +
    "\054\217\055\130\063\117\066\110\067\127\070\123\071" +
    "\125\072\120\073\115\074\105\075\124\076\112\077\114" +
    "\101\106\102\134\103\107\104\111\106\121\107\132\110" +
    "\126\111\113\112\116\113\133\001\002\000\060\055\130" +
    "\056\305\063\117\066\110\067\127\070\123\071\125\072" +
    "\120\073\115\074\105\075\124\076\112\077\114\101\106" +
    "\102\134\103\107\104\111\106\121\107\132\110\126\111" +
    "\113\112\116\113\133\001\002\000\062\006\052\015\026" +
    "\020\040\027\014\032\031\033\060\034\015\040\065\041" +
    "\237\045\043\047\011\050\056\051\053\052\057\053\022" +
    "\061\012\063\007\065\034\067\016\100\051\105\020\116" +
    "\050\117\032\120\064\001\002\000\070\002\uff78\006\uff78" +
    "\014\307\015\uff78\020\uff78\027\uff78\032\uff78\033\uff78\034" +
    "\uff78\040\uff78\041\uff78\045\uff78\047\uff78\050\uff78\051\uff78" +
    "\052\uff78\053\uff78\061\uff78\063\uff78\065\uff78\067\uff78\100" +
    "\uff78\105\uff78\115\uff78\116\uff78\117\uff78\120\uff78\001\002" +
    "\000\004\056\310\001\002\000\062\006\052\015\026\020" +
    "\040\027\014\032\031\033\060\034\015\040\065\041\237" +
    "\045\043\047\011\050\056\051\053\052\057\053\022\061" +
    "\012\063\007\065\034\067\016\100\051\105\020\116\050" +
    "\117\032\120\064\001\002\000\070\002\uff77\006\uff77\014" +
    "\uff77\015\uff77\020\uff77\027\uff77\032\uff77\033\uff77\034\uff77" +
    "\040\uff77\041\uff77\045\uff77\047\uff77\050\uff77\051\uff77\052" +
    "\uff77\053\uff77\061\uff77\063\uff77\065\uff77\067\uff77\100\uff77" +
    "\105\uff77\115\uff77\116\uff77\117\uff77\120\uff77\001\002\000" +
    "\072\041\uff9e\054\uff9e\055\130\056\uff9e\060\uff9e\062\uff9e" +
    "\063\117\064\uff9e\066\110\067\127\070\123\071\125\072" +
    "\120\073\115\074\105\075\124\076\112\077\114\101\106" +
    "\102\134\103\uff9e\104\uff9e\106\121\107\132\110\126\111" +
    "\113\112\116\113\133\001\002\000\004\046\uff91\001\002" +
    "\000\040\045\043\047\011\050\056\051\053\052\057\053" +
    "\022\061\012\063\007\065\034\067\016\100\051\105\020" +
    "\116\050\117\032\120\064\001\002\000\004\041\uff8e\001" +
    "\002\000\062\041\uff8f\054\217\055\130\063\117\066\110" +
    "\067\127\070\123\071\125\072\120\073\115\074\105\075" +
    "\124\076\112\077\114\101\106\102\134\103\107\104\111" +
    "\106\121\107\132\110\126\111\113\112\116\113\133\001" +
    "\002\000\072\041\uffe8\054\uffe8\055\uffe8\056\uffe8\060\uffe8" +
    "\062\uffe8\063\uffe8\064\uffe8\066\uffe8\067\uffe8\070\uffe8\071" +
    "\uffe8\072\uffe8\073\uffe8\074\uffe8\075\uffe8\076\uffe8\077\uffe8" +
    "\101\uffe8\102\uffe8\103\uffe8\104\uffe8\106\uffe8\107\uffe8\110" +
    "\uffe8\111\uffe8\112\uffe8\113\uffe8\001\002\000\072\041\uffe6" +
    "\054\uffe6\055\uffe6\056\uffe6\060\uffe6\062\uffe6\063\uffe6\064" +
    "\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6\073\uffe6" +
    "\074\uffe6\075\uffe6\076\uffe6\077\uffe6\101\uffe6\102\uffe6\103" +
    "\uffe6\104\uffe6\106\uffe6\107\uffe6\110\uffe6\111\uffe6\112\uffe6" +
    "\113\uffe6\001\002\000\072\041\uffe4\054\uffe4\055\uffe4\056" +
    "\uffe4\060\uffe4\062\uffe4\063\uffe4\064\uffe4\066\uffe4\067\uffe4" +
    "\070\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4\076" +
    "\uffe4\077\uffe4\101\uffe4\102\uffe4\103\uffe4\104\uffe4\106\uffe4" +
    "\107\uffe4\110\uffe4\111\uffe4\112\uffe4\113\uffe4\001\002\000" +
    "\004\025\323\001\002\000\040\045\043\047\011\050\056" +
    "\051\053\052\057\053\022\061\012\063\007\065\034\067" +
    "\016\100\051\105\020\116\050\117\032\120\064\001\002" +
    "\000\060\055\130\056\325\063\117\066\110\067\127\070" +
    "\123\071\125\072\120\073\115\074\105\075\124\076\112" +
    "\077\114\101\106\102\134\103\107\104\111\106\121\107" +
    "\132\110\126\111\113\112\116\113\133\001\002\000\062" +
    "\006\052\015\026\020\040\027\014\032\031\033\060\034" +
    "\015\040\065\041\237\045\043\047\011\050\056\051\053" +
    "\052\057\053\022\061\012\063\007\065\034\067\016\100" +
    "\051\105\020\116\050\117\032\120\064\001\002\000\070" +
    "\002\uff76\006\uff76\014\uff76\015\uff76\020\uff76\027\uff76\032" +
    "\uff76\033\uff76\034\uff76\040\uff76\041\uff76\045\uff76\047\uff76" +
    "\050\uff76\051\uff76\052\uff76\053\uff76\061\uff76\063\uff76\065" +
    "\uff76\067\uff76\100\uff76\105\uff76\115\uff76\116\uff76\117\uff76" +
    "\120\uff76\001\002\000\072\041\uffd8\054\uffd8\055\uffd8\056" +
    "\uffd8\060\uffd8\062\uffd8\063\uffd8\064\uffd8\066\uffd8\067\uffd8" +
    "\070\uffd8\071\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8\076" +
    "\uffd8\077\uffd8\101\uffd8\102\uffd8\103\uffd8\104\uffd8\106\uffd8" +
    "\107\uffd8\110\uffd8\111\uffd8\112\uffd8\113\uffd8\001\002\000" +
    "\004\060\333\001\002\000\062\054\217\055\130\060\332" +
    "\063\117\066\110\067\127\070\123\071\125\072\120\073" +
    "\115\074\105\075\124\076\112\077\114\101\106\102\134" +
    "\103\107\104\111\106\121\107\132\110\126\111\113\112" +
    "\116\113\133\001\002\000\072\041\uffb3\054\uffb3\055\uffb3" +
    "\056\uffb3\060\uffb3\062\uffb3\063\uffb3\064\uffb3\066\uffb3\067" +
    "\uffb3\070\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3" +
    "\076\uffb3\077\uffb3\101\uffb3\102\uffb3\103\uffb3\104\uffb3\106" +
    "\uffb3\107\uffb3\110\uffb3\111\uffb3\112\uffb3\113\uffb3\001\002" +
    "\000\072\041\uffd7\054\uffd7\055\uffd7\056\uffd7\060\uffd7\062" +
    "\uffd7\063\uffd7\064\uffd7\066\uffd7\067\uffd7\070\uffd7\071\uffd7" +
    "\072\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7\077\uffd7\101" +
    "\uffd7\102\uffd7\103\uffd7\104\uffd7\106\uffd7\107\uffd7\110\uffd7" +
    "\111\uffd7\112\uffd7\113\uffd7\001\002\000\072\041\uffd2\054" +
    "\uffd2\055\uffd2\056\uffd2\060\uffd2\062\uffd2\063\uffd2\064\uffd2" +
    "\066\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2\074" +
    "\uffd2\075\uffd2\076\uffd2\077\uffd2\101\uffd2\102\uffd2\103\uffd2" +
    "\104\uffd2\106\uffd2\107\uffd2\110\uffd2\111\uffd2\112\uffd2\113" +
    "\uffd2\001\002\000\004\062\341\001\002\000\062\054\337" +
    "\055\130\062\uffd0\063\117\066\110\067\127\070\123\071" +
    "\125\072\120\073\115\074\105\075\124\076\112\077\114" +
    "\101\106\102\134\103\107\104\111\106\121\107\132\110" +
    "\126\111\113\112\116\113\133\001\002\000\040\045\043" +
    "\047\011\050\056\051\053\052\057\053\022\061\012\063" +
    "\007\065\034\067\016\100\051\105\020\116\050\117\032" +
    "\120\064\001\002\000\004\062\uffcf\001\002\000\072\041" +
    "\uffd1\054\uffd1\055\uffd1\056\uffd1\060\uffd1\062\uffd1\063\uffd1" +
    "\064\uffd1\066\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1\073" +
    "\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\101\uffd1\102\uffd1" +
    "\103\uffd1\104\uffd1\106\uffd1\107\uffd1\110\uffd1\111\uffd1\112" +
    "\uffd1\113\uffd1\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\072\002\035\003\005\007\012\010\026\015" +
    "\023\017\061\020\032\026\066\027\043\030\046\031\027" +
    "\032\036\033\062\034\065\035\022\036\060\037\040\040" +
    "\007\043\016\046\054\050\024\051\003\056\053\057\044" +
    "\063\020\065\045\066\041\067\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\002\035" +
    "\003\005\010\335\026\066\027\043\030\046\031\027\043" +
    "\072\046\054\047\334\050\024\051\003\056\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\002\035\003" +
    "\005\010\330\026\066\027\043\030\046\031\027\043\072" +
    "\046\054\050\024\051\003\053\327\056\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\321\001\001" +
    "\000\002\001\001\000\006\016\312\025\073\001\001\000" +
    "\032\002\035\003\005\010\311\026\066\027\043\030\046" +
    "\031\027\043\072\046\054\050\024\051\003\056\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\002\035\003" +
    "\005\010\303\026\066\027\043\030\046\031\027\043\072" +
    "\046\054\050\024\051\003\056\053\001\001\000\004\055" +
    "\265\001\001\000\002\001\001\000\034\002\035\003\005" +
    "\010\302\026\066\027\043\030\046\031\027\043\072\046" +
    "\054\050\024\051\003\053\301\056\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\002\035\003\005\010" +
    "\273\026\066\027\043\030\046\031\027\043\072\044\271" +
    "\045\272\046\054\050\024\051\003\056\053\001\001\000" +
    "\070\002\035\003\005\007\012\010\026\015\023\017\061" +
    "\020\032\026\066\027\043\030\046\031\027\032\036\033" +
    "\062\034\065\035\022\036\060\037\040\040\007\043\016" +
    "\046\054\050\024\051\003\056\053\057\044\063\020\065" +
    "\267\066\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\002\035\003\005\010\253\026\066\027\043\030\046" +
    "\031\027\043\072\046\054\050\024\051\003\056\053\001" +
    "\001\000\032\002\035\003\005\010\250\026\066\027\043" +
    "\030\046\031\027\043\072\046\054\050\024\051\003\056" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\223\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\002\035\003\005\010" +
    "\070\026\066\027\043\030\046\031\027\043\072\046\054" +
    "\050\024\051\003\054\071\056\053\001\001\000\070\002" +
    "\035\003\005\007\012\010\026\015\023\017\061\020\032" +
    "\026\066\027\043\030\046\031\027\032\036\033\062\034" +
    "\065\035\022\036\060\037\040\040\007\043\016\046\054" +
    "\050\024\051\003\056\053\057\044\063\020\065\067\066" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\130\001\001\000\002\001\001\000\004\025\073\001" +
    "\001\000\002\001\001\000\040\002\035\003\005\010\101" +
    "\022\075\023\077\024\102\026\066\027\043\030\046\031" +
    "\027\043\072\046\054\050\024\051\003\056\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\002\035\003\005\010\202\026" +
    "\066\027\043\030\046\031\027\043\072\046\054\050\024" +
    "\051\003\056\053\001\001\000\032\002\035\003\005\010" +
    "\201\026\066\027\043\030\046\031\027\043\072\046\054" +
    "\050\024\051\003\056\053\001\001\000\032\002\035\003" +
    "\005\010\200\026\066\027\043\030\046\031\027\043\072" +
    "\046\054\050\024\051\003\056\053\001\001\000\032\002" +
    "\035\003\005\010\177\026\066\027\043\030\046\031\027" +
    "\043\072\046\054\050\024\051\003\056\053\001\001\000" +
    "\032\002\035\003\005\010\176\026\066\027\043\030\046" +
    "\031\027\043\072\046\054\050\024\051\003\056\053\001" +
    "\001\000\032\002\035\003\005\010\175\026\066\027\043" +
    "\030\046\031\027\043\072\046\054\050\024\051\003\056" +
    "\053\001\001\000\032\002\035\003\005\010\174\026\066" +
    "\027\043\030\046\031\027\043\072\046\054\050\024\051" +
    "\003\056\053\001\001\000\032\002\035\003\005\010\173" +
    "\026\066\027\043\030\046\031\027\043\072\046\054\050" +
    "\024\051\003\056\053\001\001\000\032\002\035\003\005" +
    "\010\172\026\066\027\043\030\046\031\027\043\072\046" +
    "\054\050\024\051\003\056\053\001\001\000\032\002\035" +
    "\003\005\010\171\026\066\027\043\030\046\031\027\043" +
    "\072\046\054\050\024\051\003\056\053\001\001\000\034" +
    "\002\035\003\005\010\152\011\153\026\066\027\043\030" +
    "\046\031\027\043\072\046\054\050\024\051\003\056\053" +
    "\001\001\000\032\002\035\003\005\010\150\026\066\027" +
    "\043\030\046\031\027\043\072\046\054\050\024\051\003" +
    "\056\053\001\001\000\032\002\035\003\005\010\147\026" +
    "\066\027\043\030\046\031\027\043\072\046\054\050\024" +
    "\051\003\056\053\001\001\000\040\002\035\003\005\010" +
    "\101\022\075\023\077\024\146\026\066\027\043\030\046" +
    "\031\027\043\072\046\054\050\024\051\003\056\053\001" +
    "\001\000\032\002\035\003\005\010\145\026\066\027\043" +
    "\030\046\031\027\043\072\046\054\050\024\051\003\056" +
    "\053\001\001\000\032\002\035\003\005\010\144\026\066" +
    "\027\043\030\046\031\027\043\072\046\054\050\024\051" +
    "\003\056\053\001\001\000\032\002\035\003\005\010\143" +
    "\026\066\027\043\030\046\031\027\043\072\046\054\050" +
    "\024\051\003\056\053\001\001\000\032\002\035\003\005" +
    "\010\142\026\066\027\043\030\046\031\027\043\072\046" +
    "\054\050\024\051\003\056\053\001\001\000\032\002\035" +
    "\003\005\010\141\026\066\027\043\030\046\031\027\043" +
    "\072\046\054\050\024\051\003\056\053\001\001\000\004" +
    "\043\137\001\001\000\002\001\001\000\032\002\035\003" +
    "\005\010\136\026\066\027\043\030\046\031\027\043\072" +
    "\046\054\050\024\051\003\056\053\001\001\000\032\002" +
    "\035\003\005\010\135\026\066\027\043\030\046\031\027" +
    "\043\072\046\054\050\024\051\003\056\053\001\001\000" +
    "\032\002\035\003\005\010\134\026\066\027\043\030\046" +
    "\031\027\043\072\046\054\050\024\051\003\056\053\001" +
    "\001\000\004\055\130\001\001\000\004\055\130\001\001" +
    "\000\004\055\130\001\001\000\004\025\140\001\001\000" +
    "\002\001\001\000\004\055\130\001\001\000\004\055\130" +
    "\001\001\000\004\055\130\001\001\000\004\055\130\001" +
    "\001\000\004\055\130\001\001\000\002\001\001\000\004" +
    "\055\130\001\001\000\004\055\130\001\001\000\032\002" +
    "\035\003\005\010\165\026\066\027\043\030\046\031\027" +
    "\043\072\046\054\050\024\051\003\056\053\001\001\000" +
    "\004\055\130\001\001\000\002\001\001\000\004\055\155" +
    "\001\001\000\002\001\001\000\032\002\035\003\005\010" +
    "\160\026\066\027\043\030\046\031\027\043\072\046\054" +
    "\050\024\051\003\056\053\001\001\000\032\002\035\003" +
    "\005\010\163\026\066\027\043\030\046\031\027\043\072" +
    "\046\054\050\024\051\003\056\053\001\001\000\004\055" +
    "\130\001\001\000\032\002\035\003\005\010\162\026\066" +
    "\027\043\030\046\031\027\043\072\046\054\050\024\051" +
    "\003\056\053\001\001\000\004\055\130\001\001\000\004" +
    "\055\130\001\001\000\032\002\035\003\005\010\170\026" +
    "\066\027\043\030\046\031\027\043\072\046\054\050\024" +
    "\051\003\056\053\001\001\000\004\055\130\001\001\000" +
    "\032\002\035\003\005\010\167\026\066\027\043\030\046" +
    "\031\027\043\072\046\054\050\024\051\003\056\053\001" +
    "\001\000\004\055\130\001\001\000\004\055\130\001\001" +
    "\000\004\055\130\001\001\000\004\055\130\001\001\000" +
    "\004\055\130\001\001\000\004\055\130\001\001\000\004" +
    "\055\130\001\001\000\004\055\130\001\001\000\004\055" +
    "\130\001\001\000\004\055\130\001\001\000\004\055\130" +
    "\001\001\000\004\055\130\001\001\000\032\002\035\003" +
    "\005\010\204\026\066\027\043\030\046\031\027\043\072" +
    "\046\054\050\024\051\003\056\053\001\001\000\004\055" +
    "\130\001\001\000\006\022\075\023\206\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\002\035\003\005\010" +
    "\070\026\066\027\043\030\046\031\027\043\072\046\054" +
    "\050\024\051\003\054\211\056\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\002\035\003\005\010\215" +
    "\026\066\027\043\030\046\031\027\043\072\046\054\050" +
    "\024\051\003\053\214\056\053\001\001\000\002\001\001" +
    "\000\004\055\130\001\001\000\034\002\035\003\005\010" +
    "\220\026\066\027\043\030\046\031\027\043\072\046\054" +
    "\050\024\051\003\052\217\056\053\001\001\000\002\001" +
    "\001\000\004\055\130\001\001\000\034\002\035\003\005" +
    "\010\220\026\066\027\043\030\046\031\027\043\072\046" +
    "\054\050\024\051\003\052\222\056\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\064\226\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\064\231\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\070\234\001\001\000\070\002\035\003\005\007\012" +
    "\010\026\015\023\017\061\020\032\026\066\027\043\030" +
    "\046\031\027\032\036\033\062\034\237\035\022\036\060" +
    "\037\040\040\007\042\235\043\016\046\054\050\024\051" +
    "\003\056\053\057\044\063\020\066\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\070\002" +
    "\035\003\005\007\012\010\026\015\023\017\061\020\032" +
    "\026\066\027\043\030\046\031\027\032\036\033\062\034" +
    "\242\035\022\036\060\037\040\040\007\041\241\043\016" +
    "\046\054\050\024\051\003\056\053\057\044\063\020\066" +
    "\041\001\001\000\002\001\001\000\070\002\035\003\005" +
    "\007\012\010\026\015\023\017\061\020\032\026\066\027" +
    "\043\030\046\031\027\032\036\033\062\034\242\035\022" +
    "\036\060\037\040\040\007\041\243\043\016\046\054\050" +
    "\024\051\003\056\053\057\044\063\020\066\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\071\246\001" +
    "\001\000\070\002\035\003\005\007\012\010\026\015\023" +
    "\017\061\020\032\026\066\027\043\030\046\031\027\032" +
    "\036\033\062\034\237\035\022\036\060\037\040\040\007" +
    "\042\247\043\016\046\054\050\024\051\003\056\053\057" +
    "\044\063\020\066\041\001\001\000\002\001\001\000\004" +
    "\055\130\001\001\000\070\002\035\003\005\007\012\010" +
    "\026\015\023\017\061\020\032\026\066\027\043\030\046" +
    "\031\027\032\036\033\062\034\237\035\022\036\060\037" +
    "\040\040\007\042\252\043\016\046\054\050\024\051\003" +
    "\056\053\057\044\063\020\066\041\001\001\000\002\001" +
    "\001\000\004\055\130\001\001\000\002\001\001\000\034" +
    "\002\035\003\005\010\262\026\066\027\043\030\046\031" +
    "\027\043\263\046\054\050\024\051\003\056\053\057\261" +
    "\001\001\000\034\002\035\003\005\010\260\026\066\027" +
    "\043\030\046\031\027\043\072\046\054\050\024\051\003" +
    "\053\257\056\053\001\001\000\002\001\001\000\004\055" +
    "\130\001\001\000\004\016\266\001\001\000\004\055\265" +
    "\001\001\000\006\016\264\025\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\130\001\001\000\032\002\035\003\005\010\275" +
    "\026\066\027\043\030\046\031\027\043\072\046\054\050" +
    "\024\051\003\056\053\001\001\000\004\055\130\001\001" +
    "\000\036\002\035\003\005\010\273\026\066\027\043\030" +
    "\046\031\027\043\072\044\277\045\272\046\054\050\024" +
    "\051\003\056\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\055\130\001\001\000\004" +
    "\055\130\001\001\000\070\002\035\003\005\007\012\010" +
    "\026\015\023\017\061\020\032\026\066\027\043\030\046" +
    "\031\027\032\036\033\062\034\237\035\022\036\060\037" +
    "\040\040\007\042\305\043\016\046\054\050\024\051\003" +
    "\056\053\057\044\063\020\066\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\070\002\035\003\005\007\012" +
    "\010\026\015\023\017\061\020\032\026\066\027\043\030" +
    "\046\031\027\032\036\033\062\034\237\035\022\036\060" +
    "\037\040\040\007\042\310\043\016\046\054\050\024\051" +
    "\003\056\053\057\044\063\020\066\041\001\001\000\002" +
    "\001\001\000\004\055\130\001\001\000\002\001\001\000" +
    "\034\002\035\003\005\010\315\026\066\027\043\030\046" +
    "\031\027\043\072\046\054\050\024\051\003\053\314\056" +
    "\053\001\001\000\002\001\001\000\004\055\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\002\035\003\005\010\323\026\066" +
    "\027\043\030\046\031\027\043\072\046\054\050\024\051" +
    "\003\056\053\001\001\000\004\055\130\001\001\000\070" +
    "\002\035\003\005\007\012\010\026\015\023\017\061\020" +
    "\032\026\066\027\043\030\046\031\027\032\036\033\062" +
    "\034\237\035\022\036\060\037\040\040\007\042\325\043" +
    "\016\046\054\050\024\051\003\056\053\057\044\063\020" +
    "\066\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\130\001\001\000\034\002\035\003\005\010\335" +
    "\026\066\027\043\030\046\031\027\043\072\046\054\047" +
    "\337\050\024\051\003\056\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    //MANTENGO UN STACK DE GENERADORES Y PUSHEO EL PRIMERO
    ParserStatus.StackGenerador.push(new Generador());

    }



    public void syntax_error(Symbol s){

        System.out.println("Error de sintaxis "+s.sym+" en la linea "+(s.left+1)+" y la columna "+s.right);
        System.out.println(s.value);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error de sintaxis "+s.sym);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // func_def ::= DEF name LPAREN RPAREN COLON NT$1 suite 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateFunctionDef(d,n,null,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_def",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NT$1 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 RuleGenerator.generateNewScope(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // func_def ::= DEF name LPAREN func_parameters RPAREN COLON NT$0 suite 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object fp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateFunctionDef(d,n,fp,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_def",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NT$0 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object fp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 RuleGenerator.generateNewScope(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // func_parameters ::= NAME COMA func_parameters 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateFunParams(n,fp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_parameters",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // func_parameters ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateFunParams(n,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_parameters",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // while_stmt ::= WHILE expression COLON suite 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=RuleGenerator.generateWhileStatement(e,c,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // for_stmt ::= FOR name IN expression COLON suite 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=RuleGenerator.generateForStatement(n,exp,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // if_stmt ::= IF expression COLON suite ELSE COLON suite 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateIfStatement(e,c1,s1,c2,s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // if_stmt ::= IF expression COLON suite 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateIfStatement(e,c,s1,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // suite ::= NEWLINE INDENT stmt_list DEDENT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("suite",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // suite ::= stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("suite",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // stmt_list ::= stmt stmt_list 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.joinBloques(s,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // stmt_list ::= stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // flow_stmt ::= return_stmt 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // flow_stmt ::= CONTINUE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateContinue(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // flow_stmt ::= BREAK 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBreak(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // func_call ::= name trailer 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateFunctionCall(n,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // func_call ::= expression DOT name trailer 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateNameFunctionCall(e,d,n,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // trailer ::= LPAREN argument_list RPAREN 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = al; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trailer",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // trailer ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trailer",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // argument_list ::= named_argument_list 
            {
              Object RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // argument_list ::= expression COMA argument_list 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateArguments(c,e,al); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // argument_list ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateArguments(null,e,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // named_argument_list ::= named_argument COMA named_argument_list 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateNamedArgumentList(n,c,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("named_argument_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // named_argument_list ::= named_argument 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("named_argument_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // named_argument ::= NAME ASSIGN expression 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateNamedArgument(n,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("named_argument",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expr_stmt ::= namelist ASSIGN expression 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int auleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int auright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object au = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateUnpackAssignation(n,au,tr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expr_stmt ::= namelist ASSIGN tuplemaker 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int auleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int auright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object au = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateTupleMakerAssignation(n,au,tr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expr_stmt ::= assign_exprsub ASSIGN tuplemaker 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int auleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int auright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object au = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSubscriptTupleMakerSingleAssignation(e,au,tr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expr_stmt ::= assign_exprsub ASSIGN expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int auleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int auright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object au = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSubscriptAssignation(e,au,exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expr_stmt ::= name ASSIGN tuplemaker 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int auleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int auright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object au = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateTupleMakerSingleAssignation(n,au,tr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expr_stmt ::= name ASSIGN expression 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int auleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int auright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object au = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateAssignation(n,au,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // namelist ::= assign_exprsub namecoma 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.joinNames(e,nc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namelist",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // namelist ::= name namecoma 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.joinNames(n,nc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namelist",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // namecoma ::= COMA assign_exprsub namecoma 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.joinNames(n,nc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namecoma",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // namecoma ::= COMA name namecoma 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.joinNames(n,nc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namecoma",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // namecoma ::= COMA assign_exprsub 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.addSetIndex(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namecoma",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // namecoma ::= COMA name 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                ParseResult pr = RuleGenerator.storeName(n);
                                                                pr.argumentos = 1;
                                                                RESULT = pr;
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namecoma",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // assign_exprsub ::= expression subscript 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int subleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sub = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSubscriptForAssign(exp1,sub); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_exprsub",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // return_stmt ::= RETURN tuplemaker 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateReturnTup(r,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // return_stmt ::= RETURN expression 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateReturnExp(r,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // return_stmt ::= RETURN 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateReturnEmpty(r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // print_stmt ::= PRINT printtrail 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generatePrintNewline(p,n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // printtrail ::= expression COMA printtrail 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generatePrint(e,c,p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printtrail",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // printtrail ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generatePrint(e,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printtrail",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expression ::= NOTB expression 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateUnaryOperation(op,a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expression ::= NOT expression 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateUnaryOperation(op,a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expression ::= expression EXP expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expression ::= expression DIVE expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expression ::= expression MOD expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expression ::= expression DIV expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expression ::= expression MULT expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expression ::= expression MINUS expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expression ::= expression PLUS expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expression ::= expression SHIFTR expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression ::= expression SHIFTL expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression ::= expression ANDB expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression ::= expression XORB expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression ::= expression ORB expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression ::= expression EQUALS expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression ::= expression DIFF expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= expression MAJOREQ expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= expression MINOREQ expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= expression MAJOR expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= expression MINOR expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= expression AND expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= expression OR expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= exprsub 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= func_call 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= tuple 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= list 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= dictionary 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= atom 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.loadNameOrConst(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exprsub ::= expression subscript 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int subleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sub = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateFullSubscript(exp1,sub); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprsub",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // slice_expression ::= expression COLON expression COLON expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSlice(c,e1,e2,e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // slice_expression ::= expression COLON expression COLON 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateSlice(c,e1,e2,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // slice_expression ::= expression COLON COLON expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSlice(c,e1,null,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // slice_expression ::= expression COLON expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSlice(c,e1,e2,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // slice_expression ::= COLON expression COLON expression 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSlice(c,null,e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // slice_expression ::= expression COLON COLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateSlice(c,e,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // slice_expression ::= COLON expression COLON 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateSlice(c,null,e,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // slice_expression ::= COLON COLON expression 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSlice(c,null,null,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // slice_expression ::= COLON expression 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSlice(c,null,e,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // slice_expression ::= expression COLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSlice(c,e,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // slice_expression ::= COLON 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSlice(c,null,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // slice_expression ::= COLON COLON 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSlice(c,null,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // slice_expression ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // subscript ::= LBRACKET slice_expression RBRACKET subscript 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSubscript(l,e,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subscript",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // subscript ::= LBRACKET slice_expression RBRACKET 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateSubscript(l,e,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subscript",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // dictorsetmaker ::= dictorsetelement COMA dictorsetmaker 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e1,c,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // dictorsetmaker ::= dictorsetelement 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(d,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // dictorsetelement ::= expression COLON expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateDictItem(e1,c,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dictorsetelement",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // dictionary ::= LCURLY RCURLY 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateListTupleDict(c,null,OpCode.CREATE_DICT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dictionary",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // dictionary ::= LCURLY dictorsetmaker RCURLY 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateListTupleDict(c,e,OpCode.CREATE_DICT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dictionary",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // listmaker ::= expression COMA listmaker 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e,c,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listmaker",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // listmaker ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listmaker",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // list ::= LBRACKET listmaker RBRACKET 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateListTupleDict(b,l,OpCode.CREATE_LIST);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // list ::= LBRACKET RBRACKET 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateListTupleDict(b,null,OpCode.CREATE_LIST); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tuplemaker ::= expression COMA tupletrail 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e,c,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuplemaker",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tuplemaker ::= expression COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuplemaker",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tupletrail ::= expression COMA tupletrail 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e,c,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tupletrail",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tupletrail ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tupletrail",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tuple ::= LPAREN tuplemaker RPAREN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateListTupleDict(b,l,OpCode.CREATE_TUPLE);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tuple ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateListTupleDict(b,null,OpCode.CREATE_TUPLE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // atom ::= constant 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // atom ::= name 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // name ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = RuleGenerator.generateName((LexerToken)n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // constant ::= FALSE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // constant ::= TRUE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // constant ::= NONE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // constant ::= STRING3 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // constant ::= STRING 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // constant ::= float 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // constant ::= long 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // constant ::= integer 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // float ::= MINUS FLOAT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateMinusConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("float",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // float ::= FLOAT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("float",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // long ::= MINUS LONG 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateMinusConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("long",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // long ::= LONG 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("long",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // integer ::= MINUS INTEGER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateMinusConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // integer ::= INTEGER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // input_newline ::= NEWLINE input_newline 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateEmptyBlock(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_newline",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // input_newline ::= NEWLINE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateEmptyBlock(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_newline",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // single_input ::= compound_stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("single_input",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // single_input ::= small_stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("single_input",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // input ::= single_input 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // input ::= single_input input_newline 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // input ::= single_input input_newline input 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.joinBloques(s,i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // compound_stmt ::= func_def 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // compound_stmt ::= for_stmt 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // compound_stmt ::= while_stmt 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // compound_stmt ::= if_stmt 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // small_stmt ::= flow_stmt 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // small_stmt ::= print_stmt 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // small_stmt ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.addPop(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // small_stmt ::= expr_stmt 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // simple_stmt ::= small_stmt NEWLINE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= compound_stmt 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= simple_stmt 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // file_input ::= stmt file_input 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.joinBloques(s,f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("file_input",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // file_input ::= NEWLINE file_input 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Object obj = RuleGenerator.generateEmptyBlock(n);
                                                     RESULT = RuleGenerator.joinBloques(obj,f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("file_input",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // file_input ::= stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("file_input",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // file_input ::= NEWLINE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateEmptyBlock(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("file_input",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= file_input 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                System.out.println("EL PROGRAMA ESTA BIEN");
                                ParserStatus.parsingWasSuccessfull=true;
                                Bloque b = ParseResult.getAs(i);
                                Code code = ParserStatus.StackGenerador.peek().crearCodigo("Compilador","Compilador",b);
                                RESULT = code;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

