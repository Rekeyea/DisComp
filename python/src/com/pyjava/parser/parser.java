
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jul 16 23:15:33 UYT 2015
//----------------------------------------------------

package com.pyjava.parser;

import com.pyjava.core.exceptions.PyException;
import com.pyjava.core.runtime.*;
import java_cup.runtime.*;
import com.pyjava.parser.codegen.*;
import com.pyjava.core.*;
import java.util.Deque;
import java.util.LinkedList;
import java.util.Scanner;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jul 16 23:15:33 UYT 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\217\000\002\065\003\000\002\002\004\000\002\062" +
    "\005\000\002\062\004\000\002\062\004\000\002\062\003" +
    "\000\002\060\003\000\002\060\003\000\002\061\003\000" +
    "\002\061\004\000\002\027\003\000\002\027\004\000\002" +
    "\031\003\000\002\031\004\000\002\030\003\000\002\030" +
    "\004\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\043\003\000\002" +
    "\003\003\000\002\003\003\000\002\051\004\000\002\051" +
    "\005\000\002\052\003\000\002\052\005\000\002\053\004" +
    "\000\002\053\005\000\002\050\004\000\002\050\005\000" +
    "\002\047\003\000\002\047\005\000\002\046\005\000\002" +
    "\046\004\000\002\045\005\000\002\044\003\000\002\044" +
    "\005\000\002\055\005\000\002\055\006\000\002\011\003" +
    "\000\002\011\004\000\002\011\003\000\002\011\004\000" +
    "\002\011\004\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\006\000\002\011\005\000\002\011" +
    "\006\000\002\011\006\000\002\011\007\000\002\056\004" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\004\000\002\010\004\000" +
    "\002\054\003\000\002\054\005\000\002\007\004\000\002" +
    "\015\003\000\002\015\004\000\002\015\004\000\002\057" +
    "\004\000\002\016\004\000\002\016\004\000\002\016\005" +
    "\000\002\016\005\000\002\017\004\000\002\017\004\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\022" +
    "\005\000\002\023\003\000\002\023\005\000\002\024\003" +
    "\000\002\024\005\000\002\024\003\000\002\025\004\000" +
    "\002\025\005\000\002\026\006\000\002\026\004\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\034\004\000\002\034\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\041\003\000\002\041\004\000\002\042\003\000\002\042" +
    "\006\000\002\036\006\000\002\036\011\000\002\040\010" +
    "\000\002\037\006\000\002\064\003\000\002\064\005\000" +
    "\002\066\002\000\002\063\012\000\002\067\002\000\002" +
    "\063\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\060\006\051\015\030\020\041\027\015\032" +
    "\033\033\057\034\016\040\064\045\043\047\012\050\055" +
    "\051\052\052\056\053\024\061\014\063\010\065\036\067" +
    "\017\100\050\105\021\116\047\117\034\120\063\001\002" +
    "\000\146\002\uffc4\006\uffc4\015\uffc4\020\uffc4\027\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\040\uffc4\041\uffc4\045\uffc4\047\uffc4" +
    "\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056" +
    "\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4" +
    "\066\uffc4\067\uffc4\070\uffc4\071\uffc4\072\uffc4\073\uffc4\074" +
    "\uffc4\075\uffc4\076\uffc4\077\uffc4\100\uffc4\101\uffc4\102\uffc4" +
    "\103\uffc4\104\uffc4\105\uffc4\106\uffc4\107\uffc4\110\uffc4\111" +
    "\uffc4\112\uffc4\113\uffc4\116\uffc4\117\uffc4\120\uffc4\001\002" +
    "\000\004\002\345\001\002\000\146\002\uffc7\006\uffc7\015" +
    "\uffc7\020\uffc7\027\uffc7\032\uffc7\033\uffc7\034\uffc7\040\uffc7" +
    "\041\uffc7\045\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053" +
    "\uffc7\054\uffc7\055\uffc7\056\uffc7\060\uffc7\061\uffc7\062\uffc7" +
    "\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\070\uffc7\071" +
    "\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7\076\uffc7\077\uffc7" +
    "\100\uffc7\101\uffc7\102\uffc7\103\uffc7\104\uffc7\105\uffc7\106" +
    "\uffc7\107\uffc7\110\uffc7\111\uffc7\112\uffc7\113\uffc7\116\uffc7" +
    "\117\uffc7\120\uffc7\001\002\000\004\002\001\001\002\000" +
    "\042\045\043\047\012\050\055\051\052\052\056\053\024" +
    "\061\014\062\337\063\010\065\036\067\017\100\050\105" +
    "\021\116\047\117\034\120\063\001\002\000\070\002\uff82" +
    "\006\uff82\014\uff82\015\uff82\020\uff82\027\uff82\032\uff82\033" +
    "\uff82\034\uff82\040\uff82\041\uff82\045\uff82\047\uff82\050\uff82" +
    "\051\uff82\052\uff82\053\uff82\061\uff82\063\uff82\065\uff82\067" +
    "\uff82\100\uff82\105\uff82\115\uff82\116\uff82\117\uff82\120\uff82" +
    "\001\002\000\146\002\ufff7\006\ufff7\015\ufff7\020\ufff7\027" +
    "\ufff7\032\ufff7\033\ufff7\034\ufff7\040\ufff7\041\ufff7\045\ufff7" +
    "\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055" +
    "\ufff7\056\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7" +
    "\065\ufff7\066\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7\073" +
    "\ufff7\074\ufff7\075\ufff7\076\ufff7\077\ufff7\100\ufff7\101\ufff7" +
    "\102\ufff7\103\ufff7\104\ufff7\105\ufff7\106\ufff7\107\ufff7\110" +
    "\ufff7\111\ufff7\112\ufff7\113\ufff7\116\ufff7\117\ufff7\120\ufff7" +
    "\001\002\000\064\002\uff88\006\uff88\015\uff88\020\uff88\027" +
    "\uff88\032\uff88\033\uff88\034\uff88\040\uff88\041\uff88\045\uff88" +
    "\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88\061\uff88\063" +
    "\uff88\065\uff88\067\uff88\100\uff88\105\uff88\116\uff88\117\uff88" +
    "\120\uff88\001\002\000\042\045\043\047\012\050\055\051" +
    "\052\052\056\053\024\060\332\061\014\063\010\065\036" +
    "\067\017\100\050\105\021\116\047\117\034\120\063\001" +
    "\002\000\064\002\uff8c\006\uff8c\015\uff8c\020\uff8c\027\uff8c" +
    "\032\uff8c\033\uff8c\034\uff8c\040\uff8c\041\uff8c\045\uff8c\047" +
    "\uff8c\050\uff8c\051\uff8c\052\uff8c\053\uff8c\061\uff8c\063\uff8c" +
    "\065\uff8c\067\uff8c\100\uff8c\105\uff8c\116\uff8c\117\uff8c\120" +
    "\uff8c\001\002\000\004\045\043\001\002\000\010\047\322" +
    "\050\323\051\324\001\002\000\140\002\uffe8\006\uffe8\015" +
    "\uffe8\020\uffe8\027\uffe8\032\uffe8\033\uffe8\034\uffe8\040\uffe8" +
    "\041\uffe8\045\uffe8\046\317\047\uffe8\050\uffe8\051\uffe8\052" +
    "\uffe8\053\uffe8\054\257\055\uffe8\061\072\063\uffe8\065\uffe8" +
    "\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8\073\uffe8\074" +
    "\uffe8\075\uffe8\076\uffe8\077\uffe8\100\uffe8\101\uffe8\102\uffe8" +
    "\103\uffe8\104\uffe8\105\uffe8\106\uffe8\107\uffe8\110\uffe8\111" +
    "\uffe8\112\uffe8\113\uffe8\116\uffe8\117\uffe8\120\uffe8\001\002" +
    "\000\040\045\043\047\012\050\055\051\052\052\056\053" +
    "\024\061\014\063\010\065\036\067\017\100\050\105\021" +
    "\116\047\117\034\120\063\001\002\000\064\002\ufffc\006" +
    "\051\015\030\020\041\027\015\032\033\033\057\034\016" +
    "\040\064\041\237\045\043\047\012\050\055\051\052\052" +
    "\056\053\024\061\014\063\010\065\036\067\017\100\050" +
    "\105\021\116\047\117\034\120\063\001\002\000\070\002" +
    "\uff81\006\uff81\014\uff81\015\uff81\020\uff81\027\uff81\032\uff81" +
    "\033\uff81\034\uff81\040\uff81\041\uff81\045\uff81\047\uff81\050" +
    "\uff81\051\uff81\052\uff81\053\uff81\061\uff81\063\uff81\065\uff81" +
    "\067\uff81\100\uff81\105\uff81\115\uff81\116\uff81\117\uff81\120" +
    "\uff81\001\002\000\146\002\uffed\006\uffed\015\uffed\020\uffed" +
    "\027\uffed\032\uffed\033\uffed\034\uffed\040\uffed\041\uffed\045" +
    "\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed" +
    "\055\uffed\056\uffed\060\uffed\061\uffed\062\uffed\063\uffed\064" +
    "\uffed\065\uffed\066\uffed\067\uffed\070\uffed\071\uffed\072\uffed" +
    "\073\uffed\074\uffed\075\uffed\076\uffed\077\uffed\100\uffed\101" +
    "\uffed\102\uffed\103\uffed\104\uffed\105\uffed\106\uffed\107\uffed" +
    "\110\uffed\111\uffed\112\uffed\113\uffed\116\uffed\117\uffed\120" +
    "\uffed\001\002\000\064\002\ufffa\006\ufffa\015\ufffa\020\ufffa" +
    "\027\ufffa\032\ufffa\033\ufffa\034\ufffa\040\ufffa\041\ufffa\045" +
    "\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\061\ufffa" +
    "\063\ufffa\065\ufffa\067\ufffa\100\ufffa\105\ufffa\116\ufffa\117" +
    "\ufffa\120\ufffa\001\002\000\064\002\uff8b\006\uff8b\015\uff8b" +
    "\020\uff8b\027\uff8b\032\uff8b\033\uff8b\034\uff8b\040\uff8b\041" +
    "\uff8b\045\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b" +
    "\061\uff8b\063\uff8b\065\uff8b\067\uff8b\100\uff8b\105\uff8b\116" +
    "\uff8b\117\uff8b\120\uff8b\001\002\000\146\002\uffc5\006\uffc5" +
    "\015\uffc5\020\uffc5\027\uffc5\032\uffc5\033\uffc5\034\uffc5\040" +
    "\uffc5\041\uffc5\045\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5" +
    "\053\uffc5\054\uffc5\055\uffc5\056\uffc5\060\uffc5\061\uffc5\062" +
    "\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5" +
    "\071\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077" +
    "\uffc5\100\uffc5\101\uffc5\102\uffc5\103\uffc5\104\uffc5\105\uffc5" +
    "\106\uffc5\107\uffc5\110\uffc5\111\uffc5\112\uffc5\113\uffc5\116" +
    "\uffc5\117\uffc5\120\uffc5\001\002\000\040\045\043\047\012" +
    "\050\055\051\052\052\056\053\024\061\014\063\010\065" +
    "\036\067\017\100\050\105\021\116\047\117\034\120\063" +
    "\001\002\000\134\002\uff89\006\uff89\015\uff89\020\uff89\027" +
    "\uff89\032\uff89\033\uff89\034\uff89\040\uff89\041\uff89\045\uff89" +
    "\047\uff89\050\uff89\051\uff89\052\uff89\053\uff89\055\125\061" +
    "\uff89\063\114\065\uff89\066\105\067\124\070\121\071\122" +
    "\072\115\073\112\074\103\075\120\076\107\077\111\100" +
    "\uff89\101\102\102\131\103\104\104\106\105\uff89\106\116" +
    "\107\127\110\123\111\110\112\113\113\130\116\uff89\117" +
    "\uff89\120\uff89\001\002\000\146\002\ufff0\006\ufff0\015\ufff0" +
    "\020\ufff0\027\ufff0\032\ufff0\033\ufff0\034\ufff0\040\ufff0\041" +
    "\ufff0\045\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0" +
    "\054\ufff0\055\ufff0\056\ufff0\060\ufff0\061\ufff0\062\ufff0\063" +
    "\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0" +
    "\072\ufff0\073\ufff0\074\ufff0\075\ufff0\076\ufff0\077\ufff0\100" +
    "\ufff0\101\ufff0\102\ufff0\103\ufff0\104\ufff0\105\ufff0\106\ufff0" +
    "\107\ufff0\110\ufff0\111\ufff0\112\ufff0\113\ufff0\116\ufff0\117" +
    "\ufff0\120\ufff0\001\002\000\064\002\uffa7\006\uffa7\015\uffa7" +
    "\020\uffa7\027\uffa7\032\uffa7\033\uffa7\034\uffa7\040\uffa7\041" +
    "\uffa7\045\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7" +
    "\061\014\063\010\065\036\067\017\100\050\105\021\116" +
    "\uffa7\117\uffa7\120\uffa7\001\002\000\146\002\uffeb\006\uffeb" +
    "\015\uffeb\020\uffeb\027\uffeb\032\uffeb\033\uffeb\034\uffeb\040" +
    "\uffeb\041\uffeb\045\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb" +
    "\053\uffeb\054\uffeb\055\uffeb\056\uffeb\060\uffeb\061\uffeb\062" +
    "\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb" +
    "\071\uffeb\072\uffeb\073\uffeb\074\uffeb\075\uffeb\076\uffeb\077" +
    "\uffeb\100\uffeb\101\uffeb\102\uffeb\103\uffeb\104\uffeb\105\uffeb" +
    "\106\uffeb\107\uffeb\110\uffeb\111\uffeb\112\uffeb\113\uffeb\116" +
    "\uffeb\117\uffeb\120\uffeb\001\002\000\064\002\uff8a\006\uff8a" +
    "\015\uff8a\020\uff8a\027\uff8a\032\uff8a\033\uff8a\034\uff8a\040" +
    "\uff8a\041\uff8a\045\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a" +
    "\053\uff8a\061\uff8a\063\uff8a\065\uff8a\067\uff8a\100\uff8a\105" +
    "\uff8a\116\uff8a\117\uff8a\120\uff8a\001\002\000\042\045\043" +
    "\047\012\050\055\051\052\052\056\053\024\061\014\063" +
    "\010\064\271\065\036\067\017\100\050\105\021\116\047" +
    "\117\034\120\063\001\002\000\146\002\uffe7\006\uffe7\015" +
    "\uffe7\020\uffe7\027\uffe7\032\uffe7\033\uffe7\034\uffe7\040\uffe7" +
    "\041\uffe7\045\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053" +
    "\uffe7\054\uffe7\055\uffe7\056\uffe7\060\uffe7\061\uffe7\062\uffe7" +
    "\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7\071" +
    "\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7\076\uffe7\077\uffe7" +
    "\100\uffe7\101\uffe7\102\uffe7\103\uffe7\104\uffe7\105\uffe7\106" +
    "\uffe7\107\uffe7\110\uffe7\111\uffe7\112\uffe7\113\uffe7\116\uffe7" +
    "\117\uffe7\120\uffe7\001\002\000\064\002\uff87\006\uff87\015" +
    "\uff87\020\uff87\027\uff87\032\uff87\033\uff87\034\uff87\040\uff87" +
    "\041\uff87\045\uff87\047\uff87\050\uff87\051\uff87\052\uff87\053" +
    "\uff87\061\uff87\063\uff87\065\uff87\067\uff87\100\uff87\105\uff87" +
    "\116\uff87\117\uff87\120\uff87\001\002\000\064\002\uff8d\006" +
    "\uff8d\015\uff8d\020\uff8d\027\uff8d\032\uff8d\033\uff8d\034\uff8d" +
    "\040\uff8d\041\uff8d\045\uff8d\047\uff8d\050\uff8d\051\uff8d\052" +
    "\uff8d\053\uff8d\061\uff8d\063\uff8d\065\uff8d\067\uff8d\100\uff8d" +
    "\105\uff8d\116\uff8d\117\uff8d\120\uff8d\001\002\000\070\002" +
    "\uff83\006\uff83\014\uff83\015\uff83\020\uff83\027\uff83\032\uff83" +
    "\033\uff83\034\uff83\040\uff83\041\uff83\045\uff83\047\uff83\050" +
    "\uff83\051\uff83\052\uff83\053\uff83\061\uff83\063\uff83\065\uff83" +
    "\067\uff83\100\uff83\105\uff83\115\uff83\116\uff83\117\uff83\120" +
    "\uff83\001\002\000\152\002\uffe9\006\uffe9\015\uffe9\020\uffe9" +
    "\025\uffe9\027\uffe9\032\uffe9\033\uffe9\034\uffe9\040\uffe9\041" +
    "\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9" +
    "\053\uffe9\054\uffe9\055\uffe9\056\uffe9\060\uffe9\061\uffe9\062" +
    "\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9" +
    "\071\uffe9\072\uffe9\073\uffe9\074\uffe9\075\uffe9\076\uffe9\077" +
    "\uffe9\100\uffe9\101\uffe9\102\uffe9\103\uffe9\104\uffe9\105\uffe9" +
    "\106\uffe9\107\uffe9\110\uffe9\111\uffe9\112\uffe9\113\uffe9\116" +
    "\uffe9\117\uffe9\120\uffe9\001\002\000\146\002\ufff1\006\ufff1" +
    "\015\ufff1\020\ufff1\027\ufff1\032\ufff1\033\ufff1\034\ufff1\040" +
    "\ufff1\041\ufff1\045\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1" +
    "\053\ufff1\054\ufff1\055\ufff1\056\ufff1\060\ufff1\061\ufff1\062" +
    "\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\070\ufff1" +
    "\071\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1\076\ufff1\077" +
    "\ufff1\100\ufff1\101\ufff1\102\ufff1\103\ufff1\104\ufff1\105\ufff1" +
    "\106\ufff1\107\ufff1\110\ufff1\111\ufff1\112\ufff1\113\ufff1\116" +
    "\ufff1\117\ufff1\120\ufff1\001\002\000\006\046\260\054\257" +
    "\001\002\000\146\002\uffef\006\uffef\015\uffef\020\uffef\027" +
    "\uffef\032\uffef\033\uffef\034\uffef\040\uffef\041\uffef\045\uffef" +
    "\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055" +
    "\uffef\056\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef" +
    "\065\uffef\066\uffef\067\uffef\070\uffef\071\uffef\072\uffef\073" +
    "\uffef\074\uffef\075\uffef\076\uffef\077\uffef\100\uffef\101\uffef" +
    "\102\uffef\103\uffef\104\uffef\105\uffef\106\uffef\107\uffef\110" +
    "\uffef\111\uffef\112\uffef\113\uffef\116\uffef\117\uffef\120\uffef" +
    "\001\002\000\146\002\uffec\006\uffec\015\uffec\020\uffec\027" +
    "\uffec\032\uffec\033\uffec\034\uffec\040\uffec\041\uffec\045\uffec" +
    "\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055" +
    "\uffec\056\uffec\060\uffec\061\uffec\062\uffec\063\uffec\064\uffec" +
    "\065\uffec\066\uffec\067\uffec\070\uffec\071\uffec\072\uffec\073" +
    "\uffec\074\uffec\075\uffec\076\uffec\077\uffec\100\uffec\101\uffec" +
    "\102\uffec\103\uffec\104\uffec\105\uffec\106\uffec\107\uffec\110" +
    "\uffec\111\uffec\112\uffec\113\uffec\116\uffec\117\uffec\120\uffec" +
    "\001\002\000\040\045\043\047\012\050\055\051\052\052" +
    "\056\053\024\061\014\063\010\065\036\067\017\100\050" +
    "\105\021\116\047\117\034\120\063\001\002\000\040\045" +
    "\043\047\012\050\055\051\052\052\056\053\024\061\014" +
    "\063\010\065\036\067\017\100\050\105\021\116\047\117" +
    "\034\120\063\001\002\000\146\002\ufff3\006\ufff3\015\ufff3" +
    "\020\ufff3\027\ufff3\032\ufff3\033\ufff3\034\ufff3\040\ufff3\041" +
    "\ufff3\045\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3" +
    "\054\ufff3\055\ufff3\056\ufff3\060\ufff3\061\ufff3\062\ufff3\063" +
    "\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3" +
    "\072\ufff3\073\ufff3\074\ufff3\075\ufff3\076\ufff3\077\ufff3\100" +
    "\ufff3\101\ufff3\102\ufff3\103\ufff3\104\ufff3\105\ufff3\106\ufff3" +
    "\107\ufff3\110\ufff3\111\ufff3\112\ufff3\113\ufff3\116\ufff3\117" +
    "\ufff3\120\ufff3\001\002\000\146\002\uffc6\006\uffc6\015\uffc6" +
    "\020\uffc6\027\uffc6\032\uffc6\033\uffc6\034\uffc6\040\uffc6\041" +
    "\uffc6\045\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6" +
    "\054\uffc6\055\uffc6\056\uffc6\060\uffc6\061\uffc6\062\uffc6\063" +
    "\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6" +
    "\072\uffc6\073\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6\100" +
    "\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6\105\uffc6\106\uffc6" +
    "\107\uffc6\110\uffc6\111\uffc6\112\uffc6\113\uffc6\116\uffc6\117" +
    "\uffc6\120\uffc6\001\002\000\146\002\uffc2\006\uffc2\015\uffc2" +
    "\020\uffc2\027\uffc2\032\uffc2\033\uffc2\034\uffc2\040\uffc2\041" +
    "\uffc2\045\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2" +
    "\054\uffc2\055\uffc2\056\uffc2\060\uffc2\061\uffc2\062\uffc2\063" +
    "\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2\070\uffc2\071\uffc2" +
    "\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2\100" +
    "\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\105\uffc2\106\uffc2" +
    "\107\uffc2\110\uffc2\111\uffc2\112\uffc2\113\uffc2\116\uffc2\117" +
    "\uffc2\120\uffc2\001\002\000\146\002\ufff5\006\ufff5\015\ufff5" +
    "\020\ufff5\027\ufff5\032\ufff5\033\ufff5\034\ufff5\040\ufff5\041" +
    "\ufff5\045\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5" +
    "\054\ufff5\055\ufff5\056\ufff5\060\ufff5\061\ufff5\062\ufff5\063" +
    "\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\070\ufff5\071\ufff5" +
    "\072\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5\077\ufff5\100" +
    "\ufff5\101\ufff5\102\ufff5\103\ufff5\104\ufff5\105\ufff5\106\ufff5" +
    "\107\ufff5\110\ufff5\111\ufff5\112\ufff5\113\ufff5\116\ufff5\117" +
    "\ufff5\120\ufff5\001\002\000\146\002\uffee\006\uffee\015\uffee" +
    "\020\uffee\027\uffee\032\uffee\033\uffee\034\uffee\040\uffee\041" +
    "\uffee\045\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053\uffee" +
    "\054\uffee\055\uffee\056\uffee\060\uffee\061\uffee\062\uffee\063" +
    "\uffee\064\uffee\065\uffee\066\uffee\067\uffee\070\uffee\071\uffee" +
    "\072\uffee\073\uffee\074\uffee\075\uffee\076\uffee\077\uffee\100" +
    "\uffee\101\uffee\102\uffee\103\uffee\104\uffee\105\uffee\106\uffee" +
    "\107\uffee\110\uffee\111\uffee\112\uffee\113\uffee\116\uffee\117" +
    "\uffee\120\uffee\001\002\000\004\045\043\001\002\000\070" +
    "\002\uff84\006\uff84\014\uff84\015\uff84\020\uff84\027\uff84\032" +
    "\uff84\033\uff84\034\uff84\040\uff84\041\uff84\045\uff84\047\uff84" +
    "\050\uff84\051\uff84\052\uff84\053\uff84\061\uff84\063\uff84\065" +
    "\uff84\067\uff84\100\uff84\105\uff84\115\uff84\116\uff84\117\uff84" +
    "\120\uff84\001\002\000\004\046\210\001\002\000\064\002" +
    "\ufffb\006\ufffb\015\ufffb\020\ufffb\027\ufffb\032\ufffb\033\ufffb" +
    "\034\ufffb\040\ufffb\041\ufffb\045\ufffb\047\ufffb\050\ufffb\051" +
    "\ufffb\052\ufffb\053\ufffb\061\ufffb\063\ufffb\065\ufffb\067\ufffb" +
    "\100\ufffb\105\ufffb\116\ufffb\117\ufffb\120\ufffb\001\002\000" +
    "\146\002\uffea\006\uffea\015\uffea\020\uffea\027\uffea\032\uffea" +
    "\033\uffea\034\uffea\040\uffea\041\uffea\045\uffea\047\uffea\050" +
    "\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea" +
    "\060\uffea\061\uffea\062\uffea\063\uffea\064\uffea\065\uffea\066" +
    "\uffea\067\uffea\070\uffea\071\uffea\072\uffea\073\uffea\074\uffea" +
    "\075\uffea\076\uffea\077\uffea\100\uffea\101\uffea\102\uffea\103" +
    "\uffea\104\uffea\105\uffea\106\uffea\107\uffea\110\uffea\111\uffea" +
    "\112\uffea\113\uffea\116\uffea\117\uffea\120\uffea\001\002\000" +
    "\040\045\043\047\012\050\055\051\052\052\056\053\024" +
    "\061\014\063\010\065\036\067\017\100\050\105\021\116" +
    "\047\117\034\120\063\001\002\000\146\002\uffc3\006\uffc3" +
    "\015\uffc3\020\uffc3\027\uffc3\032\uffc3\033\uffc3\034\uffc3\040" +
    "\uffc3\041\uffc3\045\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3" +
    "\053\uffc3\054\uffc3\055\uffc3\056\uffc3\060\uffc3\061\uffc3\062" +
    "\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3" +
    "\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3\076\uffc3\077" +
    "\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3\105\uffc3" +
    "\106\uffc3\107\uffc3\110\uffc3\111\uffc3\112\uffc3\113\uffc3\116" +
    "\uffc3\117\uffc3\120\uffc3\001\002\000\136\002\uffaa\006\uffaa" +
    "\015\uffaa\020\uffaa\027\uffaa\032\uffaa\033\uffaa\034\uffaa\040" +
    "\uffaa\041\uffaa\045\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa" +
    "\053\uffaa\054\206\055\125\061\uffaa\063\114\065\uffaa\066" +
    "\105\067\124\070\121\071\122\072\115\073\112\074\103" +
    "\075\120\076\107\077\111\100\uffaa\101\102\102\131\103" +
    "\104\104\106\105\uffaa\106\116\107\127\110\123\111\110" +
    "\112\113\113\130\116\uffaa\117\uffaa\120\uffaa\001\002\000" +
    "\064\002\uffa8\006\uffa8\015\uffa8\020\uffa8\027\uffa8\032\uffa8" +
    "\033\uffa8\034\uffa8\040\uffa8\041\uffa8\045\uffa8\047\uffa8\050" +
    "\uffa8\051\uffa8\052\uffa8\053\uffa8\061\uffa8\063\uffa8\065\uffa8" +
    "\067\uffa8\100\uffa8\105\uffa8\116\uffa8\117\uffa8\120\uffa8\001" +
    "\002\000\146\002\uffe8\006\uffe8\015\uffe8\020\uffe8\027\uffe8" +
    "\032\uffe8\033\uffe8\034\uffe8\040\uffe8\041\uffe8\045\uffe8\047" +
    "\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8" +
    "\056\uffe8\060\uffe8\061\072\062\uffe8\063\uffe8\064\uffe8\065" +
    "\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8\073\uffe8" +
    "\074\uffe8\075\uffe8\076\uffe8\077\uffe8\100\uffe8\101\uffe8\102" +
    "\uffe8\103\uffe8\104\uffe8\105\uffe8\106\uffe8\107\uffe8\110\uffe8" +
    "\111\uffe8\112\uffe8\113\uffe8\116\uffe8\117\uffe8\120\uffe8\001" +
    "\002\000\146\002\uff8e\006\uff8e\015\uff8e\020\uff8e\027\uff8e" +
    "\032\uff8e\033\uff8e\034\uff8e\040\uff8e\041\uff8e\045\uff8e\047" +
    "\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e" +
    "\056\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e\064\uff8e\065" +
    "\uff8e\066\uff8e\067\uff8e\070\uff8e\071\uff8e\072\uff8e\073\uff8e" +
    "\074\uff8e\075\uff8e\076\uff8e\077\uff8e\100\uff8e\101\uff8e\102" +
    "\uff8e\103\uff8e\104\uff8e\105\uff8e\106\uff8e\107\uff8e\110\uff8e" +
    "\111\uff8e\112\uff8e\113\uff8e\116\uff8e\117\uff8e\120\uff8e\001" +
    "\002\000\042\045\076\047\012\050\055\051\052\052\056" +
    "\053\024\060\074\061\014\063\010\065\036\067\017\100" +
    "\050\105\021\116\047\117\034\120\063\001\002\000\006" +
    "\054\203\060\uff96\001\002\000\146\002\uff91\006\uff91\015" +
    "\uff91\020\uff91\027\uff91\032\uff91\033\uff91\034\uff91\040\uff91" +
    "\041\uff91\045\uff91\047\uff91\050\uff91\051\uff91\052\uff91\053" +
    "\uff91\054\uff91\055\uff91\056\uff91\060\uff91\061\uff91\062\uff91" +
    "\063\uff91\064\uff91\065\uff91\066\uff91\067\uff91\070\uff91\071" +
    "\uff91\072\uff91\073\uff91\074\uff91\075\uff91\076\uff91\077\uff91" +
    "\100\uff91\101\uff91\102\uff91\103\uff91\104\uff91\105\uff91\106" +
    "\uff91\107\uff91\110\uff91\111\uff91\112\uff91\113\uff91\116\uff91" +
    "\117\uff91\120\uff91\001\002\000\004\060\uff92\001\002\000" +
    "\066\046\201\054\uffe9\055\uffe9\060\uffe9\061\uffe9\063\uffe9" +
    "\066\uffe9\067\uffe9\070\uffe9\071\uffe9\072\uffe9\073\uffe9\074" +
    "\uffe9\075\uffe9\076\uffe9\077\uffe9\101\uffe9\102\uffe9\103\uffe9" +
    "\104\uffe9\106\uffe9\107\uffe9\110\uffe9\111\uffe9\112\uffe9\113" +
    "\uffe9\001\002\000\062\054\117\055\125\060\uff94\063\114" +
    "\066\105\067\124\070\121\071\122\072\115\073\112\074" +
    "\103\075\120\076\107\077\111\101\102\102\131\103\104" +
    "\104\106\106\116\107\127\110\123\111\110\112\113\113" +
    "\130\001\002\000\004\060\101\001\002\000\146\002\uff90" +
    "\006\uff90\015\uff90\020\uff90\027\uff90\032\uff90\033\uff90\034" +
    "\uff90\040\uff90\041\uff90\045\uff90\047\uff90\050\uff90\051\uff90" +
    "\052\uff90\053\uff90\054\uff90\055\uff90\056\uff90\060\uff90\061" +
    "\uff90\062\uff90\063\uff90\064\uff90\065\uff90\066\uff90\067\uff90" +
    "\070\uff90\071\uff90\072\uff90\073\uff90\074\uff90\075\uff90\076" +
    "\uff90\077\uff90\100\uff90\101\uff90\102\uff90\103\uff90\104\uff90" +
    "\105\uff90\106\uff90\107\uff90\110\uff90\111\uff90\112\uff90\113" +
    "\uff90\116\uff90\117\uff90\120\uff90\001\002\000\040\045\043" +
    "\047\012\050\055\051\052\052\056\053\024\061\014\063" +
    "\010\065\036\067\017\100\050\105\021\116\047\117\034" +
    "\120\063\001\002\000\040\045\043\047\012\050\055\051" +
    "\052\052\056\053\024\061\014\063\010\065\036\067\017" +
    "\100\050\105\021\116\047\117\034\120\063\001\002\000" +
    "\040\045\043\047\012\050\055\051\052\052\056\053\024" +
    "\061\014\063\010\065\036\067\017\100\050\105\021\116" +
    "\047\117\034\120\063\001\002\000\040\045\043\047\012" +
    "\050\055\051\052\052\056\053\024\061\014\063\010\065" +
    "\036\067\017\100\050\105\021\116\047\117\034\120\063" +
    "\001\002\000\040\045\043\047\012\050\055\051\052\052" +
    "\056\053\024\061\014\063\010\065\036\067\017\100\050" +
    "\105\021\116\047\117\034\120\063\001\002\000\040\045" +
    "\043\047\012\050\055\051\052\052\056\053\024\061\014" +
    "\063\010\065\036\067\017\100\050\105\021\116\047\117" +
    "\034\120\063\001\002\000\040\045\043\047\012\050\055" +
    "\051\052\052\056\053\024\061\014\063\010\065\036\067" +
    "\017\100\050\105\021\116\047\117\034\120\063\001\002" +
    "\000\040\045\043\047\012\050\055\051\052\052\056\053" +
    "\024\061\014\063\010\065\036\067\017\100\050\105\021" +
    "\116\047\117\034\120\063\001\002\000\040\045\043\047" +
    "\012\050\055\051\052\052\056\053\024\061\014\063\010" +
    "\065\036\067\017\100\050\105\021\116\047\117\034\120" +
    "\063\001\002\000\040\045\043\047\012\050\055\051\052" +
    "\052\056\053\024\061\014\063\010\065\036\067\017\100" +
    "\050\105\021\116\047\117\034\120\063\001\002\000\042" +
    "\045\043\047\012\050\055\051\052\052\056\053\024\056" +
    "\147\061\014\063\010\065\036\067\017\100\050\105\021" +
    "\116\047\117\034\120\063\001\002\000\040\045\043\047" +
    "\012\050\055\051\052\052\056\053\024\061\014\063\010" +
    "\065\036\067\017\100\050\105\021\116\047\117\034\120" +
    "\063\001\002\000\040\045\043\047\012\050\055\051\052" +
    "\052\056\053\024\061\014\063\010\065\036\067\017\100" +
    "\050\105\021\116\047\117\034\120\063\001\002\000\040" +
    "\045\076\047\012\050\055\051\052\052\056\053\024\061" +
    "\014\063\010\065\036\067\017\100\050\105\021\116\047" +
    "\117\034\120\063\001\002\000\040\045\043\047\012\050" +
    "\055\051\052\052\056\053\024\061\014\063\010\065\036" +
    "\067\017\100\050\105\021\116\047\117\034\120\063\001" +
    "\002\000\040\045\043\047\012\050\055\051\052\052\056" +
    "\053\024\061\014\063\010\065\036\067\017\100\050\105" +
    "\021\116\047\117\034\120\063\001\002\000\040\045\043" +
    "\047\012\050\055\051\052\052\056\053\024\061\014\063" +
    "\010\065\036\067\017\100\050\105\021\116\047\117\034" +
    "\120\063\001\002\000\040\045\043\047\012\050\055\051" +
    "\052\052\056\053\024\061\014\063\010\065\036\067\017" +
    "\100\050\105\021\116\047\117\034\120\063\001\002\000" +
    "\040\045\043\047\012\050\055\051\052\052\056\053\024" +
    "\061\014\063\010\065\036\067\017\100\050\105\021\116" +
    "\047\117\034\120\063\001\002\000\004\045\043\001\002" +
    "\000\146\002\uffc8\006\uffc8\015\uffc8\020\uffc8\027\uffc8\032" +
    "\uffc8\033\uffc8\034\uffc8\040\uffc8\041\uffc8\045\uffc8\047\uffc8" +
    "\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056" +
    "\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8" +
    "\066\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8\073\uffc8\074" +
    "\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8\101\uffc8\102\uffc8" +
    "\103\uffc8\104\uffc8\105\uffc8\106\uffc8\107\uffc8\110\uffc8\111" +
    "\uffc8\112\uffc8\113\uffc8\116\uffc8\117\uffc8\120\uffc8\001\002" +
    "\000\040\045\043\047\012\050\055\051\052\052\056\053" +
    "\024\061\014\063\010\065\036\067\017\100\050\105\021" +
    "\116\047\117\034\120\063\001\002\000\040\045\043\047" +
    "\012\050\055\051\052\052\056\053\024\061\014\063\010" +
    "\065\036\067\017\100\050\105\021\116\047\117\034\120" +
    "\063\001\002\000\040\045\043\047\012\050\055\051\052" +
    "\052\056\053\024\061\014\063\010\065\036\067\017\100" +
    "\050\105\021\116\047\117\034\120\063\001\002\000\146" +
    "\002\uffb4\006\uffb4\015\uffb4\020\uffb4\027\uffb4\032\uffb4\033" +
    "\uffb4\034\uffb4\040\uffb4\041\uffb4\045\uffb4\047\uffb4\050\uffb4" +
    "\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\125\056\uffb4\060" +
    "\uffb4\061\uffb4\062\uffb4\063\114\064\uffb4\065\uffb4\066\105" +
    "\067\124\070\121\071\122\072\115\073\112\074\103\075" +
    "\uffb4\076\uffb4\077\uffb4\100\uffb4\101\uffb4\102\uffb4\103\uffb4" +
    "\104\uffb4\105\uffb4\106\uffb4\107\uffb4\110\uffb4\111\uffb4\112" +
    "\uffb4\113\uffb4\116\uffb4\117\uffb4\120\uffb4\001\002\000\146" +
    "\002\uffbb\006\uffbb\015\uffbb\020\uffbb\027\uffbb\032\uffbb\033" +
    "\uffbb\034\uffbb\040\uffbb\041\uffbb\045\uffbb\047\uffbb\050\uffbb" +
    "\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\125\056\uffbb\060" +
    "\uffbb\061\uffbb\062\uffbb\063\114\064\uffbb\065\uffbb\066\105" +
    "\067\124\070\121\071\122\072\115\073\112\074\103\075" +
    "\120\076\107\077\111\100\uffbb\101\102\102\131\103\uffbb" +
    "\104\uffbb\105\uffbb\106\uffbb\107\uffbb\110\uffbb\111\uffbb\112" +
    "\uffbb\113\uffbb\116\uffbb\117\uffbb\120\uffbb\001\002\000\146" +
    "\002\uffba\006\uffba\015\uffba\020\uffba\027\uffba\032\uffba\033" +
    "\uffba\034\uffba\040\uffba\041\uffba\045\uffba\047\uffba\050\uffba" +
    "\051\uffba\052\uffba\053\uffba\054\uffba\055\125\056\uffba\060" +
    "\uffba\061\uffba\062\uffba\063\114\064\uffba\065\uffba\066\105" +
    "\067\124\070\121\071\122\072\115\073\112\074\103\075" +
    "\120\076\107\077\111\100\uffba\101\102\102\131\103\uffba" +
    "\104\uffba\105\uffba\106\uffba\107\uffba\110\uffba\111\uffba\112" +
    "\uffba\113\uffba\116\uffba\117\uffba\120\uffba\001\002\000\004" +
    "\061\072\001\002\000\146\002\uff8f\006\uff8f\015\uff8f\020" +
    "\uff8f\027\uff8f\032\uff8f\033\uff8f\034\uff8f\040\uff8f\041\uff8f" +
    "\045\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f\054" +
    "\uff8f\055\uff8f\056\uff8f\060\uff8f\061\uff8f\062\uff8f\063\uff8f" +
    "\064\uff8f\065\uff8f\066\uff8f\067\uff8f\070\uff8f\071\uff8f\072" +
    "\uff8f\073\uff8f\074\uff8f\075\uff8f\076\uff8f\077\uff8f\100\uff8f" +
    "\101\uff8f\102\uff8f\103\uff8f\104\uff8f\105\uff8f\106\uff8f\107" +
    "\uff8f\110\uff8f\111\uff8f\112\uff8f\113\uff8f\116\uff8f\117\uff8f" +
    "\120\uff8f\001\002\000\146\002\uffb2\006\uffb2\015\uffb2\020" +
    "\uffb2\027\uffb2\032\uffb2\033\uffb2\034\uffb2\040\uffb2\041\uffb2" +
    "\045\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054" +
    "\uffb2\055\125\056\uffb2\060\uffb2\061\uffb2\062\uffb2\063\114" +
    "\064\uffb2\065\uffb2\066\uffb2\067\uffb2\070\121\071\122\072" +
    "\115\073\112\074\103\075\uffb2\076\uffb2\077\uffb2\100\uffb2" +
    "\101\uffb2\102\uffb2\103\uffb2\104\uffb2\105\uffb2\106\uffb2\107" +
    "\uffb2\110\uffb2\111\uffb2\112\uffb2\113\uffb2\116\uffb2\117\uffb2" +
    "\120\uffb2\001\002\000\146\002\uffbe\006\uffbe\015\uffbe\020" +
    "\uffbe\027\uffbe\032\uffbe\033\uffbe\034\uffbe\040\uffbe\041\uffbe" +
    "\045\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054" +
    "\uffbe\055\125\056\uffbe\060\uffbe\061\uffbe\062\uffbe\063\114" +
    "\064\uffbe\065\uffbe\066\105\067\124\070\121\071\122\072" +
    "\115\073\112\074\103\075\120\076\107\077\111\100\uffbe" +
    "\101\102\102\131\103\uffbe\104\uffbe\105\uffbe\106\uffbe\107" +
    "\uffbe\110\uffbe\111\uffbe\112\uffbe\113\uffbe\116\uffbe\117\uffbe" +
    "\120\uffbe\001\002\000\146\002\uffb0\006\uffb0\015\uffb0\020" +
    "\uffb0\027\uffb0\032\uffb0\033\uffb0\034\uffb0\040\uffb0\041\uffb0" +
    "\045\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054" +
    "\uffb0\055\125\056\uffb0\060\uffb0\061\uffb0\062\uffb0\063\114" +
    "\064\uffb0\065\uffb0\066\uffb0\067\uffb0\070\uffb0\071\uffb0\072" +
    "\115\073\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0" +
    "\101\uffb0\102\uffb0\103\uffb0\104\uffb0\105\uffb0\106\uffb0\107" +
    "\uffb0\110\uffb0\111\uffb0\112\uffb0\113\uffb0\116\uffb0\117\uffb0" +
    "\120\uffb0\001\002\000\146\002\uffb1\006\uffb1\015\uffb1\020" +
    "\uffb1\027\uffb1\032\uffb1\033\uffb1\034\uffb1\040\uffb1\041\uffb1" +
    "\045\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054" +
    "\uffb1\055\125\056\uffb1\060\uffb1\061\uffb1\062\uffb1\063\114" +
    "\064\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1\072" +
    "\115\073\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1" +
    "\101\uffb1\102\uffb1\103\uffb1\104\uffb1\105\uffb1\106\uffb1\107" +
    "\uffb1\110\uffb1\111\uffb1\112\uffb1\113\uffb1\116\uffb1\117\uffb1" +
    "\120\uffb1\001\002\000\146\002\uffb6\006\uffb6\015\uffb6\020" +
    "\uffb6\027\uffb6\032\uffb6\033\uffb6\034\uffb6\040\uffb6\041\uffb6" +
    "\045\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054" +
    "\uffb6\055\125\056\uffb6\060\uffb6\061\uffb6\062\uffb6\063\114" +
    "\064\uffb6\065\uffb6\066\105\067\124\070\121\071\122\072" +
    "\115\073\112\074\103\075\uffb6\076\uffb6\077\uffb6\100\uffb6" +
    "\101\102\102\131\103\uffb6\104\uffb6\105\uffb6\106\uffb6\107" +
    "\uffb6\110\uffb6\111\uffb6\112\uffb6\113\uffb6\116\uffb6\117\uffb6" +
    "\120\uffb6\001\002\000\004\060\uff93\001\002\000\146\002" +
    "\uffb9\006\uffb9\015\uffb9\020\uffb9\027\uffb9\032\uffb9\033\uffb9" +
    "\034\uffb9\040\uffb9\041\uffb9\045\uffb9\047\uffb9\050\uffb9\051" +
    "\uffb9\052\uffb9\053\uffb9\054\uffb9\055\125\056\uffb9\060\uffb9" +
    "\061\uffb9\062\uffb9\063\114\064\uffb9\065\uffb9\066\105\067" +
    "\124\070\121\071\122\072\115\073\112\074\103\075\120" +
    "\076\107\077\111\100\uffb9\101\102\102\131\103\uffb9\104" +
    "\uffb9\105\uffb9\106\uffb9\107\uffb9\110\uffb9\111\uffb9\112\uffb9" +
    "\113\uffb9\116\uffb9\117\uffb9\120\uffb9\001\002\000\146\002" +
    "\uffad\006\uffad\015\uffad\020\uffad\027\uffad\032\uffad\033\uffad" +
    "\034\uffad\040\uffad\041\uffad\045\uffad\047\uffad\050\uffad\051" +
    "\uffad\052\uffad\053\uffad\054\uffad\055\125\056\uffad\060\uffad" +
    "\061\uffad\062\uffad\063\114\064\uffad\065\uffad\066\uffad\067" +
    "\uffad\070\uffad\071\uffad\072\115\073\uffad\074\uffad\075\uffad" +
    "\076\uffad\077\uffad\100\uffad\101\uffad\102\uffad\103\uffad\104" +
    "\uffad\105\uffad\106\uffad\107\uffad\110\uffad\111\uffad\112\uffad" +
    "\113\uffad\116\uffad\117\uffad\120\uffad\001\002\000\044\045" +
    "\043\047\012\050\055\051\052\052\056\053\024\056\162" +
    "\061\014\062\uffd3\063\010\065\036\067\017\100\050\105" +
    "\021\116\047\117\034\120\063\001\002\000\062\055\125" +
    "\056\154\062\uffd5\063\114\066\105\067\124\070\121\071" +
    "\122\072\115\073\112\074\103\075\120\076\107\077\111" +
    "\101\102\102\131\103\104\104\106\106\116\107\127\110" +
    "\123\111\110\112\113\113\130\001\002\000\004\062\152" +
    "\001\002\000\150\002\uffd7\006\uffd7\015\uffd7\020\uffd7\027" +
    "\uffd7\032\uffd7\033\uffd7\034\uffd7\040\uffd7\041\uffd7\045\uffd7" +
    "\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054" +
    "\uffd7\055\uffd7\056\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7" +
    "\064\uffd7\065\uffd7\066\uffd7\067\uffd7\070\uffd7\071\uffd7\072" +
    "\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7\077\uffd7\100\uffd7" +
    "\101\uffd7\102\uffd7\103\uffd7\104\uffd7\105\uffd7\106\uffd7\107" +
    "\uffd7\110\uffd7\111\uffd7\112\uffd7\113\uffd7\116\uffd7\117\uffd7" +
    "\120\uffd7\001\002\000\150\002\uffd6\006\uffd6\015\uffd6\020" +
    "\uffd6\027\uffd6\032\uffd6\033\uffd6\034\uffd6\040\uffd6\041\uffd6" +
    "\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053" +
    "\uffd6\054\uffd6\055\uffd6\056\uffd6\060\uffd6\061\uffd6\062\uffd6" +
    "\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6\071" +
    "\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6\077\uffd6" +
    "\100\uffd6\101\uffd6\102\uffd6\103\uffd6\104\uffd6\105\uffd6\106" +
    "\uffd6\107\uffd6\110\uffd6\111\uffd6\112\uffd6\113\uffd6\116\uffd6" +
    "\117\uffd6\120\uffd6\001\002\000\044\045\043\047\012\050" +
    "\055\051\052\052\056\053\024\056\155\061\014\062\uffd2" +
    "\063\010\065\036\067\017\100\050\105\021\116\047\117" +
    "\034\120\063\001\002\000\042\045\043\047\012\050\055" +
    "\051\052\052\056\053\024\061\014\062\uffce\063\010\065" +
    "\036\067\017\100\050\105\021\116\047\117\034\120\063" +
    "\001\002\000\062\055\125\056\157\062\uffcc\063\114\066" +
    "\105\067\124\070\121\071\122\072\115\073\112\074\103" +
    "\075\120\076\107\077\111\101\102\102\131\103\104\104" +
    "\106\106\116\107\127\110\123\111\110\112\113\113\130" +
    "\001\002\000\042\045\043\047\012\050\055\051\052\052" +
    "\056\053\024\061\014\062\uffca\063\010\065\036\067\017" +
    "\100\050\105\021\116\047\117\034\120\063\001\002\000" +
    "\060\055\125\062\uffc9\063\114\066\105\067\124\070\121" +
    "\071\122\072\115\073\112\074\103\075\120\076\107\077" +
    "\111\101\102\102\131\103\104\104\106\106\116\107\127" +
    "\110\123\111\110\112\113\113\130\001\002\000\060\055" +
    "\125\062\uffcb\063\114\066\105\067\124\070\121\071\122" +
    "\072\115\073\112\074\103\075\120\076\107\077\111\101" +
    "\102\102\131\103\104\104\106\106\116\107\127\110\123" +
    "\111\110\112\113\113\130\001\002\000\042\045\043\047" +
    "\012\050\055\051\052\052\056\053\024\061\014\062\uffd4" +
    "\063\010\065\036\067\017\100\050\105\021\116\047\117" +
    "\034\120\063\001\002\000\062\055\125\056\164\062\uffd1" +
    "\063\114\066\105\067\124\070\121\071\122\072\115\073" +
    "\112\074\103\075\120\076\107\077\111\101\102\102\131" +
    "\103\104\104\106\106\116\107\127\110\123\111\110\112" +
    "\113\113\130\001\002\000\042\045\043\047\012\050\055" +
    "\051\052\052\056\053\024\061\014\062\uffcf\063\010\065" +
    "\036\067\017\100\050\105\021\116\047\117\034\120\063" +
    "\001\002\000\060\055\125\062\uffcd\063\114\066\105\067" +
    "\124\070\121\071\122\072\115\073\112\074\103\075\120" +
    "\076\107\077\111\101\102\102\131\103\104\104\106\106" +
    "\116\107\127\110\123\111\110\112\113\113\130\001\002" +
    "\000\060\055\125\062\uffd0\063\114\066\105\067\124\070" +
    "\121\071\122\072\115\073\112\074\103\075\120\076\107" +
    "\077\111\101\102\102\131\103\104\104\106\106\116\107" +
    "\127\110\123\111\110\112\113\113\130\001\002\000\146" +
    "\002\uffbc\006\uffbc\015\uffbc\020\uffbc\027\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\040\uffbc\041\uffbc\045\uffbc\047\uffbc\050\uffbc" +
    "\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\125\056\uffbc\060" +
    "\uffbc\061\uffbc\062\uffbc\063\114\064\uffbc\065\uffbc\066\105" +
    "\067\124\070\121\071\122\072\115\073\112\074\103\075" +
    "\120\076\107\077\111\100\uffbc\101\102\102\131\103\uffbc" +
    "\104\uffbc\105\uffbc\106\uffbc\107\uffbc\110\uffbc\111\uffbc\112" +
    "\uffbc\113\uffbc\116\uffbc\117\uffbc\120\uffbc\001\002\000\146" +
    "\002\uffae\006\uffae\015\uffae\020\uffae\027\uffae\032\uffae\033" +
    "\uffae\034\uffae\040\uffae\041\uffae\045\uffae\047\uffae\050\uffae" +
    "\051\uffae\052\uffae\053\uffae\054\uffae\055\125\056\uffae\060" +
    "\uffae\061\uffae\062\uffae\063\114\064\uffae\065\uffae\066\uffae" +
    "\067\uffae\070\uffae\071\uffae\072\115\073\uffae\074\uffae\075" +
    "\uffae\076\uffae\077\uffae\100\uffae\101\uffae\102\uffae\103\uffae" +
    "\104\uffae\105\uffae\106\uffae\107\uffae\110\uffae\111\uffae\112" +
    "\uffae\113\uffae\116\uffae\117\uffae\120\uffae\001\002\000\146" +
    "\002\uffb7\006\uffb7\015\uffb7\020\uffb7\027\uffb7\032\uffb7\033" +
    "\uffb7\034\uffb7\040\uffb7\041\uffb7\045\uffb7\047\uffb7\050\uffb7" +
    "\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\125\056\uffb7\060" +
    "\uffb7\061\uffb7\062\uffb7\063\114\064\uffb7\065\uffb7\066\105" +
    "\067\124\070\121\071\122\072\115\073\112\074\103\075" +
    "\120\076\uffb7\077\uffb7\100\uffb7\101\102\102\131\103\uffb7" +
    "\104\uffb7\105\uffb7\106\uffb7\107\uffb7\110\uffb7\111\uffb7\112" +
    "\uffb7\113\uffb7\116\uffb7\117\uffb7\120\uffb7\001\002\000\146" +
    "\002\uffbd\006\uffbd\015\uffbd\020\uffbd\027\uffbd\032\uffbd\033" +
    "\uffbd\034\uffbd\040\uffbd\041\uffbd\045\uffbd\047\uffbd\050\uffbd" +
    "\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\125\056\uffbd\060" +
    "\uffbd\061\uffbd\062\uffbd\063\114\064\uffbd\065\uffbd\066\105" +
    "\067\124\070\121\071\122\072\115\073\112\074\103\075" +
    "\120\076\107\077\111\100\uffbd\101\102\102\131\103\uffbd" +
    "\104\uffbd\105\uffbd\106\uffbd\107\uffbd\110\uffbd\111\uffbd\112" +
    "\uffbd\113\uffbd\116\uffbd\117\uffbd\120\uffbd\001\002\000\146" +
    "\002\uffb8\006\uffb8\015\uffb8\020\uffb8\027\uffb8\032\uffb8\033" +
    "\uffb8\034\uffb8\040\uffb8\041\uffb8\045\uffb8\047\uffb8\050\uffb8" +
    "\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\125\056\uffb8\060" +
    "\uffb8\061\uffb8\062\uffb8\063\114\064\uffb8\065\uffb8\066\105" +
    "\067\124\070\121\071\122\072\115\073\112\074\103\075" +
    "\120\076\uffb8\077\111\100\uffb8\101\102\102\131\103\uffb8" +
    "\104\uffb8\105\uffb8\106\uffb8\107\uffb8\110\uffb8\111\uffb8\112" +
    "\uffb8\113\uffb8\116\uffb8\117\uffb8\120\uffb8\001\002\000\146" +
    "\002\uffc0\006\uffc0\015\uffc0\020\uffc0\027\uffc0\032\uffc0\033" +
    "\uffc0\034\uffc0\040\uffc0\041\uffc0\045\uffc0\047\uffc0\050\uffc0" +
    "\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\125\056\uffc0\060" +
    "\uffc0\061\uffc0\062\uffc0\063\114\064\uffc0\065\uffc0\066\105" +
    "\067\124\070\121\071\122\072\115\073\112\074\103\075" +
    "\120\076\107\077\111\100\uffc0\101\102\102\131\103\104" +
    "\104\uffc0\105\uffc0\106\116\107\127\110\123\111\110\112" +
    "\113\113\130\116\uffc0\117\uffc0\120\uffc0\001\002\000\146" +
    "\002\uffb3\006\uffb3\015\uffb3\020\uffb3\027\uffb3\032\uffb3\033" +
    "\uffb3\034\uffb3\040\uffb3\041\uffb3\045\uffb3\047\uffb3\050\uffb3" +
    "\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\125\056\uffb3\060" +
    "\uffb3\061\uffb3\062\uffb3\063\114\064\uffb3\065\uffb3\066\uffb3" +
    "\067\uffb3\070\121\071\122\072\115\073\112\074\103\075" +
    "\uffb3\076\uffb3\077\uffb3\100\uffb3\101\uffb3\102\uffb3\103\uffb3" +
    "\104\uffb3\105\uffb3\106\uffb3\107\uffb3\110\uffb3\111\uffb3\112" +
    "\uffb3\113\uffb3\116\uffb3\117\uffb3\120\uffb3\001\002\000\146" +
    "\002\uffbf\006\uffbf\015\uffbf\020\uffbf\027\uffbf\032\uffbf\033" +
    "\uffbf\034\uffbf\040\uffbf\041\uffbf\045\uffbf\047\uffbf\050\uffbf" +
    "\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\125\056\uffbf\060" +
    "\uffbf\061\uffbf\062\uffbf\063\114\064\uffbf\065\uffbf\066\105" +
    "\067\124\070\121\071\122\072\115\073\112\074\103\075" +
    "\120\076\107\077\111\100\uffbf\101\102\102\131\103\uffbf" +
    "\104\uffbf\105\uffbf\106\116\107\127\110\123\111\110\112" +
    "\113\113\130\116\uffbf\117\uffbf\120\uffbf\001\002\000\146" +
    "\002\uffaf\006\uffaf\015\uffaf\020\uffaf\027\uffaf\032\uffaf\033" +
    "\uffaf\034\uffaf\040\uffaf\041\uffaf\045\uffaf\047\uffaf\050\uffaf" +
    "\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\125\056\uffaf\060" +
    "\uffaf\061\uffaf\062\uffaf\063\114\064\uffaf\065\uffaf\066\uffaf" +
    "\067\uffaf\070\uffaf\071\uffaf\072\115\073\uffaf\074\uffaf\075" +
    "\uffaf\076\uffaf\077\uffaf\100\uffaf\101\uffaf\102\uffaf\103\uffaf" +
    "\104\uffaf\105\uffaf\106\uffaf\107\uffaf\110\uffaf\111\uffaf\112" +
    "\uffaf\113\uffaf\116\uffaf\117\uffaf\120\uffaf\001\002\000\146" +
    "\002\uffb5\006\uffb5\015\uffb5\020\uffb5\027\uffb5\032\uffb5\033" +
    "\uffb5\034\uffb5\040\uffb5\041\uffb5\045\uffb5\047\uffb5\050\uffb5" +
    "\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\125\056\uffb5\060" +
    "\uffb5\061\uffb5\062\uffb5\063\114\064\uffb5\065\uffb5\066\105" +
    "\067\124\070\121\071\122\072\115\073\112\074\103\075" +
    "\uffb5\076\uffb5\077\uffb5\100\uffb5\101\uffb5\102\uffb5\103\uffb5" +
    "\104\uffb5\105\uffb5\106\uffb5\107\uffb5\110\uffb5\111\uffb5\112" +
    "\uffb5\113\uffb5\116\uffb5\117\uffb5\120\uffb5\001\002\000\040" +
    "\045\043\047\012\050\055\051\052\052\056\053\024\061" +
    "\014\063\010\065\036\067\017\100\050\105\021\116\047" +
    "\117\034\120\063\001\002\000\062\054\uff97\055\125\060" +
    "\uff97\063\114\066\105\067\124\070\121\071\122\072\115" +
    "\073\112\074\103\075\120\076\107\077\111\101\102\102" +
    "\131\103\104\104\106\106\116\107\127\110\123\111\110" +
    "\112\113\113\130\001\002\000\004\045\205\001\002\000" +
    "\004\060\uff95\001\002\000\004\046\201\001\002\000\040" +
    "\045\043\047\012\050\055\051\052\052\056\053\024\061" +
    "\014\063\010\065\036\067\017\100\050\105\021\116\047" +
    "\117\034\120\063\001\002\000\064\002\uffa9\006\uffa9\015" +
    "\uffa9\020\uffa9\027\uffa9\032\uffa9\033\uffa9\034\uffa9\040\uffa9" +
    "\041\uffa9\045\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053" +
    "\uffa9\061\uffa9\063\uffa9\065\uffa9\067\uffa9\100\uffa9\105\uffa9" +
    "\116\uffa9\117\uffa9\120\uffa9\001\002\000\040\045\043\047" +
    "\012\050\055\051\052\052\056\053\024\061\014\063\010" +
    "\065\036\067\017\100\050\105\021\116\047\117\034\120" +
    "\063\001\002\000\064\002\uff99\006\uff99\015\uff99\020\uff99" +
    "\027\uff99\032\uff99\033\uff99\034\uff99\040\uff99\041\uff99\045" +
    "\uff99\047\uff99\050\uff99\051\uff99\052\uff99\053\uff99\061\uff99" +
    "\063\uff99\065\uff99\067\uff99\100\uff99\105\uff99\116\uff99\117" +
    "\uff99\120\uff99\001\002\000\136\002\uff98\006\uff98\015\uff98" +
    "\020\uff98\027\uff98\032\uff98\033\uff98\034\uff98\040\uff98\041" +
    "\uff98\045\uff98\047\uff98\050\uff98\051\uff98\052\uff98\053\uff98" +
    "\054\213\055\125\061\uff98\063\uff98\065\uff98\066\105\067" +
    "\uff98\070\121\071\122\072\115\073\112\074\103\075\120" +
    "\076\107\077\111\100\uff98\101\102\102\131\103\104\104" +
    "\106\105\uff98\106\116\107\127\110\123\111\110\112\113" +
    "\113\130\116\uff98\117\uff98\120\uff98\001\002\000\066\002" +
    "\uffe2\006\uffe2\015\uffe2\020\uffe2\027\uffe2\032\uffe2\033\uffe2" +
    "\034\uffe2\040\uffe2\041\uffe2\045\uffe2\047\uffe2\050\uffe2\051" +
    "\uffe2\052\uffe2\053\uffe2\060\uffe2\061\uffe2\063\uffe2\065\uffe2" +
    "\067\uffe2\100\uffe2\105\uffe2\116\uffe2\117\uffe2\120\uffe2\001" +
    "\002\000\066\002\uffe1\006\uffe1\015\uffe1\020\uffe1\027\uffe1" +
    "\032\uffe1\033\uffe1\034\uffe1\040\uffe1\041\uffe1\045\uffe1\047" +
    "\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\060\uffe1\061\uffe1" +
    "\063\uffe1\065\uffe1\067\uffe1\100\uffe1\105\uffe1\116\uffe1\117" +
    "\uffe1\120\uffe1\001\002\000\140\002\uffe4\006\uffe4\015\uffe4" +
    "\020\uffe4\027\uffe4\032\uffe4\033\uffe4\034\uffe4\040\uffe4\041" +
    "\uffe4\045\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4" +
    "\054\216\055\125\060\uffe4\061\uffe4\063\114\065\uffe4\066" +
    "\105\067\124\070\121\071\122\072\115\073\112\074\103" +
    "\075\120\076\107\077\111\100\uffe4\101\102\102\131\103" +
    "\104\104\106\105\uffe4\106\116\107\127\110\123\111\110" +
    "\112\113\113\130\116\uffe4\117\uffe4\120\uffe4\001\002\000" +
    "\040\045\043\047\012\050\055\051\052\052\056\053\024" +
    "\061\014\063\010\065\036\067\017\100\050\105\021\116" +
    "\047\117\034\120\063\001\002\000\066\002\uffe3\006\uffe3" +
    "\015\uffe3\020\uffe3\027\uffe3\032\uffe3\033\uffe3\034\uffe3\040" +
    "\uffe3\041\uffe3\045\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3" +
    "\053\uffe3\060\uffe3\061\uffe3\063\uffe3\065\uffe3\067\uffe3\100" +
    "\uffe3\105\uffe3\116\uffe3\117\uffe3\120\uffe3\001\002\000\004" +
    "\061\221\001\002\000\006\045\224\060\223\001\002\000" +
    "\004\060\246\001\002\000\004\056\227\001\002\000\006" +
    "\054\225\060\uff78\001\002\000\004\045\224\001\002\000" +
    "\004\060\uff77\001\002\000\062\006\uff74\015\uff74\020\uff74" +
    "\027\uff74\032\uff74\033\uff74\034\uff74\040\uff74\041\uff74\045" +
    "\uff74\047\uff74\050\uff74\051\uff74\052\uff74\053\uff74\061\uff74" +
    "\063\uff74\065\uff74\067\uff74\100\uff74\105\uff74\116\uff74\117" +
    "\uff74\120\uff74\001\002\000\062\006\051\015\030\020\041" +
    "\027\015\032\033\033\057\034\016\040\064\041\233\045" +
    "\043\047\012\050\055\051\052\052\056\053\024\061\014" +
    "\063\010\065\036\067\017\100\050\105\021\116\047\117" +
    "\034\120\063\001\002\000\070\002\uff85\006\uff85\014\uff85" +
    "\015\uff85\020\uff85\027\uff85\032\uff85\033\uff85\034\uff85\040" +
    "\uff85\041\uff85\045\uff85\047\uff85\050\uff85\051\uff85\052\uff85" +
    "\053\uff85\061\uff85\063\uff85\065\uff85\067\uff85\100\uff85\105" +
    "\uff85\115\uff85\116\uff85\117\uff85\120\uff85\001\002\000\070" +
    "\002\uff73\006\uff73\014\uff73\015\uff73\020\uff73\027\uff73\032" +
    "\uff73\033\uff73\034\uff73\040\uff73\041\uff73\045\uff73\047\uff73" +
    "\050\uff73\051\uff73\052\uff73\053\uff73\061\uff73\063\uff73\065" +
    "\uff73\067\uff73\100\uff73\105\uff73\115\uff73\116\uff73\117\uff73" +
    "\120\uff73\001\002\000\004\114\241\001\002\000\004\041" +
    "\237\001\002\000\070\002\uff7e\006\uff7e\014\uff7e\015\uff7e" +
    "\020\uff7e\027\uff7e\032\uff7e\033\uff7e\034\uff7e\040\uff7e\041" +
    "\uff7e\045\uff7e\047\uff7e\050\uff7e\051\uff7e\052\uff7e\053\uff7e" +
    "\061\uff7e\063\uff7e\065\uff7e\067\uff7e\100\uff7e\105\uff7e\115" +
    "\uff7e\116\uff7e\117\uff7e\120\uff7e\001\002\000\070\002\uff86" +
    "\006\uff86\014\uff86\015\uff86\020\uff86\027\uff86\032\uff86\033" +
    "\uff86\034\uff86\040\uff86\041\uff86\045\uff86\047\uff86\050\uff86" +
    "\051\uff86\052\uff86\053\uff86\061\uff86\063\uff86\065\uff86\067" +
    "\uff86\100\uff86\105\uff86\115\uff86\116\uff86\117\uff86\120\uff86" +
    "\001\002\000\070\002\ufff9\006\ufff9\014\ufff9\015\ufff9\020" +
    "\ufff9\027\ufff9\032\ufff9\033\ufff9\034\ufff9\040\ufff9\041\ufff9" +
    "\045\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\061" +
    "\ufff9\063\ufff9\065\ufff9\067\ufff9\100\ufff9\105\ufff9\115\ufff9" +
    "\116\ufff9\117\ufff9\120\ufff9\001\002\000\070\002\ufff8\006" +
    "\ufff8\014\ufff8\015\ufff8\020\ufff8\027\ufff8\032\ufff8\033\ufff8" +
    "\034\ufff8\040\ufff8\041\ufff8\045\ufff8\047\ufff8\050\ufff8\051" +
    "\ufff8\052\ufff8\053\ufff8\061\ufff8\063\ufff8\065\ufff8\067\ufff8" +
    "\100\ufff8\105\ufff8\115\ufff8\116\ufff8\117\ufff8\120\ufff8\001" +
    "\002\000\060\006\051\015\030\020\041\027\015\032\033" +
    "\033\057\034\016\040\064\045\043\047\012\050\055\051" +
    "\052\052\056\053\024\061\014\063\010\065\036\067\017" +
    "\100\050\105\021\116\047\117\034\120\063\001\002\000" +
    "\004\115\245\001\002\000\062\006\051\015\030\020\041" +
    "\027\015\032\033\033\057\034\016\040\064\045\043\047" +
    "\012\050\055\051\052\052\056\053\024\061\014\063\010" +
    "\065\036\067\017\100\050\105\021\115\uff80\116\047\117" +
    "\034\120\063\001\002\000\004\115\uff7f\001\002\000\070" +
    "\002\uff7d\006\uff7d\014\uff7d\015\uff7d\020\uff7d\027\uff7d\032" +
    "\uff7d\033\uff7d\034\uff7d\040\uff7d\041\uff7d\045\uff7d\047\uff7d" +
    "\050\uff7d\051\uff7d\052\uff7d\053\uff7d\061\uff7d\063\uff7d\065" +
    "\uff7d\067\uff7d\100\uff7d\105\uff7d\115\uff7d\116\uff7d\117\uff7d" +
    "\120\uff7d\001\002\000\004\056\247\001\002\000\062\006" +
    "\uff76\015\uff76\020\uff76\027\uff76\032\uff76\033\uff76\034\uff76" +
    "\040\uff76\041\uff76\045\uff76\047\uff76\050\uff76\051\uff76\052" +
    "\uff76\053\uff76\061\uff76\063\uff76\065\uff76\067\uff76\100\uff76" +
    "\105\uff76\116\uff76\117\uff76\120\uff76\001\002\000\062\006" +
    "\051\015\030\020\041\027\015\032\033\033\057\034\016" +
    "\040\064\041\233\045\043\047\012\050\055\051\052\052" +
    "\056\053\024\061\014\063\010\065\036\067\017\100\050" +
    "\105\021\116\047\117\034\120\063\001\002\000\070\002" +
    "\uff75\006\uff75\014\uff75\015\uff75\020\uff75\027\uff75\032\uff75" +
    "\033\uff75\034\uff75\040\uff75\041\uff75\045\uff75\047\uff75\050" +
    "\uff75\051\uff75\052\uff75\053\uff75\061\uff75\063\uff75\065\uff75" +
    "\067\uff75\100\uff75\105\uff75\115\uff75\116\uff75\117\uff75\120" +
    "\uff75\001\002\000\060\055\125\056\253\063\114\066\105" +
    "\067\124\070\121\071\122\072\115\073\112\074\103\075" +
    "\120\076\107\077\111\101\102\102\131\103\104\104\106" +
    "\106\116\107\127\110\123\111\110\112\113\113\130\001" +
    "\002\000\062\006\051\015\030\020\041\027\015\032\033" +
    "\033\057\034\016\040\064\041\233\045\043\047\012\050" +
    "\055\051\052\052\056\053\024\061\014\063\010\065\036" +
    "\067\017\100\050\105\021\116\047\117\034\120\063\001" +
    "\002\000\070\002\uff79\006\uff79\014\uff79\015\uff79\020\uff79" +
    "\027\uff79\032\uff79\033\uff79\034\uff79\040\uff79\041\uff79\045" +
    "\uff79\047\uff79\050\uff79\051\uff79\052\uff79\053\uff79\061\uff79" +
    "\063\uff79\065\uff79\067\uff79\100\uff79\105\uff79\115\uff79\116" +
    "\uff79\117\uff79\120\uff79\001\002\000\146\002\uffab\006\uffab" +
    "\015\uffab\020\uffab\027\uffab\032\uffab\033\uffab\034\uffab\040" +
    "\uffab\041\uffab\045\uffab\047\uffab\050\uffab\051\uffab\052\uffab" +
    "\053\uffab\054\uffab\055\125\056\uffab\060\uffab\061\uffab\062" +
    "\uffab\063\114\064\uffab\065\uffab\066\uffab\067\uffab\070\uffab" +
    "\071\uffab\072\uffab\073\uffab\074\uffab\075\uffab\076\uffab\077" +
    "\uffab\100\uffab\101\uffab\102\uffab\103\uffab\104\uffab\105\uffab" +
    "\106\uffab\107\uffab\110\uffab\111\uffab\112\uffab\113\uffab\116" +
    "\uffab\117\uffab\120\uffab\001\002\000\004\046\uff9e\001\002" +
    "\000\040\045\043\047\012\050\055\051\052\052\056\053" +
    "\024\061\014\063\010\065\036\067\017\100\050\105\021" +
    "\116\047\117\034\120\063\001\002\000\040\045\043\047" +
    "\012\050\055\051\052\052\056\053\024\061\014\063\010" +
    "\065\036\067\017\100\050\105\021\116\047\117\034\120" +
    "\063\001\002\000\064\002\uff9a\006\uff9a\015\uff9a\020\uff9a" +
    "\027\uff9a\032\uff9a\033\uff9a\034\uff9a\040\uff9a\041\uff9a\045" +
    "\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\061\uff9a" +
    "\063\uff9a\065\uff9a\067\uff9a\100\uff9a\105\uff9a\116\uff9a\117" +
    "\uff9a\120\uff9a\001\002\000\136\002\uff9b\006\uff9b\015\uff9b" +
    "\020\uff9b\027\uff9b\032\uff9b\033\uff9b\034\uff9b\040\uff9b\041" +
    "\uff9b\045\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b" +
    "\054\213\055\125\061\uff9b\063\uff9b\065\uff9b\066\105\067" +
    "\uff9b\070\121\071\122\072\115\073\112\074\103\075\120" +
    "\076\107\077\111\100\uff9b\101\102\102\131\103\104\104" +
    "\106\105\uff9b\106\116\107\127\110\123\111\110\112\113" +
    "\113\130\116\uff9b\117\uff9b\120\uff9b\001\002\000\006\046" +
    "\uffa2\054\257\001\002\000\056\055\125\063\114\066\105" +
    "\067\124\070\121\071\122\072\115\073\112\074\103\075" +
    "\120\076\107\077\111\101\102\102\131\103\104\104\106" +
    "\106\116\107\127\110\123\111\110\112\113\113\130\001" +
    "\002\000\064\046\uffa3\054\257\055\uffe8\061\072\063\uffe8" +
    "\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8\073\uffe8\074" +
    "\uffe8\075\uffe8\076\uffe8\077\uffe8\101\uffe8\102\uffe8\103\uffe8" +
    "\104\uffe8\106\uffe8\107\uffe8\110\uffe8\111\uffe8\112\uffe8\113" +
    "\uffe8\001\002\000\004\046\uffa1\001\002\000\140\002\uffc8" +
    "\006\uffc8\015\uffc8\020\uffc8\027\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\040\uffc8\041\uffc8\045\uffc8\046\uffa4\047\uffc8\050\uffc8" +
    "\051\uffc8\052\uffc8\053\uffc8\054\uffa4\055\uffc8\061\uffc8\063" +
    "\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8" +
    "\073\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8\101" +
    "\uffc8\102\uffc8\103\uffc8\104\uffc8\105\uffc8\106\uffc8\107\uffc8" +
    "\110\uffc8\111\uffc8\112\uffc8\113\uffc8\116\uffc8\117\uffc8\120" +
    "\uffc8\001\002\000\004\046\uffa0\001\002\000\146\002\uffdb" +
    "\006\uffdb\015\uffdb\020\uffdb\027\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\040\uffdb\041\uffdb\045\uffdb\047\uffdb\050\uffdb\051\uffdb" +
    "\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\060\uffdb\061" +
    "\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb" +
    "\070\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\076" +
    "\uffdb\077\uffdb\100\uffdb\101\uffdb\102\uffdb\103\uffdb\104\uffdb" +
    "\105\uffdb\106\uffdb\107\uffdb\110\uffdb\111\uffdb\112\uffdb\113" +
    "\uffdb\116\uffdb\117\uffdb\120\uffdb\001\002\000\004\064\301" +
    "\001\002\000\006\054\277\064\uffd9\001\002\000\060\055" +
    "\125\056\275\063\114\066\105\067\124\070\121\071\122" +
    "\072\115\073\112\074\103\075\120\076\107\077\111\101" +
    "\102\102\131\103\104\104\106\106\116\107\127\110\123" +
    "\111\110\112\113\113\130\001\002\000\040\045\043\047" +
    "\012\050\055\051\052\052\056\053\024\061\014\063\010" +
    "\065\036\067\017\100\050\105\021\116\047\117\034\120" +
    "\063\001\002\000\062\054\uffda\055\125\063\114\064\uffda" +
    "\066\105\067\124\070\121\071\122\072\115\073\112\074" +
    "\103\075\120\076\107\077\111\101\102\102\131\103\104" +
    "\104\106\106\116\107\127\110\123\111\110\112\113\113" +
    "\130\001\002\000\040\045\043\047\012\050\055\051\052" +
    "\052\056\053\024\061\014\063\010\065\036\067\017\100" +
    "\050\105\021\116\047\117\034\120\063\001\002\000\004" +
    "\064\uffd8\001\002\000\146\002\uffdc\006\uffdc\015\uffdc\020" +
    "\uffdc\027\uffdc\032\uffdc\033\uffdc\034\uffdc\040\uffdc\041\uffdc" +
    "\045\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054" +
    "\uffdc\055\uffdc\056\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc" +
    "\064\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc\071\uffdc\072" +
    "\uffdc\073\uffdc\074\uffdc\075\uffdc\076\uffdc\077\uffdc\100\uffdc" +
    "\101\uffdc\102\uffdc\103\uffdc\104\uffdc\105\uffdc\106\uffdc\107" +
    "\uffdc\110\uffdc\111\uffdc\112\uffdc\113\uffdc\116\uffdc\117\uffdc" +
    "\120\uffdc\001\002\000\064\002\uffa5\006\uffa5\015\uffa5\020" +
    "\uffa5\027\uffa5\032\uffa5\033\uffa5\034\uffa5\040\uffa5\041\uffa5" +
    "\045\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\061" +
    "\uffa5\063\uffa5\065\uffa5\067\uffa5\100\uffa5\105\uffa5\116\uffa5" +
    "\117\uffa5\120\uffa5\001\002\000\136\002\uffa6\006\uffa6\015" +
    "\uffa6\020\uffa6\027\uffa6\032\uffa6\033\uffa6\034\uffa6\040\uffa6" +
    "\041\uffa6\045\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053" +
    "\uffa6\054\213\055\125\061\uffa6\063\114\065\uffa6\066\105" +
    "\067\124\070\121\071\122\072\115\073\112\074\103\075" +
    "\120\076\107\077\111\100\uffa6\101\102\102\131\103\104" +
    "\104\106\105\uffa6\106\116\107\127\110\123\111\110\112" +
    "\113\113\130\116\uffa6\117\uffa6\120\uffa6\001\002\000\060" +
    "\055\125\056\305\063\114\066\105\067\124\070\121\071" +
    "\122\072\115\073\112\074\103\075\120\076\107\077\111" +
    "\101\102\102\131\103\104\104\106\106\116\107\127\110" +
    "\123\111\110\112\113\113\130\001\002\000\062\006\051" +
    "\015\030\020\041\027\015\032\033\033\057\034\016\040" +
    "\064\041\233\045\043\047\012\050\055\051\052\052\056" +
    "\053\024\061\014\063\010\065\036\067\017\100\050\105" +
    "\021\116\047\117\034\120\063\001\002\000\070\002\uff7c" +
    "\006\uff7c\014\307\015\uff7c\020\uff7c\027\uff7c\032\uff7c\033" +
    "\uff7c\034\uff7c\040\uff7c\041\uff7c\045\uff7c\047\uff7c\050\uff7c" +
    "\051\uff7c\052\uff7c\053\uff7c\061\uff7c\063\uff7c\065\uff7c\067" +
    "\uff7c\100\uff7c\105\uff7c\115\uff7c\116\uff7c\117\uff7c\120\uff7c" +
    "\001\002\000\004\056\310\001\002\000\062\006\051\015" +
    "\030\020\041\027\015\032\033\033\057\034\016\040\064" +
    "\041\233\045\043\047\012\050\055\051\052\052\056\053" +
    "\024\061\014\063\010\065\036\067\017\100\050\105\021" +
    "\116\047\117\034\120\063\001\002\000\070\002\uff7b\006" +
    "\uff7b\014\uff7b\015\uff7b\020\uff7b\027\uff7b\032\uff7b\033\uff7b" +
    "\034\uff7b\040\uff7b\041\uff7b\045\uff7b\047\uff7b\050\uff7b\051" +
    "\uff7b\052\uff7b\053\uff7b\061\uff7b\063\uff7b\065\uff7b\067\uff7b" +
    "\100\uff7b\105\uff7b\115\uff7b\116\uff7b\117\uff7b\120\uff7b\001" +
    "\002\000\004\002\ufffe\001\002\000\062\002\ufffd\006\051" +
    "\015\030\020\041\027\015\032\033\033\057\034\016\040" +
    "\064\045\043\047\012\050\055\051\052\052\056\053\024" +
    "\061\014\063\010\065\036\067\017\100\050\105\021\116" +
    "\047\117\034\120\063\001\002\000\004\002\uffff\001\002" +
    "\000\146\002\uffac\006\uffac\015\uffac\020\uffac\027\uffac\032" +
    "\uffac\033\uffac\034\uffac\040\uffac\041\uffac\045\uffac\047\uffac" +
    "\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\125\056" +
    "\uffac\060\uffac\061\uffac\062\uffac\063\114\064\uffac\065\uffac" +
    "\066\105\067\124\070\121\071\122\072\115\073\112\074" +
    "\103\075\120\076\107\077\111\100\uffac\101\102\102\131" +
    "\103\uffac\104\uffac\105\uffac\106\116\107\127\110\123\111" +
    "\110\112\113\113\130\116\uffac\117\uffac\120\uffac\001\002" +
    "\000\004\046\uff9f\001\002\000\040\045\043\047\012\050" +
    "\055\051\052\052\056\053\024\061\014\063\010\065\036" +
    "\067\017\100\050\105\021\116\047\117\034\120\063\001" +
    "\002\000\064\002\uff9c\006\uff9c\015\uff9c\020\uff9c\027\uff9c" +
    "\032\uff9c\033\uff9c\034\uff9c\040\uff9c\041\uff9c\045\uff9c\047" +
    "\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\061\uff9c\063\uff9c" +
    "\065\uff9c\067\uff9c\100\uff9c\105\uff9c\116\uff9c\117\uff9c\120" +
    "\uff9c\001\002\000\136\002\uff9d\006\uff9d\015\uff9d\020\uff9d" +
    "\027\uff9d\032\uff9d\033\uff9d\034\uff9d\040\uff9d\041\uff9d\045" +
    "\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054\213" +
    "\055\125\061\uff9d\063\uff9d\065\uff9d\066\105\067\uff9d\070" +
    "\121\071\122\072\115\073\112\074\103\075\120\076\107" +
    "\077\111\100\uff9d\101\102\102\131\103\104\104\106\105" +
    "\uff9d\106\116\107\127\110\123\111\110\112\113\113\130" +
    "\116\uff9d\117\uff9d\120\uff9d\001\002\000\146\002\ufff6\006" +
    "\ufff6\015\ufff6\020\ufff6\027\ufff6\032\ufff6\033\ufff6\034\ufff6" +
    "\040\ufff6\041\ufff6\045\ufff6\047\ufff6\050\ufff6\051\ufff6\052" +
    "\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\060\ufff6\061\ufff6" +
    "\062\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070" +
    "\ufff6\071\ufff6\072\ufff6\073\ufff6\074\ufff6\075\ufff6\076\ufff6" +
    "\077\ufff6\100\ufff6\101\ufff6\102\ufff6\103\ufff6\104\ufff6\105" +
    "\ufff6\106\ufff6\107\ufff6\110\ufff6\111\ufff6\112\ufff6\113\ufff6" +
    "\116\ufff6\117\ufff6\120\ufff6\001\002\000\146\002\ufff4\006" +
    "\ufff4\015\ufff4\020\ufff4\027\ufff4\032\ufff4\033\ufff4\034\ufff4" +
    "\040\ufff4\041\ufff4\045\ufff4\047\ufff4\050\ufff4\051\ufff4\052" +
    "\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\060\ufff4\061\ufff4" +
    "\062\ufff4\063\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\070" +
    "\ufff4\071\ufff4\072\ufff4\073\ufff4\074\ufff4\075\ufff4\076\ufff4" +
    "\077\ufff4\100\ufff4\101\ufff4\102\ufff4\103\ufff4\104\ufff4\105" +
    "\ufff4\106\ufff4\107\ufff4\110\ufff4\111\ufff4\112\ufff4\113\ufff4" +
    "\116\ufff4\117\ufff4\120\ufff4\001\002\000\146\002\ufff2\006" +
    "\ufff2\015\ufff2\020\ufff2\027\ufff2\032\ufff2\033\ufff2\034\ufff2" +
    "\040\ufff2\041\ufff2\045\ufff2\047\ufff2\050\ufff2\051\ufff2\052" +
    "\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\060\ufff2\061\ufff2" +
    "\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2\070" +
    "\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2" +
    "\077\ufff2\100\ufff2\101\ufff2\102\ufff2\103\ufff2\104\ufff2\105" +
    "\ufff2\106\ufff2\107\ufff2\110\ufff2\111\ufff2\112\ufff2\113\ufff2" +
    "\116\ufff2\117\ufff2\120\ufff2\001\002\000\004\025\326\001" +
    "\002\000\040\045\043\047\012\050\055\051\052\052\056" +
    "\053\024\061\014\063\010\065\036\067\017\100\050\105" +
    "\021\116\047\117\034\120\063\001\002\000\060\055\125" +
    "\056\330\063\114\066\105\067\124\070\121\071\122\072" +
    "\115\073\112\074\103\075\120\076\107\077\111\101\102" +
    "\102\131\103\104\104\106\106\116\107\127\110\123\111" +
    "\110\112\113\113\130\001\002\000\062\006\051\015\030" +
    "\020\041\027\015\032\033\033\057\034\016\040\064\041" +
    "\233\045\043\047\012\050\055\051\052\052\056\053\024" +
    "\061\014\063\010\065\036\067\017\100\050\105\021\116" +
    "\047\117\034\120\063\001\002\000\070\002\uff7a\006\uff7a" +
    "\014\uff7a\015\uff7a\020\uff7a\027\uff7a\032\uff7a\033\uff7a\034" +
    "\uff7a\040\uff7a\041\uff7a\045\uff7a\047\uff7a\050\uff7a\051\uff7a" +
    "\052\uff7a\053\uff7a\061\uff7a\063\uff7a\065\uff7a\067\uff7a\100" +
    "\uff7a\105\uff7a\115\uff7a\116\uff7a\117\uff7a\120\uff7a\001\002" +
    "\000\146\002\uffe6\006\uffe6\015\uffe6\020\uffe6\027\uffe6\032" +
    "\uffe6\033\uffe6\034\uffe6\040\uffe6\041\uffe6\045\uffe6\047\uffe6" +
    "\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056" +
    "\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6" +
    "\066\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6\073\uffe6\074" +
    "\uffe6\075\uffe6\076\uffe6\077\uffe6\100\uffe6\101\uffe6\102\uffe6" +
    "\103\uffe6\104\uffe6\105\uffe6\106\uffe6\107\uffe6\110\uffe6\111" +
    "\uffe6\112\uffe6\113\uffe6\116\uffe6\117\uffe6\120\uffe6\001\002" +
    "\000\004\060\336\001\002\000\062\054\213\055\125\060" +
    "\335\063\114\066\105\067\124\070\121\071\122\072\115" +
    "\073\112\074\103\075\120\076\107\077\111\101\102\102" +
    "\131\103\104\104\106\106\116\107\127\110\123\111\110" +
    "\112\113\113\130\001\002\000\146\002\uffc1\006\uffc1\015" +
    "\uffc1\020\uffc1\027\uffc1\032\uffc1\033\uffc1\034\uffc1\040\uffc1" +
    "\041\uffc1\045\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053" +
    "\uffc1\054\uffc1\055\uffc1\056\uffc1\060\uffc1\061\uffc1\062\uffc1" +
    "\063\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1\070\uffc1\071" +
    "\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1" +
    "\100\uffc1\101\uffc1\102\uffc1\103\uffc1\104\uffc1\105\uffc1\106" +
    "\uffc1\107\uffc1\110\uffc1\111\uffc1\112\uffc1\113\uffc1\116\uffc1" +
    "\117\uffc1\120\uffc1\001\002\000\146\002\uffe5\006\uffe5\015" +
    "\uffe5\020\uffe5\027\uffe5\032\uffe5\033\uffe5\034\uffe5\040\uffe5" +
    "\041\uffe5\045\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053" +
    "\uffe5\054\uffe5\055\uffe5\056\uffe5\060\uffe5\061\uffe5\062\uffe5" +
    "\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\070\uffe5\071" +
    "\uffe5\072\uffe5\073\uffe5\074\uffe5\075\uffe5\076\uffe5\077\uffe5" +
    "\100\uffe5\101\uffe5\102\uffe5\103\uffe5\104\uffe5\105\uffe5\106" +
    "\uffe5\107\uffe5\110\uffe5\111\uffe5\112\uffe5\113\uffe5\116\uffe5" +
    "\117\uffe5\120\uffe5\001\002\000\146\002\uffe0\006\uffe0\015" +
    "\uffe0\020\uffe0\027\uffe0\032\uffe0\033\uffe0\034\uffe0\040\uffe0" +
    "\041\uffe0\045\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053" +
    "\uffe0\054\uffe0\055\uffe0\056\uffe0\060\uffe0\061\uffe0\062\uffe0" +
    "\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0\071" +
    "\uffe0\072\uffe0\073\uffe0\074\uffe0\075\uffe0\076\uffe0\077\uffe0" +
    "\100\uffe0\101\uffe0\102\uffe0\103\uffe0\104\uffe0\105\uffe0\106" +
    "\uffe0\107\uffe0\110\uffe0\111\uffe0\112\uffe0\113\uffe0\116\uffe0" +
    "\117\uffe0\120\uffe0\001\002\000\004\062\344\001\002\000" +
    "\062\054\342\055\125\062\uffde\063\114\066\105\067\124" +
    "\070\121\071\122\072\115\073\112\074\103\075\120\076" +
    "\107\077\111\101\102\102\131\103\104\104\106\106\116" +
    "\107\127\110\123\111\110\112\113\113\130\001\002\000" +
    "\040\045\043\047\012\050\055\051\052\052\056\053\024" +
    "\061\014\063\010\065\036\067\017\100\050\105\021\116" +
    "\047\117\034\120\063\001\002\000\004\062\uffdd\001\002" +
    "\000\146\002\uffdf\006\uffdf\015\uffdf\020\uffdf\027\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\040\uffdf\041\uffdf\045\uffdf\047\uffdf" +
    "\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056" +
    "\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf" +
    "\066\uffdf\067\uffdf\070\uffdf\071\uffdf\072\uffdf\073\uffdf\074" +
    "\uffdf\075\uffdf\076\uffdf\077\uffdf\100\uffdf\101\uffdf\102\uffdf" +
    "\103\uffdf\104\uffdf\105\uffdf\106\uffdf\107\uffdf\110\uffdf\111" +
    "\uffdf\112\uffdf\113\uffdf\116\uffdf\117\uffdf\120\uffdf\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\070\002\036\003\005\007\012\010\030\015" +
    "\025\017\060\020\034\026\064\027\043\030\045\031\031" +
    "\032\037\033\061\035\024\036\057\037\041\040\010\043" +
    "\017\046\052\050\026\051\003\056\053\057\044\060\021" +
    "\062\006\063\022\065\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\002\036\003\005\010\340\026\064\027\043\030\045\031" +
    "\031\043\067\046\052\047\337\050\026\051\003\056\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\002\036\003\005\010\333\026\064\027\043" +
    "\030\045\031\031\043\067\046\052\050\026\051\003\053" +
    "\332\056\053\001\001\000\002\001\001\000\004\043\324" +
    "\001\001\000\002\001\001\000\006\016\315\025\070\001" +
    "\001\000\032\002\036\003\005\010\314\026\064\027\043" +
    "\030\045\031\031\043\067\046\052\050\026\051\003\056" +
    "\053\001\001\000\070\002\036\003\005\007\012\010\030" +
    "\015\025\017\060\020\034\026\064\027\043\030\045\031" +
    "\031\032\037\033\061\035\024\036\057\037\041\040\010" +
    "\043\017\046\052\050\026\051\003\056\053\057\044\060" +
    "\021\061\312\062\311\063\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\002\036\003\005\010\303\026\064" +
    "\027\043\030\045\031\031\043\067\046\052\050\026\051" +
    "\003\056\053\001\001\000\004\055\266\001\001\000\002" +
    "\001\001\000\034\002\036\003\005\010\302\026\064\027" +
    "\043\030\045\031\031\043\067\046\052\050\026\051\003" +
    "\053\301\056\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\002\036\003\005\010\273\026\064\027\043" +
    "\030\045\031\031\043\067\044\271\045\272\046\052\050" +
    "\026\051\003\056\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\255\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\002\036\003\005\010" +
    "\254\026\064\027\043\030\045\031\031\043\067\046\052" +
    "\050\026\051\003\056\053\001\001\000\032\002\036\003" +
    "\005\010\251\026\064\027\043\030\045\031\031\043\067" +
    "\046\052\050\026\051\003\056\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\002\036\003\005\010\065\026\064\027\043\030" +
    "\045\031\031\043\067\046\052\050\026\051\003\054\066" +
    "\056\053\001\001\000\002\001\001\000\004\055\125\001" +
    "\001\000\002\001\001\000\004\025\070\001\001\000\002" +
    "\001\001\000\040\002\036\003\005\010\076\022\072\023" +
    "\074\024\077\026\064\027\043\030\045\031\031\043\067" +
    "\046\052\050\026\051\003\056\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\055\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\002\036\003\005\010\177\026\064\027\043" +
    "\030\045\031\031\043\067\046\052\050\026\051\003\056" +
    "\053\001\001\000\032\002\036\003\005\010\176\026\064" +
    "\027\043\030\045\031\031\043\067\046\052\050\026\051" +
    "\003\056\053\001\001\000\032\002\036\003\005\010\175" +
    "\026\064\027\043\030\045\031\031\043\067\046\052\050" +
    "\026\051\003\056\053\001\001\000\032\002\036\003\005" +
    "\010\174\026\064\027\043\030\045\031\031\043\067\046" +
    "\052\050\026\051\003\056\053\001\001\000\032\002\036" +
    "\003\005\010\173\026\064\027\043\030\045\031\031\043" +
    "\067\046\052\050\026\051\003\056\053\001\001\000\032" +
    "\002\036\003\005\010\172\026\064\027\043\030\045\031" +
    "\031\043\067\046\052\050\026\051\003\056\053\001\001" +
    "\000\032\002\036\003\005\010\171\026\064\027\043\030" +
    "\045\031\031\043\067\046\052\050\026\051\003\056\053" +
    "\001\001\000\032\002\036\003\005\010\170\026\064\027" +
    "\043\030\045\031\031\043\067\046\052\050\026\051\003" +
    "\056\053\001\001\000\032\002\036\003\005\010\167\026" +
    "\064\027\043\030\045\031\031\043\067\046\052\050\026" +
    "\051\003\056\053\001\001\000\032\002\036\003\005\010" +
    "\166\026\064\027\043\030\045\031\031\043\067\046\052" +
    "\050\026\051\003\056\053\001\001\000\034\002\036\003" +
    "\005\010\147\011\150\026\064\027\043\030\045\031\031" +
    "\043\067\046\052\050\026\051\003\056\053\001\001\000" +
    "\032\002\036\003\005\010\145\026\064\027\043\030\045" +
    "\031\031\043\067\046\052\050\026\051\003\056\053\001" +
    "\001\000\032\002\036\003\005\010\144\026\064\027\043" +
    "\030\045\031\031\043\067\046\052\050\026\051\003\056" +
    "\053\001\001\000\040\002\036\003\005\010\076\022\072" +
    "\023\074\024\143\026\064\027\043\030\045\031\031\043" +
    "\067\046\052\050\026\051\003\056\053\001\001\000\032" +
    "\002\036\003\005\010\142\026\064\027\043\030\045\031" +
    "\031\043\067\046\052\050\026\051\003\056\053\001\001" +
    "\000\032\002\036\003\005\010\141\026\064\027\043\030" +
    "\045\031\031\043\067\046\052\050\026\051\003\056\053" +
    "\001\001\000\032\002\036\003\005\010\140\026\064\027" +
    "\043\030\045\031\031\043\067\046\052\050\026\051\003" +
    "\056\053\001\001\000\032\002\036\003\005\010\137\026" +
    "\064\027\043\030\045\031\031\043\067\046\052\050\026" +
    "\051\003\056\053\001\001\000\032\002\036\003\005\010" +
    "\136\026\064\027\043\030\045\031\031\043\067\046\052" +
    "\050\026\051\003\056\053\001\001\000\004\043\134\001" +
    "\001\000\002\001\001\000\032\002\036\003\005\010\133" +
    "\026\064\027\043\030\045\031\031\043\067\046\052\050" +
    "\026\051\003\056\053\001\001\000\032\002\036\003\005" +
    "\010\132\026\064\027\043\030\045\031\031\043\067\046" +
    "\052\050\026\051\003\056\053\001\001\000\032\002\036" +
    "\003\005\010\131\026\064\027\043\030\045\031\031\043" +
    "\067\046\052\050\026\051\003\056\053\001\001\000\004" +
    "\055\125\001\001\000\004\055\125\001\001\000\004\055" +
    "\125\001\001\000\004\025\135\001\001\000\002\001\001" +
    "\000\004\055\125\001\001\000\004\055\125\001\001\000" +
    "\004\055\125\001\001\000\004\055\125\001\001\000\004" +
    "\055\125\001\001\000\002\001\001\000\004\055\125\001" +
    "\001\000\004\055\125\001\001\000\032\002\036\003\005" +
    "\010\162\026\064\027\043\030\045\031\031\043\067\046" +
    "\052\050\026\051\003\056\053\001\001\000\004\055\125" +
    "\001\001\000\002\001\001\000\004\055\152\001\001\000" +
    "\002\001\001\000\032\002\036\003\005\010\155\026\064" +
    "\027\043\030\045\031\031\043\067\046\052\050\026\051" +
    "\003\056\053\001\001\000\032\002\036\003\005\010\160" +
    "\026\064\027\043\030\045\031\031\043\067\046\052\050" +
    "\026\051\003\056\053\001\001\000\004\055\125\001\001" +
    "\000\032\002\036\003\005\010\157\026\064\027\043\030" +
    "\045\031\031\043\067\046\052\050\026\051\003\056\053" +
    "\001\001\000\004\055\125\001\001\000\004\055\125\001" +
    "\001\000\032\002\036\003\005\010\165\026\064\027\043" +
    "\030\045\031\031\043\067\046\052\050\026\051\003\056" +
    "\053\001\001\000\004\055\125\001\001\000\032\002\036" +
    "\003\005\010\164\026\064\027\043\030\045\031\031\043" +
    "\067\046\052\050\026\051\003\056\053\001\001\000\004" +
    "\055\125\001\001\000\004\055\125\001\001\000\004\055" +
    "\125\001\001\000\004\055\125\001\001\000\004\055\125" +
    "\001\001\000\004\055\125\001\001\000\004\055\125\001" +
    "\001\000\004\055\125\001\001\000\004\055\125\001\001" +
    "\000\004\055\125\001\001\000\004\055\125\001\001\000" +
    "\004\055\125\001\001\000\032\002\036\003\005\010\201" +
    "\026\064\027\043\030\045\031\031\043\067\046\052\050" +
    "\026\051\003\056\053\001\001\000\004\055\125\001\001" +
    "\000\006\022\072\023\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\002\036\003\005\010\065\026\064" +
    "\027\043\030\045\031\031\043\067\046\052\050\026\051" +
    "\003\054\206\056\053\001\001\000\002\001\001\000\034" +
    "\002\036\003\005\010\211\026\064\027\043\030\045\031" +
    "\031\043\067\046\052\050\026\051\003\053\210\056\053" +
    "\001\001\000\002\001\001\000\004\055\125\001\001\000" +
    "\034\002\036\003\005\010\214\026\064\027\043\030\045" +
    "\031\031\043\067\046\052\050\026\051\003\052\213\056" +
    "\053\001\001\000\002\001\001\000\004\055\125\001\001" +
    "\000\034\002\036\003\005\010\214\026\064\027\043\030" +
    "\045\031\031\043\067\046\052\050\026\051\003\052\216" +
    "\056\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\064\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\225\001\001\000\002\001" +
    "\001\000\004\067\227\001\001\000\066\002\036\003\005" +
    "\007\012\010\030\015\025\017\060\020\034\026\064\027" +
    "\043\030\045\031\031\032\037\033\233\034\234\035\230" +
    "\036\057\037\041\040\010\042\231\043\017\046\052\050" +
    "\026\051\003\056\053\057\044\063\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\061" +
    "\235\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\237\001\001\000\002\001\001\000\066\002\036\003" +
    "\005\007\012\010\030\015\025\017\060\020\034\026\064" +
    "\027\043\030\045\031\031\032\037\033\233\034\242\035" +
    "\230\036\057\037\041\040\010\041\241\043\017\046\052" +
    "\050\026\051\003\056\053\057\044\063\022\001\001\000" +
    "\002\001\001\000\066\002\036\003\005\007\012\010\030" +
    "\015\025\017\060\020\034\026\064\027\043\030\045\031" +
    "\031\032\037\033\233\034\242\035\230\036\057\037\041" +
    "\040\010\041\243\043\017\046\052\050\026\051\003\056" +
    "\053\057\044\063\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\066\247\001\001\000" +
    "\066\002\036\003\005\007\012\010\030\015\025\017\060" +
    "\020\034\026\064\027\043\030\045\031\031\032\037\033" +
    "\233\034\234\035\230\036\057\037\041\040\010\042\250" +
    "\043\017\046\052\050\026\051\003\056\053\057\044\063" +
    "\022\001\001\000\002\001\001\000\004\055\125\001\001" +
    "\000\066\002\036\003\005\007\012\010\030\015\025\017" +
    "\060\020\034\026\064\027\043\030\045\031\031\032\037" +
    "\033\233\034\234\035\230\036\057\037\041\040\010\042" +
    "\253\043\017\046\052\050\026\051\003\056\053\057\044" +
    "\063\022\001\001\000\002\001\001\000\004\055\125\001" +
    "\001\000\002\001\001\000\034\002\036\003\005\010\263" +
    "\026\064\027\043\030\045\031\031\043\264\046\052\050" +
    "\026\051\003\056\053\057\262\001\001\000\034\002\036" +
    "\003\005\010\261\026\064\027\043\030\045\031\031\043" +
    "\067\046\052\050\026\051\003\053\260\056\053\001\001" +
    "\000\002\001\001\000\004\055\125\001\001\000\004\016" +
    "\267\001\001\000\004\055\266\001\001\000\006\016\265" +
    "\025\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\055\125\001\001\000\032\002\036\003" +
    "\005\010\275\026\064\027\043\030\045\031\031\043\067" +
    "\046\052\050\026\051\003\056\053\001\001\000\004\055" +
    "\125\001\001\000\036\002\036\003\005\010\273\026\064" +
    "\027\043\030\045\031\031\043\067\044\277\045\272\046" +
    "\052\050\026\051\003\056\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\125\001" +
    "\001\000\004\055\125\001\001\000\066\002\036\003\005" +
    "\007\012\010\030\015\025\017\060\020\034\026\064\027" +
    "\043\030\045\031\031\032\037\033\233\034\234\035\230" +
    "\036\057\037\041\040\010\042\305\043\017\046\052\050" +
    "\026\051\003\056\053\057\044\063\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\066\002\036\003\005\007" +
    "\012\010\030\015\025\017\060\020\034\026\064\027\043" +
    "\030\045\031\031\032\037\033\233\034\234\035\230\036" +
    "\057\037\041\040\010\042\310\043\017\046\052\050\026" +
    "\051\003\056\053\057\044\063\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\066\002\036\003\005\007\012" +
    "\010\030\015\025\017\060\020\034\026\064\027\043\030" +
    "\045\031\031\032\037\033\061\035\024\036\057\037\041" +
    "\040\010\043\017\046\052\050\026\051\003\056\053\057" +
    "\044\060\021\062\313\063\022\001\001\000\002\001\001" +
    "\000\004\055\125\001\001\000\002\001\001\000\034\002" +
    "\036\003\005\010\320\026\064\027\043\030\045\031\031" +
    "\043\067\046\052\050\026\051\003\053\317\056\053\001" +
    "\001\000\002\001\001\000\004\055\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\002\036\003\005\010\326\026\064\027\043" +
    "\030\045\031\031\043\067\046\052\050\026\051\003\056" +
    "\053\001\001\000\004\055\125\001\001\000\066\002\036" +
    "\003\005\007\012\010\030\015\025\017\060\020\034\026" +
    "\064\027\043\030\045\031\031\032\037\033\233\034\234" +
    "\035\230\036\057\037\041\040\010\042\330\043\017\046" +
    "\052\050\026\051\003\056\053\057\044\063\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\125\001" +
    "\001\000\034\002\036\003\005\010\340\026\064\027\043" +
    "\030\045\031\031\043\067\046\052\047\342\050\026\051" +
    "\003\056\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    //MANTENGO UN STACK DE GENERADORES Y PUSHEO EL PRIMERO
    ParserStatus.StackGenerador.push(new Generador());

    }



    public void syntax_error(Symbol s){

        System.out.println("Error de sintaxis "+s.sym+" en la linea "+(s.left+1)+" y la columna "+s.right);
        System.out.println(s.value);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error de sintaxis "+s.sym);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // func_def ::= DEF name LPAREN RPAREN COLON NT$1 suite 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateFunctionDef(d,n,null,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_def",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NT$1 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 RuleGenerator.generateNewScope(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // func_def ::= DEF name LPAREN func_parameters RPAREN COLON NT$0 suite 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object fp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateFunctionDef(d,n,fp,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_def",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$0 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object fp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 RuleGenerator.generateNewScope(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // func_parameters ::= NAME COMA func_parameters 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateFunParams(n,fp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_parameters",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // func_parameters ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateFunParams(n,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_parameters",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // while_stmt ::= WHILE expression COLON suite 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=RuleGenerator.generateWhileStatement(e,c,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // for_stmt ::= FOR name IN expression COLON suite 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=RuleGenerator.generateForStatement(n,exp,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // if_stmt ::= IF expression COLON suite ELSE COLON suite 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateIfStatement(e,c1,s1,c2,s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // if_stmt ::= IF expression COLON suite 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateIfStatement(e,c,s1,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // suite ::= NEWLINE INDENT stmt_list DEDENT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("suite",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // suite ::= stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("suite",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // stmt_list ::= stmt stmt_list 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.joinBloques(s,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // stmt_list ::= stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // compound_stmt ::= func_def 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // compound_stmt ::= for_stmt 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // compound_stmt ::= while_stmt 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // compound_stmt ::= if_stmt 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // stmt ::= compound_stmt 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // stmt ::= small_stmt input_newline 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // small_stmt ::= flow_stmt 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // small_stmt ::= print_stmt 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // small_stmt ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.addPop(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // small_stmt ::= expr_stmt 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // flow_stmt ::= return_stmt 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // flow_stmt ::= CONTINUE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateContinue(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // flow_stmt ::= BREAK 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBreak(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // func_call ::= name trailer 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateFunctionCall(n,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // func_call ::= expression DOT name trailer 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateNameFunctionCall(e,d,n,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // trailer ::= LPAREN argument_list RPAREN 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = al; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trailer",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // trailer ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trailer",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // argument_list ::= named_argument_list 
            {
              Object RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // argument_list ::= expression COMA argument_list 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateArguments(c,e,al); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // argument_list ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateArguments(null,e,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // named_argument_list ::= named_argument COMA named_argument_list 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateNamedArgumentList(n,c,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("named_argument_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // named_argument_list ::= named_argument 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("named_argument_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // named_argument ::= NAME ASSIGN expression 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateNamedArgument(n,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("named_argument",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expr_stmt ::= namelist ASSIGN expression 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int auleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int auright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object au = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateUnpackAssignation(n,au,tr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expr_stmt ::= namelist ASSIGN tuplemaker 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int auleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int auright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object au = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateTupleMakerAssignation(n,au,tr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expr_stmt ::= assign_exprsub ASSIGN tuplemaker 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int auleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int auright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object au = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSubscriptTupleMakerSingleAssignation(e,au,tr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr_stmt ::= assign_exprsub ASSIGN expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int auleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int auright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object au = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSubscriptAssignation(e,au,exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr_stmt ::= name ASSIGN tuplemaker 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int auleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int auright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object au = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateTupleMakerSingleAssignation(n,au,tr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr_stmt ::= name ASSIGN expression 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int auleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int auright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object au = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateAssignation(n,au,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // namelist ::= assign_exprsub namecoma 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.joinNames(e,nc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namelist",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // namelist ::= name namecoma 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.joinNames(n,nc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namelist",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // namecoma ::= COMA assign_exprsub namecoma 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.joinNames(n,nc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namecoma",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // namecoma ::= COMA name namecoma 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.joinNames(n,nc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namecoma",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // namecoma ::= COMA assign_exprsub 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.addSetIndex(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namecoma",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // namecoma ::= COMA name 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                ParseResult pr = RuleGenerator.storeName(n);
                                                                pr.argumentos = 1;
                                                                RESULT = pr;
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("namecoma",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // assign_exprsub ::= expression subscript 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int subleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sub = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSubscriptForAssign(exp1,sub); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_exprsub",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // return_stmt ::= RETURN tuplemaker 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateReturnTup(r,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // return_stmt ::= RETURN expression 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateReturnExp(r,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // return_stmt ::= RETURN 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateReturnEmpty(r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // print_stmt ::= PRINT printtrail 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generatePrintNewline(p,n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // printtrail ::= expression COMA printtrail 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generatePrint(e,c,p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printtrail",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // printtrail ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generatePrint(e,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printtrail",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression ::= NOTB expression 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateUnaryOperation(op,a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression ::= NOT expression 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateUnaryOperation(op,a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= expression EXP expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= expression DIVE expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= expression MOD expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= expression DIV expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= expression MULT expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= expression MINUS expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= expression PLUS expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= expression SHIFTR expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= expression SHIFTL expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= expression ANDB expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= expression XORB expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= expression ORB expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= expression EQUALS expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= expression DIFF expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= expression MAJOREQ expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= expression MINOREQ expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= expression MAJOR expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= expression MINOR expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= expression AND expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= expression OR expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= exprsub 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= func_call 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= tuple 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= list 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= dictionary 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= atom 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.loadNameOrConst(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exprsub ::= expression subscript 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int subleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sub = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateFullSubscript(exp1,sub); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprsub",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // slice_expression ::= expression COLON expression COLON expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSlice(c,e1,e2,e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // slice_expression ::= expression COLON expression COLON 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateSlice(c,e1,e2,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // slice_expression ::= expression COLON COLON expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSlice(c,e1,null,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // slice_expression ::= expression COLON expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSlice(c,e1,e2,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // slice_expression ::= COLON expression COLON expression 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSlice(c,null,e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // slice_expression ::= expression COLON COLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateSlice(c,e,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // slice_expression ::= COLON expression COLON 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateSlice(c,null,e,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // slice_expression ::= COLON COLON expression 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSlice(c,null,null,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // slice_expression ::= COLON expression 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSlice(c,null,e,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // slice_expression ::= expression COLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSlice(c,e,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // slice_expression ::= COLON 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSlice(c,null,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // slice_expression ::= COLON COLON 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSlice(c,null,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // slice_expression ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // subscript ::= LBRACKET slice_expression RBRACKET subscript 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateSubscript(l,e,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subscript",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // subscript ::= LBRACKET slice_expression RBRACKET 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateSubscript(l,e,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subscript",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // dictorsetmaker ::= dictorsetelement COMA dictorsetmaker 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e1,c,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // dictorsetmaker ::= dictorsetelement 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(d,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // dictorsetelement ::= expression COLON expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateDictItem(e1,c,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dictorsetelement",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // dictionary ::= LCURLY RCURLY 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateListTupleDict(c,null,OpCode.CREATE_DICT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dictionary",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // dictionary ::= LCURLY dictorsetmaker RCURLY 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateListTupleDict(c,e,OpCode.CREATE_DICT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dictionary",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // listmaker ::= expression COMA listmaker 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e,c,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listmaker",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // listmaker ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listmaker",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // list ::= LBRACKET listmaker RBRACKET 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateListTupleDict(b,l,OpCode.CREATE_LIST);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // list ::= LBRACKET RBRACKET 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateListTupleDict(b,null,OpCode.CREATE_LIST); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tuplemaker ::= expression COMA tupletrail 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e,c,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuplemaker",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tuplemaker ::= expression COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuplemaker",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tupletrail ::= expression COMA tupletrail 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e,c,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tupletrail",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tupletrail ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateListElements(e,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tupletrail",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tuple ::= LPAREN tuplemaker RPAREN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateListTupleDict(b,l,OpCode.CREATE_TUPLE);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tuple ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = RuleGenerator.generateListTupleDict(b,null,OpCode.CREATE_TUPLE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tuple",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // atom ::= constant 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // atom ::= name 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // name ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = RuleGenerator.generateName((LexerToken)n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // constant ::= FALSE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // constant ::= TRUE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // constant ::= NONE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // constant ::= STRING3 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // constant ::= STRING 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // constant ::= float 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // constant ::= long 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // constant ::= integer 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // float ::= MINUS FLOAT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateMinusConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("float",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // float ::= FLOAT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("float",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // long ::= MINUS LONG 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateMinusConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("long",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // long ::= LONG 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("long",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // integer ::= MINUS INTEGER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateMinusConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // integer ::= INTEGER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // input_newline ::= NEWLINE input_newline 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateEmptyBlock(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_newline",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // input_newline ::= NEWLINE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateEmptyBlock(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_newline",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // single_input ::= compound_stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("single_input",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // single_input ::= small_stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("single_input",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // input ::= single_input 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // input ::= single_input input_newline 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // input ::= single_input input 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.joinBloques(s,i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // input ::= single_input input_newline input 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.joinBloques(s,i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= input 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                System.out.println("EL PROGRAMA ESTA BIEN");
                                ParserStatus.parsingWasSuccessfull=true;
                                Bloque b = ParseResult.getAs(i);
                                Code code = ParserStatus.StackGenerador.peek().crearCodigo("Compilador","Compilador",b);
                                RESULT = code;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

