
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jul 12 22:40:05 UYT 2015
//----------------------------------------------------

package com.pyjava.parser;

import com.pyjava.core.exceptions.PyException;
import com.pyjava.core.runtime.*;
import java_cup.runtime.*;
import com.pyjava.parser.codegen.*;
import com.pyjava.core.*;
import java.util.Deque;
import java.util.LinkedList;
import java.util.Scanner;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jul 12 22:40:05 UYT 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\043\004\000\002\002\004\000\002\025" +
    "\003\000\002\025\004\000\002\027\003\000\002\027\004" +
    "\000\002\026\003\000\002\026\004\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\042\003\000\002\003\003\000\002\003\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\006\003\000\002\006\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\004\000\002\010\004\000\002\007\004\000\002\011" +
    "\004\000\002\011\005\000\002\012\003\000\002\012\004" +
    "\000\002\012\004\000\002\012\005\000\002\013\003\000" +
    "\002\013\004\000\002\014\004\000\002\014\005\000\002" +
    "\015\003\000\002\015\004\000\002\016\005\000\002\020" +
    "\005\000\002\021\003\000\002\021\005\000\002\022\003" +
    "\000\002\022\005\000\002\022\003\000\002\023\004\000" +
    "\002\023\005\000\002\024\006\000\002\024\004\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\032\004\000\002\032\004\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\040\003\000\002\040\004\000\002\041\003\000\002\041" +
    "\006\000\002\034\007\000\002\034\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\004\040\005\001\002\000\004\041\137\001" +
    "\002\000\034\045\014\047\032\050\010\051\024\052\022" +
    "\053\023\061\016\067\027\100\021\105\013\116\017\117" +
    "\015\120\026\001\002\000\004\002\007\001\002\000\004" +
    "\002\000\001\002\000\062\041\ufffd\054\ufffd\055\ufffd\060" +
    "\ufffd\066\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd" +
    "\074\ufffd\075\ufffd\076\ufffd\077\ufffd\101\ufffd\102\ufffd\103" +
    "\ufffd\104\ufffd\106\ufffd\107\ufffd\110\ufffd\111\ufffd\112\ufffd" +
    "\113\ufffd\001\002\000\062\041\uffd8\054\uffd8\055\uffd8\060" +
    "\uffd8\066\uffd8\067\uffd8\070\uffd8\071\uffd8\072\uffd8\073\uffd8" +
    "\074\uffd8\075\uffd8\076\uffd8\077\uffd8\101\uffd8\102\uffd8\103" +
    "\uffd8\104\uffd8\106\uffd8\107\uffd8\110\uffd8\111\uffd8\112\uffd8" +
    "\113\uffd8\001\002\000\062\041\uffef\054\uffef\055\uffef\060" +
    "\uffef\066\uffef\067\uffef\070\uffef\071\uffef\072\uffef\073\uffef" +
    "\074\uffef\075\uffef\076\uffef\077\uffef\101\uffef\102\uffef\103" +
    "\uffef\104\uffef\106\uffef\107\uffef\110\uffef\111\uffef\112\uffef" +
    "\113\uffef\001\002\000\034\045\014\047\032\050\010\051" +
    "\024\052\022\053\023\061\016\067\027\100\021\105\013" +
    "\116\017\117\015\120\026\001\002\000\064\041\ufff1\054" +
    "\ufff1\055\ufff1\060\ufff1\061\ufff1\066\ufff1\067\ufff1\070\ufff1" +
    "\071\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1\076\ufff1\077" +
    "\ufff1\101\ufff1\102\ufff1\103\ufff1\104\ufff1\106\ufff1\107\ufff1" +
    "\110\ufff1\111\ufff1\112\ufff1\113\ufff1\001\002\000\062\041" +
    "\ufff3\054\ufff3\055\ufff3\060\ufff3\066\ufff3\067\ufff3\070\ufff3" +
    "\071\ufff3\072\ufff3\073\ufff3\074\ufff3\075\ufff3\076\ufff3\077" +
    "\ufff3\101\ufff3\102\ufff3\103\ufff3\104\ufff3\106\ufff3\107\ufff3" +
    "\110\ufff3\111\ufff3\112\ufff3\113\ufff3\001\002\000\034\045" +
    "\014\047\032\050\010\051\024\052\022\053\023\061\016" +
    "\067\027\100\021\105\013\116\017\117\015\120\026\001" +
    "\002\000\062\041\ufff4\054\ufff4\055\ufff4\060\ufff4\066\ufff4" +
    "\067\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4\074\ufff4\075" +
    "\ufff4\076\ufff4\077\ufff4\101\ufff4\102\ufff4\103\ufff4\104\ufff4" +
    "\106\ufff4\107\ufff4\110\ufff4\111\ufff4\112\ufff4\113\ufff4\001" +
    "\002\000\062\041\uffd7\054\uffd7\055\uffd7\060\uffd7\066\uffd7" +
    "\067\uffd7\070\uffd7\071\uffd7\072\uffd7\073\uffd7\074\uffd7\075" +
    "\uffd7\076\uffd7\077\uffd7\101\uffd7\102\uffd7\103\uffd7\104\uffd7" +
    "\106\uffd7\107\uffd7\110\uffd7\111\uffd7\112\uffd7\113\uffd7\001" +
    "\002\000\034\045\014\047\032\050\010\051\024\052\022" +
    "\053\023\061\016\067\027\100\021\105\013\116\017\117" +
    "\015\120\026\001\002\000\062\041\ufff6\054\ufff6\055\ufff6" +
    "\060\ufff6\066\ufff6\067\ufff6\070\ufff6\071\ufff6\072\ufff6\073" +
    "\ufff6\074\ufff6\075\ufff6\076\ufff6\077\ufff6\101\ufff6\102\ufff6" +
    "\103\ufff6\104\ufff6\106\ufff6\107\ufff6\110\ufff6\111\ufff6\112" +
    "\ufff6\113\ufff6\001\002\000\062\041\ufff5\054\ufff5\055\ufff5" +
    "\060\ufff5\066\ufff5\067\ufff5\070\ufff5\071\ufff5\072\ufff5\073" +
    "\ufff5\074\ufff5\075\ufff5\076\ufff5\077\ufff5\101\ufff5\102\ufff5" +
    "\103\ufff5\104\ufff5\106\ufff5\107\ufff5\110\ufff5\111\ufff5\112" +
    "\ufff5\113\ufff5\001\002\000\062\041\ufffb\054\ufffb\055\ufffb" +
    "\060\ufffb\066\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb\073" +
    "\ufffb\074\ufffb\075\ufffb\076\ufffb\077\ufffb\101\ufffb\102\ufffb" +
    "\103\ufffb\104\ufffb\106\ufffb\107\ufffb\110\ufffb\111\ufffb\112" +
    "\ufffb\113\ufffb\001\002\000\056\041\uffbf\055\070\066\051" +
    "\067\067\070\063\071\065\072\060\073\056\074\047\075" +
    "\064\076\053\077\055\101\046\102\073\103\050\104\052" +
    "\106\062\107\071\110\066\111\054\112\057\113\072\001" +
    "\002\000\062\041\ufff2\054\ufff2\055\ufff2\060\ufff2\066\ufff2" +
    "\067\ufff2\070\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2\075" +
    "\ufff2\076\ufff2\077\ufff2\101\ufff2\102\ufff2\103\ufff2\104\ufff2" +
    "\106\ufff2\107\ufff2\110\ufff2\111\ufff2\112\ufff2\113\ufff2\001" +
    "\002\000\010\047\130\050\131\051\132\001\002\000\062" +
    "\041\ufff8\054\ufff8\055\ufff8\060\ufff8\066\ufff8\067\ufff8\070" +
    "\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075\ufff8\076\ufff8" +
    "\077\ufff8\101\ufff8\102\ufff8\103\ufff8\104\ufff8\106\ufff8\107" +
    "\ufff8\110\ufff8\111\ufff8\112\ufff8\113\ufff8\001\002\000\062" +
    "\041\ufff9\054\ufff9\055\ufff9\060\ufff9\066\ufff9\067\ufff9\070" +
    "\ufff9\071\ufff9\072\ufff9\073\ufff9\074\ufff9\075\ufff9\076\ufff9" +
    "\077\ufff9\101\ufff9\102\ufff9\103\ufff9\104\ufff9\106\ufff9\107" +
    "\ufff9\110\ufff9\111\ufff9\112\ufff9\113\ufff9\001\002\000\062" +
    "\041\uffff\054\uffff\055\uffff\060\uffff\066\uffff\067\uffff\070" +
    "\uffff\071\uffff\072\uffff\073\uffff\074\uffff\075\uffff\076\uffff" +
    "\077\uffff\101\uffff\102\uffff\103\uffff\104\uffff\106\uffff\107" +
    "\uffff\110\uffff\111\uffff\112\uffff\113\uffff\001\002\000\062" +
    "\041\ufff7\054\ufff7\055\ufff7\060\ufff7\066\ufff7\067\ufff7\070" +
    "\ufff7\071\ufff7\072\ufff7\073\ufff7\074\ufff7\075\ufff7\076\ufff7" +
    "\077\ufff7\101\ufff7\102\ufff7\103\ufff7\104\ufff7\106\ufff7\107" +
    "\ufff7\110\ufff7\111\ufff7\112\ufff7\113\ufff7\001\002\000\064" +
    "\041\ufff0\054\ufff0\055\ufff0\060\ufff0\061\036\066\ufff0\067" +
    "\ufff0\070\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0\075\ufff0" +
    "\076\ufff0\077\ufff0\101\ufff0\102\ufff0\103\ufff0\104\ufff0\106" +
    "\ufff0\107\ufff0\110\ufff0\111\ufff0\112\ufff0\113\ufff0\001\002" +
    "\000\062\041\uffa8\054\uffa8\055\uffa8\060\uffa8\066\uffa8\067" +
    "\uffa8\070\uffa8\071\uffa8\072\uffa8\073\uffa8\074\uffa8\075\uffa8" +
    "\076\uffa8\077\uffa8\101\uffa8\102\uffa8\103\uffa8\104\uffa8\106" +
    "\uffa8\107\uffa8\110\uffa8\111\uffa8\112\uffa8\113\uffa8\001\002" +
    "\000\036\045\042\047\032\050\010\051\024\052\022\053" +
    "\023\060\040\061\016\067\027\100\021\105\013\116\017" +
    "\117\015\120\026\001\002\000\006\054\125\060\uffb0\001" +
    "\002\000\062\041\uffab\054\uffab\055\uffab\060\uffab\066\uffab" +
    "\067\uffab\070\uffab\071\uffab\072\uffab\073\uffab\074\uffab\075" +
    "\uffab\076\uffab\077\uffab\101\uffab\102\uffab\103\uffab\104\uffab" +
    "\106\uffab\107\uffab\110\uffab\111\uffab\112\uffab\113\uffab\001" +
    "\002\000\004\060\uffac\001\002\000\064\046\123\054\ufff1" +
    "\055\ufff1\060\ufff1\061\ufff1\066\ufff1\067\ufff1\070\ufff1\071" +
    "\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1\076\ufff1\077\ufff1" +
    "\101\ufff1\102\ufff1\103\ufff1\104\ufff1\106\ufff1\107\ufff1\110" +
    "\ufff1\111\ufff1\112\ufff1\113\ufff1\001\002\000\060\054\061" +
    "\055\070\060\uffae\066\051\067\067\070\063\071\065\072" +
    "\060\073\056\074\047\075\064\076\053\077\055\101\046" +
    "\102\073\103\050\104\052\106\062\107\071\110\066\111" +
    "\054\112\057\113\072\001\002\000\004\060\045\001\002" +
    "\000\062\041\uffaa\054\uffaa\055\uffaa\060\uffaa\066\uffaa\067" +
    "\uffaa\070\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa\075\uffaa" +
    "\076\uffaa\077\uffaa\101\uffaa\102\uffaa\103\uffaa\104\uffaa\106" +
    "\uffaa\107\uffaa\110\uffaa\111\uffaa\112\uffaa\113\uffaa\001\002" +
    "\000\034\045\014\047\032\050\010\051\024\052\022\053" +
    "\023\061\016\067\027\100\021\105\013\116\017\117\015" +
    "\120\026\001\002\000\034\045\014\047\032\050\010\051" +
    "\024\052\022\053\023\061\016\067\027\100\021\105\013" +
    "\116\017\117\015\120\026\001\002\000\034\045\014\047" +
    "\032\050\010\051\024\052\022\053\023\061\016\067\027" +
    "\100\021\105\013\116\017\117\015\120\026\001\002\000" +
    "\034\045\014\047\032\050\010\051\024\052\022\053\023" +
    "\061\016\067\027\100\021\105\013\116\017\117\015\120" +
    "\026\001\002\000\034\045\014\047\032\050\010\051\024" +
    "\052\022\053\023\061\016\067\027\100\021\105\013\116" +
    "\017\117\015\120\026\001\002\000\034\045\014\047\032" +
    "\050\010\051\024\052\022\053\023\061\016\067\027\100" +
    "\021\105\013\116\017\117\015\120\026\001\002\000\034" +
    "\045\014\047\032\050\010\051\024\052\022\053\023\061" +
    "\016\067\027\100\021\105\013\116\017\117\015\120\026" +
    "\001\002\000\034\045\014\047\032\050\010\051\024\052" +
    "\022\053\023\061\016\067\027\100\021\105\013\116\017" +
    "\117\015\120\026\001\002\000\034\045\014\047\032\050" +
    "\010\051\024\052\022\053\023\061\016\067\027\100\021" +
    "\105\013\116\017\117\015\120\026\001\002\000\034\045" +
    "\014\047\032\050\010\051\024\052\022\053\023\061\016" +
    "\067\027\100\021\105\013\116\017\117\015\120\026\001" +
    "\002\000\034\045\014\047\032\050\010\051\024\052\022" +
    "\053\023\061\016\067\027\100\021\105\013\116\017\117" +
    "\015\120\026\001\002\000\034\045\042\047\032\050\010" +
    "\051\024\052\022\053\023\061\016\067\027\100\021\105" +
    "\013\116\017\117\015\120\026\001\002\000\034\045\014" +
    "\047\032\050\010\051\024\052\022\053\023\061\016\067" +
    "\027\100\021\105\013\116\017\117\015\120\026\001\002" +
    "\000\034\045\014\047\032\050\010\051\024\052\022\053" +
    "\023\061\016\067\027\100\021\105\013\116\017\117\015" +
    "\120\026\001\002\000\034\045\014\047\032\050\010\051" +
    "\024\052\022\053\023\061\016\067\027\100\021\105\013" +
    "\116\017\117\015\120\026\001\002\000\034\045\014\047" +
    "\032\050\010\051\024\052\022\053\023\061\016\067\027" +
    "\100\021\105\013\116\017\117\015\120\026\001\002\000" +
    "\034\045\014\047\032\050\010\051\024\052\022\053\023" +
    "\061\016\067\027\100\021\105\013\116\017\117\015\120" +
    "\026\001\002\000\034\045\014\047\032\050\010\051\024" +
    "\052\022\053\023\061\016\067\027\100\021\105\013\116" +
    "\017\117\015\120\026\001\002\000\004\045\077\001\002" +
    "\000\034\045\014\047\032\050\010\051\024\052\022\053" +
    "\023\061\016\067\027\100\021\105\013\116\017\117\015" +
    "\120\026\001\002\000\034\045\014\047\032\050\010\051" +
    "\024\052\022\053\023\061\016\067\027\100\021\105\013" +
    "\116\017\117\015\120\026\001\002\000\034\045\014\047" +
    "\032\050\010\051\024\052\022\053\023\061\016\067\027" +
    "\100\021\105\013\116\017\117\015\120\026\001\002\000" +
    "\062\041\uffc9\054\uffc9\055\070\060\uffc9\066\051\067\067" +
    "\070\063\071\065\072\060\073\056\074\047\075\uffc9\076" +
    "\uffc9\077\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\106\uffc9" +
    "\107\uffc9\110\uffc9\111\uffc9\112\uffc9\113\uffc9\001\002\000" +
    "\062\041\uffd0\054\uffd0\055\070\060\uffd0\066\051\067\067" +
    "\070\063\071\065\072\060\073\056\074\047\075\064\076" +
    "\053\077\055\101\046\102\073\103\uffd0\104\uffd0\106\uffd0" +
    "\107\uffd0\110\uffd0\111\uffd0\112\uffd0\113\uffd0\001\002\000" +
    "\062\041\uffcf\054\uffcf\055\070\060\uffcf\066\051\067\067" +
    "\070\063\071\065\072\060\073\056\074\047\075\064\076" +
    "\053\077\055\101\046\102\073\103\uffcf\104\uffcf\106\uffcf" +
    "\107\uffcf\110\uffcf\111\uffcf\112\uffcf\113\uffcf\001\002\000" +
    "\004\061\036\001\002\000\062\041\uffa9\054\uffa9\055\uffa9" +
    "\060\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9\073" +
    "\uffa9\074\uffa9\075\uffa9\076\uffa9\077\uffa9\101\uffa9\102\uffa9" +
    "\103\uffa9\104\uffa9\106\uffa9\107\uffa9\110\uffa9\111\uffa9\112" +
    "\uffa9\113\uffa9\001\002\000\062\041\uffc7\054\uffc7\055\070" +
    "\060\uffc7\066\uffc7\067\uffc7\070\063\071\065\072\060\073" +
    "\056\074\047\075\uffc7\076\uffc7\077\uffc7\101\uffc7\102\uffc7" +
    "\103\uffc7\104\uffc7\106\uffc7\107\uffc7\110\uffc7\111\uffc7\112" +
    "\uffc7\113\uffc7\001\002\000\062\041\uffd3\054\uffd3\055\070" +
    "\060\uffd3\066\051\067\067\070\063\071\065\072\060\073" +
    "\056\074\047\075\064\076\053\077\055\101\046\102\073" +
    "\103\uffd3\104\uffd3\106\uffd3\107\uffd3\110\uffd3\111\uffd3\112" +
    "\uffd3\113\uffd3\001\002\000\062\041\uffc5\054\uffc5\055\070" +
    "\060\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5\072\060\073" +
    "\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5\101\uffc5\102\uffc5" +
    "\103\uffc5\104\uffc5\106\uffc5\107\uffc5\110\uffc5\111\uffc5\112" +
    "\uffc5\113\uffc5\001\002\000\062\041\uffcb\054\uffcb\055\070" +
    "\060\uffcb\066\051\067\067\070\063\071\065\072\060\073" +
    "\056\074\047\075\uffcb\076\uffcb\077\uffcb\101\046\102\073" +
    "\103\uffcb\104\uffcb\106\uffcb\107\uffcb\110\uffcb\111\uffcb\112" +
    "\uffcb\113\uffcb\001\002\000\062\041\uffc6\054\uffc6\055\070" +
    "\060\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6\072\060\073" +
    "\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6\101\uffc6\102\uffc6" +
    "\103\uffc6\104\uffc6\106\uffc6\107\uffc6\110\uffc6\111\uffc6\112" +
    "\uffc6\113\uffc6\001\002\000\062\041\uffce\054\uffce\055\070" +
    "\060\uffce\066\051\067\067\070\063\071\065\072\060\073" +
    "\056\074\047\075\064\076\053\077\055\101\046\102\073" +
    "\103\uffce\104\uffce\106\uffce\107\uffce\110\uffce\111\uffce\112" +
    "\uffce\113\uffce\001\002\000\004\060\uffad\001\002\000\062" +
    "\041\uffc2\054\uffc2\055\070\060\uffc2\066\uffc2\067\uffc2\070" +
    "\uffc2\071\uffc2\072\060\073\uffc2\074\uffc2\075\uffc2\076\uffc2" +
    "\077\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\106\uffc2\107" +
    "\uffc2\110\uffc2\111\uffc2\112\uffc2\113\uffc2\001\002\000\062" +
    "\041\uffd1\054\uffd1\055\070\060\uffd1\066\051\067\067\070" +
    "\063\071\065\072\060\073\056\074\047\075\064\076\053" +
    "\077\055\101\046\102\073\103\uffd1\104\uffd1\106\uffd1\107" +
    "\uffd1\110\uffd1\111\uffd1\112\uffd1\113\uffd1\001\002\000\062" +
    "\041\uffc3\054\uffc3\055\070\060\uffc3\066\uffc3\067\uffc3\070" +
    "\uffc3\071\uffc3\072\060\073\uffc3\074\uffc3\075\uffc3\076\uffc3" +
    "\077\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3\106\uffc3\107" +
    "\uffc3\110\uffc3\111\uffc3\112\uffc3\113\uffc3\001\002\000\062" +
    "\041\uffcc\054\uffcc\055\070\060\uffcc\066\051\067\067\070" +
    "\063\071\065\072\060\073\056\074\047\075\064\076\uffcc" +
    "\077\uffcc\101\046\102\073\103\uffcc\104\uffcc\106\uffcc\107" +
    "\uffcc\110\uffcc\111\uffcc\112\uffcc\113\uffcc\001\002\000\062" +
    "\041\uffd2\054\uffd2\055\070\060\uffd2\066\051\067\067\070" +
    "\063\071\065\072\060\073\056\074\047\075\064\076\053" +
    "\077\055\101\046\102\073\103\uffd2\104\uffd2\106\uffd2\107" +
    "\uffd2\110\uffd2\111\uffd2\112\uffd2\113\uffd2\001\002\000\062" +
    "\041\uffcd\054\uffcd\055\070\060\uffcd\066\051\067\067\070" +
    "\063\071\065\072\060\073\056\074\047\075\064\076\uffcd" +
    "\077\055\101\046\102\073\103\uffcd\104\uffcd\106\uffcd\107" +
    "\uffcd\110\uffcd\111\uffcd\112\uffcd\113\uffcd\001\002\000\062" +
    "\041\uffd5\054\uffd5\055\070\060\uffd5\066\051\067\067\070" +
    "\063\071\065\072\060\073\056\074\047\075\064\076\053" +
    "\077\055\101\046\102\073\103\050\104\uffd5\106\062\107" +
    "\071\110\066\111\054\112\057\113\072\001\002\000\062" +
    "\041\uffc8\054\uffc8\055\070\060\uffc8\066\uffc8\067\uffc8\070" +
    "\063\071\065\072\060\073\056\074\047\075\uffc8\076\uffc8" +
    "\077\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8\106\uffc8\107" +
    "\uffc8\110\uffc8\111\uffc8\112\uffc8\113\uffc8\001\002\000\062" +
    "\041\uffd4\054\uffd4\055\070\060\uffd4\066\051\067\067\070" +
    "\063\071\065\072\060\073\056\074\047\075\064\076\053" +
    "\077\055\101\046\102\073\103\uffd4\104\uffd4\106\062\107" +
    "\071\110\066\111\054\112\057\113\072\001\002\000\062" +
    "\041\uffc4\054\uffc4\055\070\060\uffc4\066\uffc4\067\uffc4\070" +
    "\uffc4\071\uffc4\072\060\073\uffc4\074\uffc4\075\uffc4\076\uffc4" +
    "\077\uffc4\101\uffc4\102\uffc4\103\uffc4\104\uffc4\106\uffc4\107" +
    "\uffc4\110\uffc4\111\uffc4\112\uffc4\113\uffc4\001\002\000\062" +
    "\041\uffca\054\uffca\055\070\060\uffca\066\051\067\067\070" +
    "\063\071\065\072\060\073\056\074\047\075\uffca\076\uffca" +
    "\077\uffca\101\uffca\102\uffca\103\uffca\104\uffca\106\uffca\107" +
    "\uffca\110\uffca\111\uffca\112\uffca\113\uffca\001\002\000\034" +
    "\045\014\047\032\050\010\051\024\052\022\053\023\061" +
    "\016\067\027\100\021\105\013\116\017\117\015\120\026" +
    "\001\002\000\060\054\uffb1\055\070\060\uffb1\066\051\067" +
    "\067\070\063\071\065\072\060\073\056\074\047\075\064" +
    "\076\053\077\055\101\046\102\073\103\050\104\052\106" +
    "\062\107\071\110\066\111\054\112\057\113\072\001\002" +
    "\000\004\045\127\001\002\000\004\060\uffaf\001\002\000" +
    "\004\046\123\001\002\000\062\041\ufffe\054\ufffe\055\ufffe" +
    "\060\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\072\ufffe\073" +
    "\ufffe\074\ufffe\075\ufffe\076\ufffe\077\ufffe\101\ufffe\102\ufffe" +
    "\103\ufffe\104\ufffe\106\ufffe\107\ufffe\110\ufffe\111\ufffe\112" +
    "\ufffe\113\ufffe\001\002\000\062\041\ufffc\054\ufffc\055\ufffc" +
    "\060\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc\073" +
    "\ufffc\074\ufffc\075\ufffc\076\ufffc\077\ufffc\101\ufffc\102\ufffc" +
    "\103\ufffc\104\ufffc\106\ufffc\107\ufffc\110\ufffc\111\ufffc\112" +
    "\ufffc\113\ufffc\001\002\000\062\041\ufffa\054\ufffa\055\ufffa" +
    "\060\ufffa\066\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa\073" +
    "\ufffa\074\ufffa\075\ufffa\076\ufffa\077\ufffa\101\ufffa\102\ufffa" +
    "\103\ufffa\104\ufffa\106\ufffa\107\ufffa\110\ufffa\111\ufffa\112" +
    "\ufffa\113\ufffa\001\002\000\062\041\uffc0\054\uffc0\055\070" +
    "\060\uffc0\066\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0\073" +
    "\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0\101\uffc0\102\uffc0" +
    "\103\uffc0\104\uffc0\106\uffc0\107\uffc0\110\uffc0\111\uffc0\112" +
    "\uffc0\113\uffc0\001\002\000\056\055\070\060\135\066\051" +
    "\067\067\070\063\071\065\072\060\073\056\074\047\075" +
    "\064\076\053\077\055\101\046\102\073\103\050\104\052" +
    "\106\062\107\071\110\066\111\054\112\057\113\072\001" +
    "\002\000\062\041\uffd6\054\uffd6\055\uffd6\060\uffd6\066\uffd6" +
    "\067\uffd6\070\uffd6\071\uffd6\072\uffd6\073\uffd6\074\uffd6\075" +
    "\uffd6\076\uffd6\077\uffd6\101\uffd6\102\uffd6\103\uffd6\104\uffd6" +
    "\106\uffd6\107\uffd6\110\uffd6\111\uffd6\112\uffd6\113\uffd6\001" +
    "\002\000\062\041\uffc1\054\uffc1\055\070\060\uffc1\066\051" +
    "\067\067\070\063\071\065\072\060\073\056\074\047\075" +
    "\064\076\053\077\055\101\046\102\073\103\uffc1\104\uffc1" +
    "\106\062\107\071\110\066\111\054\112\057\113\072\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\006\007\003\043\005\001\001\000\002\001" +
    "\001\000\022\002\011\003\010\010\024\024\017\025\030" +
    "\026\032\027\027\042\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\002\011\003\010\010\135\024\017\025" +
    "\030\026\032\027\027\042\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\002\011\003\010\010\133\024" +
    "\017\025\030\026\032\027\027\042\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\002\011\003\010\010" +
    "\132\024\017\025\030\026\032\027\027\042\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\034\001\001\000\002\001\001\000\030" +
    "\002\011\003\010\010\042\020\036\021\040\022\043\024" +
    "\017\025\030\026\032\027\027\042\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\002\011\003\010\010\121\024\017\025\030\026" +
    "\032\027\027\042\033\001\001\000\022\002\011\003\010" +
    "\010\120\024\017\025\030\026\032\027\027\042\033\001" +
    "\001\000\022\002\011\003\010\010\117\024\017\025\030" +
    "\026\032\027\027\042\033\001\001\000\022\002\011\003" +
    "\010\010\116\024\017\025\030\026\032\027\027\042\033" +
    "\001\001\000\022\002\011\003\010\010\115\024\017\025" +
    "\030\026\032\027\027\042\033\001\001\000\022\002\011" +
    "\003\010\010\114\024\017\025\030\026\032\027\027\042" +
    "\033\001\001\000\022\002\011\003\010\010\113\024\017" +
    "\025\030\026\032\027\027\042\033\001\001\000\022\002" +
    "\011\003\010\010\112\024\017\025\030\026\032\027\027" +
    "\042\033\001\001\000\022\002\011\003\010\010\111\024" +
    "\017\025\030\026\032\027\027\042\033\001\001\000\022" +
    "\002\011\003\010\010\110\024\017\025\030\026\032\027" +
    "\027\042\033\001\001\000\022\002\011\003\010\010\107" +
    "\024\017\025\030\026\032\027\027\042\033\001\001\000" +
    "\030\002\011\003\010\010\042\020\036\021\040\022\106" +
    "\024\017\025\030\026\032\027\027\042\033\001\001\000" +
    "\022\002\011\003\010\010\105\024\017\025\030\026\032" +
    "\027\027\042\033\001\001\000\022\002\011\003\010\010" +
    "\104\024\017\025\030\026\032\027\027\042\033\001\001" +
    "\000\022\002\011\003\010\010\103\024\017\025\030\026" +
    "\032\027\027\042\033\001\001\000\022\002\011\003\010" +
    "\010\102\024\017\025\030\026\032\027\027\042\033\001" +
    "\001\000\022\002\011\003\010\010\101\024\017\025\030" +
    "\026\032\027\027\042\033\001\001\000\022\002\011\003" +
    "\010\010\100\024\017\025\030\026\032\027\027\042\033" +
    "\001\001\000\002\001\001\000\022\002\011\003\010\010" +
    "\075\024\017\025\030\026\032\027\027\042\033\001\001" +
    "\000\022\002\011\003\010\010\074\024\017\025\030\026" +
    "\032\027\027\042\033\001\001\000\022\002\011\003\010" +
    "\010\073\024\017\025\030\026\032\027\027\042\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\002\011\003\010\010\123\024" +
    "\017\025\030\026\032\027\027\042\033\001\001\000\002" +
    "\001\001\000\006\020\036\021\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    //MANTENGO UN STACK DE GENERADORES Y PUSHEO EL PRIMERO
    ParserStatus.StackGenerador.push(new Generador());

    }





    public void syntax_error(Symbol s){
        System.out.println("Error de sintaxis "+s.sym+" en la linea "+(s.left+1)+" y la columna "+s.right);
        System.out.println(s.value);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error de sintaxis "+s.sym);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {




  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // if_stmt ::= IF expression COLON suite NEWLINE ELSE COLON suite NEWLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // if_stmt ::= IF expression COLON suite NEWLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // suite ::= NEWLINE INDENT stmt_list DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("suite",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // suite ::= stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("suite",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // stmt_list ::= stmt stmt_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // stmt_list ::= stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // compound_stmt ::= func_def 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // compound_stmt ::= for_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // compound_stmt ::= while_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // compound_stmt ::= if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // stmt ::= compound_stmt NEWLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // stmt ::= small_stmt NEWLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // small_stmt ::= flow_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // small_stmt ::= print_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // small_stmt ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // small_stmt ::= expr_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // flow_stmt ::= return_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // flow_stmt ::= CONTINUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // flow_stmt ::= BREAK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // func_call ::= name trailer 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateFunctionCall(n,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // func_call ::= expression DOT NAME trailer 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // trailer ::= LPAREN argument_list RPAREN 
            {
              Object RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = al; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trailer",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // trailer ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trailer",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // argument_list ::= named_argument_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // argument_list ::= expression COMA argument_list 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateArguments(c,e,al); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // argument_list ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateArguments(null,e,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // named_argument_list ::= named_argument COMA named_argument_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("named_argument_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // named_argument_list ::= named_argument 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("named_argument_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // named_argument ::= NAME ASSIGN expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("named_argument",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr_stmt ::= namelist ASSIGN testlist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // namelist ::= NAME namecoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("namelist",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // namelist ::= NAME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("namelist",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // namecoma ::= COMA NAME namecoma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("namecoma",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // namecoma ::= COMA NAME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("namecoma",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // return_stmt ::= RETURN testlist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // return_stmt ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // testlist ::= expression testcoma COMA 
            {
              Object RESULT =null;
		 System.out.println("TESTLIST 4"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("testlist",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // testlist ::= expression testcoma 
            {
              Object RESULT =null;
		 System.out.println("TESTLIST 3"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("testlist",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // testlist ::= expression COMA 
            {
              Object RESULT =null;
		 System.out.println("TESTLIST 2"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("testlist",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // testlist ::= expression 
            {
              Object RESULT =null;
		 System.out.println("TESTLIST 1"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("testlist",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // testcoma ::= COMA expression testcoma 
            {
              Object RESULT =null;
		 System.out.println("TESTCOMA 2"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("testcoma",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // testcoma ::= COMA expression 
            {
              Object RESULT =null;
		 System.out.println("TESTCOMA 1"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("testcoma",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // print_stmt ::= PRINT expression 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generatePrint(p,n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= NOTB expression 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateUnaryOperation(op,a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= NOT expression 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateUnaryOperation(op,a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= expression EXP expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= expression DIVE expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= expression MOD expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= expression DIV expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= expression MULT expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= expression MINUS expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= expression PLUS expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= expression SHIFTR expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= expression SHIFTL expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= expression ANDB expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= expression XORB expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= expression ORB expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= expression EQUALS expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= expression DIFF expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= expression MAJOREQ expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= expression MINOREQ expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= expression MAJOR expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= expression MINOR expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= expression AND expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= expression OR expression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateBinaryOperation(op,a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= func_call 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= atom 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.loadNameOrConst(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // unary_operator ::= NOTB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // unary_operator ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operator",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // binary_operator ::= EXP 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // binary_operator ::= DIVE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // binary_operator ::= MOD 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // binary_operator ::= DIV 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // binary_operator ::= MULT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // binary_operator ::= MINUS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // binary_operator ::= PLUS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // binary_operator ::= SHIFTR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // binary_operator ::= SHIFTL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // binary_operator ::= ANDB 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // binary_operator ::= XORB 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // binary_operator ::= ORB 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // binary_operator ::= EQUALS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // binary_operator ::= DIFF 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // binary_operator ::= MAJOREQ 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // binary_operator ::= MINOREQ 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // binary_operator ::= MAJOR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // binary_operator ::= MINOR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // binary_operator ::= AND 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // binary_operator ::= OR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // atom ::= constant 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // atom ::= name 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // name ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = RuleGenerator.generateName((LexerToken)n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constant ::= FALSE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constant ::= TRUE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constant ::= NONE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constant ::= STRING3 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constant ::= STRING 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constant ::= float 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constant ::= long 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constant ::= integer 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // float ::= MINUS FLOAT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateMinusConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("float",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // float ::= FLOAT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("float",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // long ::= MINUS LONG 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateMinusConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("long",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // long ::= LONG 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("long",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // integer ::= MINUS INTEGER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateMinusConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // integer ::= INTEGER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = RuleGenerator.generateConstant(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= print_stmt NEWLINE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    System.out.println("EL PROGRAMA ESTA BIEN");
    Bloque bloq = ParseResult.getAs(b);
    Code code = ParserStatus.StackGenerador.peek().crearCodigo("lala","lala",bloq);
    RESULT = code;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

