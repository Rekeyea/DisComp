
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jul 08 22:01:28 UYT 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Scanner;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jul 08 22:01:28 UYT 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\004\005\000\002\006\003\000" +
    "\002\006\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\007\004\000\002\007\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\013\003" +
    "\000\002\013\005\000\002\014\003\000\002\014\003\000" +
    "\002\015\003\000\002\015\005\000\002\016\003\000\002" +
    "\016\003\000\002\017\003\000\002\017\005\000\002\020" +
    "\003\000\002\020\005\000\002\021\003\000\002\021\005" +
    "\000\002\022\003\000\002\022\005\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\024\003\000\002\024" +
    "\005\000\002\025\004\000\002\025\003\000\002\026\003" +
    "\000\002\026\005\000\002\027\003\000\002\027\005\000" +
    "\002\030\003\000\002\031\003\000\002\031\005\000\002" +
    "\033\004\000\002\033\005\000\002\033\005\000\002\034" +
    "\003\000\002\034\004\000\002\032\003\000\002\032\005" +
    "\000\002\035\003\000\002\036\003\000\002\037\003\000" +
    "\002\037\004\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\041\004\000\002\041\005\000\002\041" +
    "\005\000\002\042\003\000\002\042\004\000\002\042\005" +
    "\000\002\042\005\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\045\004\000\002\045\005\000\002" +
    "\045\005\000\002\046\004\000\002\046\005\000\002\047" +
    "\007\000\002\052\003\000\002\052\005\000\002\051\003" +
    "\000\002\051\004\000\002\051\005\000\002\050\004\000" +
    "\002\050\005\000\002\053\003\000\002\053\003\000\002" +
    "\054\003\000\002\054\004\000\002\055\003\000\002\055" +
    "\006\000\002\056\006\000\002\056\011\000\002\057\006" +
    "\000\002\060\010\000\002\061\003\000\002\061\003\000" +
    "\002\061\003\000\002\061\003\000\002\062\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\012\006\004\015\012\033\014\034\007\001" +
    "\002\000\024\045\037\047\053\050\027\051\045\052\043" +
    "\066\033\067\050\100\042\105\034\001\002\000\004\002" +
    "\uff9b\001\002\000\050\002\uff9f\006\uff9f\015\uff9f\020\uff9f" +
    "\027\uff9f\032\uff9f\033\uff9f\034\uff9f\040\uff9f\045\uff9f\047" +
    "\uff9f\050\uff9f\051\uff9f\052\uff9f\066\uff9f\067\uff9f\100\uff9f" +
    "\105\uff9f\115\uff9f\001\002\000\022\045\037\047\053\050" +
    "\027\051\045\052\043\066\033\067\050\100\042\001\002" +
    "\000\004\002\206\001\002\000\050\002\uff9e\006\uff9e\015" +
    "\uff9e\020\uff9e\027\uff9e\032\uff9e\033\uff9e\034\uff9e\040\uff9e" +
    "\045\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\066\uff9e\067" +
    "\uff9e\100\uff9e\105\uff9e\115\uff9e\001\002\000\024\045\037" +
    "\047\053\050\027\051\045\052\043\066\033\067\050\100" +
    "\042\105\034\001\002\000\050\002\uff9c\006\uff9c\015\uff9c" +
    "\020\uff9c\027\uff9c\032\uff9c\033\uff9c\034\uff9c\040\uff9c\045" +
    "\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\066\uff9c\067\uff9c" +
    "\100\uff9c\105\uff9c\115\uff9c\001\002\000\004\045\016\001" +
    "\002\000\050\002\uff9d\006\uff9d\015\uff9d\020\uff9d\027\uff9d" +
    "\032\uff9d\033\uff9d\034\uff9d\040\uff9d\045\uff9d\047\uff9d\050" +
    "\uff9d\051\uff9d\052\uff9d\066\uff9d\067\uff9d\100\uff9d\105\uff9d" +
    "\115\uff9d\001\002\000\004\061\020\001\002\000\004\056" +
    "\126\001\002\000\006\045\024\060\022\001\002\000\006" +
    "\054\124\060\uffae\001\002\000\004\056\uffab\001\002\000" +
    "\004\060\123\001\002\000\010\046\025\054\uffb0\060\uffb0" +
    "\001\002\000\024\045\037\047\053\050\027\051\045\052" +
    "\043\066\033\067\050\100\042\105\034\001\002\000\042" +
    "\025\uffe1\041\uffe1\046\uffe1\054\uffe1\056\uffe1\057\uffe1\060" +
    "\uffe1\076\121\103\uffe1\104\uffe1\106\uffe1\107\uffe1\110\uffe1" +
    "\111\uffe1\112\uffe1\113\uffe1\001\002\000\066\025\uffff\041" +
    "\uffff\046\uffff\054\uffff\056\uffff\057\uffff\060\uffff\066\uffff" +
    "\067\uffff\070\uffff\071\uffff\072\uffff\074\uffff\075\uffff\076" +
    "\uffff\077\uffff\101\uffff\102\uffff\103\uffff\104\uffff\106\uffff" +
    "\107\uffff\110\uffff\111\uffff\112\uffff\113\uffff\001\002\000" +
    "\066\025\ufff9\041\ufff9\046\ufff9\054\ufff9\056\ufff9\057\ufff9" +
    "\060\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9\072\117\074" +
    "\ufff9\075\ufff9\076\ufff9\077\ufff9\101\ufff9\102\ufff9\103\ufff9" +
    "\104\ufff9\106\ufff9\107\ufff9\110\ufff9\111\ufff9\112\ufff9\113" +
    "\ufff9\001\002\000\066\025\ufffc\041\ufffc\046\ufffc\054\ufffc" +
    "\056\ufffc\057\ufffc\060\ufffc\066\ufffc\067\ufffc\070\ufffc\071" +
    "\ufffc\072\ufffc\074\ufffc\075\ufffc\076\ufffc\077\ufffc\101\ufffc" +
    "\102\ufffc\103\ufffc\104\ufffc\106\ufffc\107\ufffc\110\ufffc\111" +
    "\ufffc\112\ufffc\113\ufffc\001\002\000\036\041\uffd9\046\uffd9" +
    "\054\uffd9\056\uffd9\057\uffd9\060\uffd9\103\uffd9\104\uffd9\106" +
    "\112\107\111\110\114\111\110\112\113\113\107\001\002" +
    "\000\022\045\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\066" +
    "\ufff7\067\ufff7\100\ufff7\001\002\000\024\045\037\047\053" +
    "\050\027\051\045\052\043\066\033\067\050\100\042\105" +
    "\034\001\002\000\022\045\037\047\053\050\027\051\045" +
    "\052\043\066\033\067\050\100\042\001\002\000\016\041" +
    "\uffd1\046\uffd1\054\uffd1\056\uffd1\057\uffd1\060\uffd1\001\002" +
    "\000\066\025\ufffd\041\ufffd\046\ufffd\054\ufffd\056\ufffd\057" +
    "\ufffd\060\ufffd\066\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd" +
    "\074\ufffd\075\ufffd\076\ufffd\077\ufffd\101\ufffd\102\ufffd\103" +
    "\ufffd\104\ufffd\106\ufffd\107\ufffd\110\ufffd\111\ufffd\112\ufffd" +
    "\113\ufffd\001\002\000\064\025\ufff8\041\ufff8\046\ufff8\054" +
    "\ufff8\056\ufff8\057\ufff8\060\ufff8\066\ufff8\067\ufff8\070\ufff8" +
    "\071\ufff8\074\ufff8\075\ufff8\076\ufff8\077\ufff8\101\ufff8\102" +
    "\ufff8\103\ufff8\104\ufff8\106\ufff8\107\ufff8\110\ufff8\111\ufff8" +
    "\112\ufff8\113\ufff8\001\002\000\052\025\uffe7\041\uffe7\046" +
    "\uffe7\054\uffe7\056\uffe7\057\uffe7\060\uffe7\075\uffe7\076\uffe7" +
    "\077\uffe7\101\103\102\101\103\uffe7\104\uffe7\106\uffe7\107" +
    "\uffe7\110\uffe7\111\uffe7\112\uffe7\113\uffe7\001\002\000\022" +
    "\045\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\066\ufff5\067" +
    "\ufff5\100\ufff5\001\002\000\066\025\ufffb\041\ufffb\046\ufffb" +
    "\054\ufffb\056\ufffb\057\ufffb\060\ufffb\066\ufffb\067\ufffb\070" +
    "\ufffb\071\ufffb\072\ufffb\074\ufffb\075\ufffb\076\ufffb\077\ufffb" +
    "\101\ufffb\102\ufffb\103\ufffb\104\ufffb\106\ufffb\107\ufffb\110" +
    "\ufffb\111\ufffb\112\ufffb\113\ufffb\001\002\000\020\041\uffd3" +
    "\046\uffd3\054\uffd3\056\uffd3\057\uffd3\060\uffd3\104\077\001" +
    "\002\000\066\025\ufffe\041\ufffe\046\ufffe\054\ufffe\056\ufffe" +
    "\057\ufffe\060\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\072" +
    "\ufffe\074\ufffe\075\ufffe\076\ufffe\077\ufffe\101\ufffe\102\ufffe" +
    "\103\ufffe\104\ufffe\106\ufffe\107\ufffe\110\ufffe\111\ufffe\112" +
    "\ufffe\113\ufffe\001\002\000\064\025\uffef\041\uffef\046\uffef" +
    "\054\uffef\056\uffef\057\uffef\060\uffef\066\uffef\067\uffef\070" +
    "\073\071\075\074\072\075\uffef\076\uffef\077\uffef\101\uffef" +
    "\102\uffef\103\uffef\104\uffef\106\uffef\107\uffef\110\uffef\111" +
    "\uffef\112\uffef\113\uffef\001\002\000\056\025\uffeb\041\uffeb" +
    "\046\uffeb\054\uffeb\056\uffeb\057\uffeb\060\uffeb\066\066\067" +
    "\067\075\uffeb\076\uffeb\077\uffeb\101\uffeb\102\uffeb\103\uffeb" +
    "\104\uffeb\106\uffeb\107\uffeb\110\uffeb\111\uffeb\112\uffeb\113" +
    "\uffeb\001\002\000\022\045\ufff6\047\ufff6\050\ufff6\051\ufff6" +
    "\052\ufff6\066\ufff6\067\ufff6\100\ufff6\001\002\000\044\025" +
    "\uffe3\041\uffe3\046\uffe3\054\uffe3\056\uffe3\057\uffe3\060\uffe3" +
    "\076\uffe3\077\064\103\uffe3\104\uffe3\106\uffe3\107\uffe3\110" +
    "\uffe3\111\uffe3\112\uffe3\113\uffe3\001\002\000\006\054\uffaf" +
    "\060\uffaf\001\002\000\066\025\000\041\000\046\000\054" +
    "\000\056\000\057\000\060\000\066\000\067\000\070\000" +
    "\071\000\072\000\074\000\075\000\076\000\077\000\101" +
    "\000\102\000\103\000\104\000\106\000\107\000\110\000" +
    "\111\000\112\000\113\000\001\002\000\064\025\ufff3\041" +
    "\ufff3\046\ufff3\054\ufff3\056\ufff3\057\ufff3\060\ufff3\066\ufff3" +
    "\067\ufff3\070\ufff3\071\ufff3\074\ufff3\075\ufff3\076\ufff3\077" +
    "\ufff3\101\ufff3\102\ufff3\103\ufff3\104\ufff3\106\ufff3\107\ufff3" +
    "\110\ufff3\111\ufff3\112\ufff3\113\ufff3\001\002\000\046\025" +
    "\uffe5\041\uffe5\046\uffe5\054\uffe5\056\uffe5\057\uffe5\060\uffe5" +
    "\075\062\076\uffe5\077\uffe5\103\uffe5\104\uffe5\106\uffe5\107" +
    "\uffe5\110\uffe5\111\uffe5\112\uffe5\113\uffe5\001\002\000\022" +
    "\041\uffd5\046\uffd5\054\uffd5\056\uffd5\057\uffd5\060\uffd5\103" +
    "\060\104\uffd5\001\002\000\022\041\uffd6\046\uffd6\054\uffd6" +
    "\056\uffd6\057\uffd6\060\uffd6\103\uffd6\104\uffd6\001\002\000" +
    "\024\045\037\047\053\050\027\051\045\052\043\066\033" +
    "\067\050\100\042\105\034\001\002\000\020\041\uffd4\046" +
    "\uffd4\054\uffd4\056\uffd4\057\uffd4\060\uffd4\104\uffd4\001\002" +
    "\000\022\045\037\047\053\050\027\051\045\052\043\066" +
    "\033\067\050\100\042\001\002\000\044\025\uffe4\041\uffe4" +
    "\046\uffe4\054\uffe4\056\uffe4\057\uffe4\060\uffe4\076\uffe4\077" +
    "\uffe4\103\uffe4\104\uffe4\106\uffe4\107\uffe4\110\uffe4\111\uffe4" +
    "\112\uffe4\113\uffe4\001\002\000\022\045\037\047\053\050" +
    "\027\051\045\052\043\066\033\067\050\100\042\001\002" +
    "\000\042\025\uffe2\041\uffe2\046\uffe2\054\uffe2\056\uffe2\057" +
    "\uffe2\060\uffe2\076\uffe2\103\uffe2\104\uffe2\106\uffe2\107\uffe2" +
    "\110\uffe2\111\uffe2\112\uffe2\113\uffe2\001\002\000\022\045" +
    "\uffed\047\uffed\050\uffed\051\uffed\052\uffed\066\uffed\067\uffed" +
    "\100\uffed\001\002\000\022\045\uffec\047\uffec\050\uffec\051" +
    "\uffec\052\uffec\066\uffec\067\uffec\100\uffec\001\002\000\022" +
    "\045\037\047\053\050\027\051\045\052\043\066\033\067" +
    "\050\100\042\001\002\000\052\025\uffea\041\uffea\046\uffea" +
    "\054\uffea\056\uffea\057\uffea\060\uffea\075\uffea\076\uffea\077" +
    "\uffea\101\uffea\102\uffea\103\uffea\104\uffea\106\uffea\107\uffea" +
    "\110\uffea\111\uffea\112\uffea\113\uffea\001\002\000\022\045" +
    "\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\066\ufff0\067\ufff0" +
    "\100\ufff0\001\002\000\022\045\ufff2\047\ufff2\050\ufff2\051" +
    "\ufff2\052\ufff2\066\ufff2\067\ufff2\100\ufff2\001\002\000\022" +
    "\045\037\047\053\050\027\051\045\052\043\066\033\067" +
    "\050\100\042\001\002\000\022\045\ufff1\047\ufff1\050\ufff1" +
    "\051\ufff1\052\ufff1\066\ufff1\067\ufff1\100\ufff1\001\002\000" +
    "\056\025\uffee\041\uffee\046\uffee\054\uffee\056\uffee\057\uffee" +
    "\060\uffee\066\uffee\067\uffee\075\uffee\076\uffee\077\uffee\101" +
    "\uffee\102\uffee\103\uffee\104\uffee\106\uffee\107\uffee\110\uffee" +
    "\111\uffee\112\uffee\113\uffee\001\002\000\024\045\037\047" +
    "\053\050\027\051\045\052\043\066\033\067\050\100\042" +
    "\105\034\001\002\000\016\041\uffd2\046\uffd2\054\uffd2\056" +
    "\uffd2\057\uffd2\060\uffd2\001\002\000\022\045\uffe8\047\uffe8" +
    "\050\uffe8\051\uffe8\052\uffe8\066\uffe8\067\uffe8\100\uffe8\001" +
    "\002\000\022\045\037\047\053\050\027\051\045\052\043" +
    "\066\033\067\050\100\042\001\002\000\022\045\uffe9\047" +
    "\uffe9\050\uffe9\051\uffe9\052\uffe9\066\uffe9\067\uffe9\100\uffe9" +
    "\001\002\000\046\025\uffe6\041\uffe6\046\uffe6\054\uffe6\056" +
    "\uffe6\057\uffe6\060\uffe6\075\uffe6\076\uffe6\077\uffe6\103\uffe6" +
    "\104\uffe6\106\uffe6\107\uffe6\110\uffe6\111\uffe6\112\uffe6\113" +
    "\uffe6\001\002\000\064\025\ufff4\041\ufff4\046\ufff4\054\ufff4" +
    "\056\ufff4\057\ufff4\060\ufff4\066\ufff4\067\ufff4\070\ufff4\071" +
    "\ufff4\074\ufff4\075\ufff4\076\ufff4\077\ufff4\101\ufff4\102\ufff4" +
    "\103\ufff4\104\ufff4\106\ufff4\107\ufff4\110\ufff4\111\ufff4\112" +
    "\ufff4\113\ufff4\001\002\000\022\041\uffd7\046\uffd7\054\uffd7" +
    "\056\uffd7\057\uffd7\060\uffd7\103\uffd7\104\uffd7\001\002\000" +
    "\022\045\uffda\047\uffda\050\uffda\051\uffda\052\uffda\066\uffda" +
    "\067\uffda\100\uffda\001\002\000\022\045\uffdc\047\uffdc\050" +
    "\uffdc\051\uffdc\052\uffdc\066\uffdc\067\uffdc\100\uffdc\001\002" +
    "\000\022\045\uffde\047\uffde\050\uffde\051\uffde\052\uffde\066" +
    "\uffde\067\uffde\100\uffde\001\002\000\022\045\uffdf\047\uffdf" +
    "\050\uffdf\051\uffdf\052\uffdf\066\uffdf\067\uffdf\100\uffdf\001" +
    "\002\000\022\045\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb" +
    "\066\uffdb\067\uffdb\100\uffdb\001\002\000\022\045\uffdd\047" +
    "\uffdd\050\uffdd\051\uffdd\052\uffdd\066\uffdd\067\uffdd\100\uffdd" +
    "\001\002\000\022\045\037\047\053\050\027\051\045\052" +
    "\043\066\033\067\050\100\042\001\002\000\022\041\uffd8" +
    "\046\uffd8\054\uffd8\056\uffd8\057\uffd8\060\uffd8\103\uffd8\104" +
    "\uffd8\001\002\000\022\045\037\047\053\050\027\051\045" +
    "\052\043\066\033\067\050\100\042\001\002\000\064\025" +
    "\ufffa\041\ufffa\046\ufffa\054\ufffa\056\ufffa\057\ufffa\060\ufffa" +
    "\066\ufffa\067\ufffa\070\ufffa\071\ufffa\074\ufffa\075\ufffa\076" +
    "\ufffa\077\ufffa\101\ufffa\102\ufffa\103\ufffa\104\ufffa\106\ufffa" +
    "\107\ufffa\110\ufffa\111\ufffa\112\ufffa\113\ufffa\001\002\000" +
    "\022\045\037\047\053\050\027\051\045\052\043\066\033" +
    "\067\050\100\042\001\002\000\040\025\uffe0\041\uffe0\046" +
    "\uffe0\054\uffe0\056\uffe0\057\uffe0\060\uffe0\103\uffe0\104\uffe0" +
    "\106\uffe0\107\uffe0\110\uffe0\111\uffe0\112\uffe0\113\uffe0\001" +
    "\002\000\004\056\uffaa\001\002\000\006\045\024\060\uffad" +
    "\001\002\000\004\060\uffac\001\002\000\036\020\143\027" +
    "\132\032\137\040\146\041\141\045\037\047\053\050\027" +
    "\051\045\052\043\066\033\067\050\100\042\105\034\001" +
    "\002\000\006\041\uffc2\057\uffc2\001\002\000\014\041\uffd0" +
    "\046\uffd0\054\176\056\uffd0\057\uffd0\001\002\000\006\041" +
    "\uffb8\057\uffb8\001\002\000\006\041\uffc6\057\uffc6\001\002" +
    "\000\006\041\uffc3\057\uffc3\001\002\000\010\041\uffc9\046" +
    "\174\057\uffc9\001\002\000\006\041\uffc1\057\uffc1\001\002" +
    "\000\050\002\uffb1\006\uffb1\015\uffb1\020\uffb1\027\uffb1\032" +
    "\uffb1\033\uffb1\034\uffb1\040\uffb1\045\uffb1\047\uffb1\050\uffb1" +
    "\051\uffb1\052\uffb1\066\uffb1\067\uffb1\100\uffb1\105\uffb1\115" +
    "\uffb1\001\002\000\030\041\uffc5\045\037\047\053\050\027" +
    "\051\045\052\043\057\uffc5\066\033\067\050\100\042\105" +
    "\034\001\002\000\006\041\uffb9\057\uffb9\001\002\000\004" +
    "\114\164\001\002\000\006\041\uffb7\057\uffb7\001\002\000" +
    "\006\041\uffc7\057\uffc7\001\002\000\052\002\uffa5\006\uffa5" +
    "\014\uffa5\015\uffa5\020\uffa5\027\uffa5\032\uffa5\033\uffa5\034" +
    "\uffa5\040\uffa5\045\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5" +
    "\066\uffa5\067\uffa5\100\uffa5\105\uffa5\115\uffa5\001\002\000" +
    "\006\041\157\057\155\001\002\000\030\041\uffbd\045\037" +
    "\047\053\050\027\051\045\052\043\057\uffbd\066\033\067" +
    "\050\100\042\105\034\001\002\000\010\041\uffbc\054\150" +
    "\057\uffbc\001\002\000\030\041\uffbb\045\037\047\053\050" +
    "\027\051\045\052\043\057\uffbb\066\033\067\050\100\042" +
    "\105\034\001\002\000\006\041\uffba\057\uffba\001\002\000" +
    "\010\041\uffc0\054\153\057\uffc0\001\002\000\030\041\uffbf" +
    "\045\037\047\053\050\027\051\045\052\043\057\uffbf\066" +
    "\033\067\050\100\042\105\034\001\002\000\006\041\uffbe" +
    "\057\uffbe\001\002\000\034\020\143\027\132\032\137\040" +
    "\146\045\037\047\053\050\027\051\045\052\043\066\033" +
    "\067\050\100\042\105\034\001\002\000\004\041\160\001" +
    "\002\000\052\002\uffb3\006\uffb3\014\uffb3\015\uffb3\020\uffb3" +
    "\027\uffb3\032\uffb3\033\uffb3\034\uffb3\040\uffb3\045\uffb3\047" +
    "\uffb3\050\uffb3\051\uffb3\052\uffb3\066\uffb3\067\uffb3\100\uffb3" +
    "\105\uffb3\115\uffb3\001\002\000\052\002\uffb2\006\uffb2\014" +
    "\uffb2\015\uffb2\020\uffb2\027\uffb2\032\uffb2\033\uffb2\034\uffb2" +
    "\040\uffb2\045\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\066" +
    "\uffb2\067\uffb2\100\uffb2\105\uffb2\115\uffb2\001\002\000\006" +
    "\041\uffb6\057\162\001\002\000\036\020\143\027\132\032" +
    "\137\040\146\041\uffb5\045\037\047\053\050\027\051\045" +
    "\052\043\066\033\067\050\100\042\105\034\001\002\000" +
    "\004\041\uffb4\001\002\000\044\006\004\015\012\020\143" +
    "\027\132\032\137\033\014\034\007\040\146\045\037\047" +
    "\053\050\027\051\045\052\043\066\033\067\050\100\042" +
    "\105\034\001\002\000\046\006\uffa8\015\uffa8\020\uffa8\027" +
    "\uffa8\032\uffa8\033\uffa8\034\uffa8\040\uffa8\045\uffa8\047\uffa8" +
    "\050\uffa8\051\uffa8\052\uffa8\066\uffa8\067\uffa8\100\uffa8\105" +
    "\uffa8\115\uffa8\001\002\000\046\006\uffa9\015\uffa9\020\uffa9" +
    "\027\uffa9\032\uffa9\033\uffa9\034\uffa9\040\uffa9\045\uffa9\047" +
    "\uffa9\050\uffa9\051\uffa9\052\uffa9\066\uffa9\067\uffa9\100\uffa9" +
    "\105\uffa9\115\uffa9\001\002\000\004\115\172\001\002\000" +
    "\046\006\004\015\012\020\143\027\132\032\137\033\014" +
    "\034\007\040\146\045\037\047\053\050\027\051\045\052" +
    "\043\066\033\067\050\100\042\105\034\115\uffa7\001\002" +
    "\000\004\115\uffa6\001\002\000\052\002\uffa4\006\uffa4\014" +
    "\uffa4\015\uffa4\020\uffa4\027\uffa4\032\uffa4\033\uffa4\034\uffa4" +
    "\040\uffa4\045\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\066" +
    "\uffa4\067\uffa4\100\uffa4\105\uffa4\115\uffa4\001\002\000\006" +
    "\041\uffc4\057\uffc4\001\002\000\024\045\037\047\053\050" +
    "\027\051\045\052\043\066\033\067\050\100\042\105\034" +
    "\001\002\000\006\041\uffc8\057\uffc8\001\002\000\024\045" +
    "\037\047\053\050\027\051\045\052\043\066\033\067\050" +
    "\100\042\105\034\001\002\000\012\041\uffcf\046\uffcf\056" +
    "\uffcf\057\uffcf\001\002\000\004\056\201\001\002\000\036" +
    "\020\143\027\132\032\137\040\146\041\141\045\037\047" +
    "\053\050\027\051\045\052\043\066\033\067\050\100\042" +
    "\105\034\001\002\000\052\002\uffa3\006\uffa3\014\203\015" +
    "\uffa3\020\uffa3\027\uffa3\032\uffa3\033\uffa3\034\uffa3\040\uffa3" +
    "\045\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\066\uffa3\067" +
    "\uffa3\100\uffa3\105\uffa3\115\uffa3\001\002\000\004\056\204" +
    "\001\002\000\036\020\143\027\132\032\137\040\146\041" +
    "\141\045\037\047\053\050\027\051\045\052\043\066\033" +
    "\067\050\100\042\105\034\001\002\000\050\002\uffa2\006" +
    "\uffa2\015\uffa2\020\uffa2\027\uffa2\032\uffa2\033\uffa2\034\uffa2" +
    "\040\uffa2\045\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\066" +
    "\uffa2\067\uffa2\100\uffa2\105\uffa2\115\uffa2\001\002\000\004" +
    "\002\001\001\002\000\004\025\216\001\002\000\006\025" +
    "\uffcb\054\211\001\002\000\022\045\037\047\053\050\027" +
    "\051\045\052\043\066\033\067\050\100\042\001\002\000" +
    "\004\025\uffca\001\002\000\006\025\uffce\054\214\001\002" +
    "\000\024\025\uffcd\045\037\047\053\050\027\051\045\052" +
    "\043\066\033\067\050\100\042\001\002\000\004\025\uffcc" +
    "\001\002\000\024\045\037\047\053\050\027\051\045\052" +
    "\043\066\033\067\050\100\042\105\034\001\002\000\004" +
    "\056\220\001\002\000\036\020\143\027\132\032\137\040" +
    "\146\041\141\045\037\047\053\050\027\051\045\052\043" +
    "\066\033\067\050\100\042\105\034\001\002\000\050\002" +
    "\uffa0\006\uffa0\015\uffa0\020\uffa0\027\uffa0\032\uffa0\033\uffa0" +
    "\034\uffa0\040\uffa0\045\uffa0\047\uffa0\050\uffa0\051\uffa0\052" +
    "\uffa0\066\uffa0\067\uffa0\100\uffa0\105\uffa0\115\uffa0\001\002" +
    "\000\004\056\223\001\002\000\036\020\143\027\132\032" +
    "\137\040\146\041\141\045\037\047\053\050\027\051\045" +
    "\052\043\066\033\067\050\100\042\105\034\001\002\000" +
    "\050\002\uffa1\006\uffa1\015\uffa1\020\uffa1\027\uffa1\032\uffa1" +
    "\033\uffa1\034\uffa1\040\uffa1\045\uffa1\047\uffa1\050\uffa1\051" +
    "\uffa1\052\uffa1\066\uffa1\067\uffa1\100\uffa1\105\uffa1\115\uffa1" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\016\047\012\056\005\057\010\060\014\061" +
    "\004\062\007\001\001\000\044\002\030\003\027\004\037" +
    "\005\034\006\053\007\045\013\046\015\040\017\054\020" +
    "\050\021\025\022\031\024\056\025\055\026\043\027\035" +
    "\030\221\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\002\030\003\027\004\037\005\034\006\053\007\045" +
    "\013\046\015\040\017\054\020\050\021\025\022\207\034" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\002\030\003\027\004\037\005\034\006\053\007\045\013" +
    "\046\015\040\017\054\020\050\021\025\022\031\024\056" +
    "\025\055\026\043\027\035\030\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\016" +
    "\001\001\000\002\001\001\000\006\051\022\052\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\002\030\003\027\004\037\005" +
    "\034\006\053\007\045\013\046\015\040\017\054\020\050" +
    "\021\025\022\031\024\056\025\055\026\043\027\035\030" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\114\001\001\000" +
    "\002\001\001\000\036\002\030\003\027\004\037\005\034" +
    "\006\053\007\045\013\046\015\040\017\054\020\050\021" +
    "\025\022\031\024\056\025\105\001\001\000\016\002\030" +
    "\003\027\004\037\005\034\006\053\007\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\073\001\001" +
    "\000\004\014\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\002\030\003\027\004\037\005\034\006\053\007\045" +
    "\013\046\015\040\017\054\020\050\021\025\022\031\024" +
    "\056\025\055\026\060\001\001\000\002\001\001\000\026" +
    "\002\030\003\027\004\037\005\034\006\053\007\045\013" +
    "\046\015\040\017\054\020\062\001\001\000\002\001\001" +
    "\000\030\002\030\003\027\004\037\005\034\006\053\007" +
    "\045\013\046\015\040\017\054\020\050\021\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\002\030\003\027\004\037\005\034\006\053\007\045" +
    "\013\046\015\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\002\030\003\027\004\037" +
    "\005\034\006\053\007\045\013\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\002\030\003\027\004\037" +
    "\005\034\006\053\007\045\013\046\015\040\017\054\020" +
    "\050\021\025\022\031\024\056\025\055\026\043\027\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\002" +
    "\030\003\027\004\037\005\034\006\053\007\045\013\046" +
    "\015\040\017\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\002\030\003\027" +
    "\004\037\005\034\006\053\007\045\013\046\015\040\017" +
    "\054\020\050\021\025\022\031\024\115\001\001\000\002" +
    "\001\001\000\016\002\030\003\027\004\037\005\034\006" +
    "\053\007\117\001\001\000\002\001\001\000\032\002\030" +
    "\003\027\004\037\005\034\006\053\007\045\013\046\015" +
    "\040\017\054\020\050\021\025\022\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\051\124\052\020\001" +
    "\001\000\002\001\001\000\070\002\030\003\027\004\037" +
    "\005\034\006\053\007\045\013\046\015\040\017\054\020" +
    "\050\021\025\022\031\024\056\025\055\026\043\027\035" +
    "\030\127\031\133\032\137\035\132\036\126\037\134\040" +
    "\141\042\130\043\144\046\143\055\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\002\030\003\027\004\037\005" +
    "\034\006\053\007\045\013\046\015\040\017\054\020\050" +
    "\021\025\022\031\024\056\025\055\026\043\027\035\030" +
    "\127\031\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\155\001\001\000\044\002\030\003\027\004\037" +
    "\005\034\006\053\007\045\013\046\015\040\017\054\020" +
    "\050\021\025\022\031\024\056\025\055\026\043\027\035" +
    "\030\146\001\001\000\004\041\150\001\001\000\044\002" +
    "\030\003\027\004\037\005\034\006\053\007\045\013\046" +
    "\015\040\017\054\020\050\021\025\022\031\024\056\025" +
    "\055\026\043\027\035\030\151\001\001\000\002\001\001" +
    "\000\004\041\153\001\001\000\044\002\030\003\027\004" +
    "\037\005\034\006\053\007\045\013\046\015\040\017\054" +
    "\020\050\021\025\022\031\024\056\025\055\026\043\027" +
    "\035\030\151\001\001\000\002\001\001\000\064\002\030" +
    "\003\027\004\037\005\034\006\053\007\045\013\046\015" +
    "\040\017\054\020\050\021\025\022\031\024\056\025\055" +
    "\026\043\027\035\030\127\031\133\032\137\035\132\036" +
    "\126\037\134\040\141\042\130\043\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\162\001\001\000\064\002\030\003\027\004\037\005\034" +
    "\006\053\007\045\013\046\015\040\017\054\020\050\021" +
    "\025\022\031\024\056\025\055\026\043\027\035\030\127" +
    "\031\133\032\137\035\132\036\126\037\134\040\141\042" +
    "\130\043\160\001\001\000\002\001\001\000\104\002\030" +
    "\003\027\004\037\005\034\006\053\007\045\013\046\015" +
    "\040\017\054\020\050\021\025\022\031\024\056\025\055" +
    "\026\043\027\035\030\127\031\133\032\137\035\132\036" +
    "\126\037\134\040\141\042\130\043\144\046\165\047\012" +
    "\053\167\054\166\056\005\057\010\060\014\061\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\104\002\030\003\027\004\037\005\034\006\053\007" +
    "\045\013\046\015\040\017\054\020\050\021\025\022\031" +
    "\024\056\025\055\026\043\027\035\030\127\031\133\032" +
    "\137\035\132\036\126\037\134\040\141\042\130\043\144" +
    "\046\165\047\012\053\167\054\170\056\005\057\010\060" +
    "\014\061\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\002\030\003\027\004\037\005" +
    "\034\006\053\007\045\013\046\015\040\017\054\020\050" +
    "\021\025\022\031\024\056\025\055\026\043\027\035\030" +
    "\127\031\174\001\001\000\002\001\001\000\046\002\030" +
    "\003\027\004\037\005\034\006\053\007\045\013\046\015" +
    "\040\017\054\020\050\021\025\022\031\024\056\025\055" +
    "\026\043\027\035\030\127\031\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\070\002\030\003\027\004\037" +
    "\005\034\006\053\007\045\013\046\015\040\017\054\020" +
    "\050\021\025\022\031\024\056\025\055\026\043\027\035" +
    "\030\127\031\133\032\137\035\132\036\126\037\134\040" +
    "\141\042\130\043\144\046\143\055\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\070\002\030\003\027\004" +
    "\037\005\034\006\053\007\045\013\046\015\040\017\054" +
    "\020\050\021\025\022\031\024\056\025\055\026\043\027" +
    "\035\030\127\031\133\032\137\035\132\036\126\037\134" +
    "\040\141\042\130\043\144\046\143\055\204\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\211\001\001\000\032\002\030\003\027\004\037\005" +
    "\034\006\053\007\045\013\046\015\040\017\054\020\050" +
    "\021\025\022\212\001\001\000\002\001\001\000\004\033" +
    "\214\001\001\000\032\002\030\003\027\004\037\005\034" +
    "\006\053\007\045\013\046\015\040\017\054\020\050\021" +
    "\025\022\212\001\001\000\002\001\001\000\046\002\030" +
    "\003\027\004\037\005\034\006\053\007\045\013\046\015" +
    "\040\017\054\020\050\021\025\022\031\024\056\025\055" +
    "\026\043\027\035\030\127\031\216\001\001\000\002\001" +
    "\001\000\070\002\030\003\027\004\037\005\034\006\053" +
    "\007\045\013\046\015\040\017\054\020\050\021\025\022" +
    "\031\024\056\025\055\026\043\027\035\030\127\031\133" +
    "\032\137\035\132\036\126\037\134\040\141\042\130\043" +
    "\144\046\143\055\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\070\002\030\003\027\004\037\005\034\006" +
    "\053\007\045\013\046\015\040\017\054\020\050\021\025" +
    "\022\031\024\056\025\055\026\043\027\035\030\127\031" +
    "\133\032\137\035\132\036\126\037\134\040\141\042\130" +
    "\043\144\046\143\055\223\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.out.println("Error de sintaxis "+s.sym);
        System.out.println(s.value);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error de sintaxis "+s.sym);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // program ::= compund_stmt 
            {
              Object RESULT =null;
		 System.out.println("EL PROGRAMA ES CORRECTO"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // compund_stmt ::= func_def 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compund_stmt",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // compund_stmt ::= for_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compund_stmt",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // compund_stmt ::= while_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compund_stmt",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // compund_stmt ::= if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compund_stmt",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // for_stmt ::= FOR exprlist IN testlist COLON suite 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // while_stmt ::= WHILE test COLON suite 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // if_stmt ::= IF test COLON suite ELSE COLON suite 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // if_stmt ::= IF test COLON suite 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // suite ::= NEWLINE INDENT stmt_repeat DEDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("suite",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // suite ::= simple_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("suite",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // stmt_repeat ::= stmt stmt_repeat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_repeat",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // stmt_repeat ::= stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_repeat",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // stmt ::= compund_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // stmt ::= simple_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // parameters ::= LPAREN arglist RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parameters ::= LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // arglist ::= arg COMA arglist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // arglist ::= arg COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // arglist ::= arg 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arglist",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // arg ::= NAME ASSIGN test 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // arg ::= NAME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // func_def ::= DEF NAME parameters COLON suite 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_def",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // simple_stmt ::= small_stmt simple_stmt_aux NEWLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // simple_stmt ::= small_stmt NEWLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // simple_stmt_aux ::= SEMICOLON small_stmt simple_stmt_aux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_stmt_aux",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // simple_stmt_aux ::= SEMICOLON small_stmt SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_stmt_aux",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // simple_stmt_aux ::= SEMICOLON small_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_stmt_aux",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // small_stmt ::= flow_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // small_stmt ::= print_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // small_stmt ::= expr_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // print_stmt ::= PRINT test print_stmt_aux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // print_stmt ::= PRINT test COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // print_stmt ::= PRINT test 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // print_stmt ::= PRINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // print_stmt_aux ::= COMA test print_stmt_aux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt_aux",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // print_stmt_aux ::= COMA test COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt_aux",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // print_stmt_aux ::= COMA test 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt_aux",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // flow_stmt ::= return_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // flow_stmt ::= continue_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // flow_stmt ::= break_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // return_stmt ::= RETURN testlist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // return_stmt ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // continue_stmt ::= CONTINUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("continue_stmt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // break_stmt ::= BREAK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_stmt ::= testlist ASSIGN testlist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr_stmt ::= testlist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exprlist ::= expr exprlist_repeat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprlist",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exprlist ::= expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprlist",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exprlist_repeat ::= COMA expr exprlist_repeat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprlist_repeat",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exprlist_repeat ::= COMA expr COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprlist_repeat",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exprlist_repeat ::= COMA expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprlist_repeat",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // testlist ::= test COMA testlist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("testlist",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // testlist ::= test 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("testlist",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // test ::= or_test 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("test",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // or_test ::= and_test OR or_test 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("or_test",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // or_test ::= and_test 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("or_test",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // and_test ::= not_test AND and_test 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("and_test",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // and_test ::= not_test 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("and_test",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // not_test ::= comparison 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("not_test",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // not_test ::= NOT not_test 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("not_test",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comparison ::= expr comp_op comparison 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comparison ::= expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comp_op ::= MAJOREQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comp_op ::= MINOREQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comp_op ::= MAJOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comp_op ::= MINOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comp_op ::= DIFF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comp_op ::= EQUALS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= xor_expr ORB expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= xor_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // xor_expr ::= and_expr XORB xor_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("xor_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // xor_expr ::= and_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("xor_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // and_expr ::= shift_expr ANDB and_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("and_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // and_expr ::= shift_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("and_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // shift_expr ::= arith_expr shift_op shift_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shift_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // shift_expr ::= arith_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shift_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // shift_op ::= SHIFTR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shift_op",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // shift_op ::= SHIFTL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shift_op",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // arith_expr ::= term arith_op arith_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // arith_expr ::= term 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // arith_op ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // arith_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // term ::= factor term_op term 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // term ::= factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // term_op ::= MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // term_op ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // term_op ::= MULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // factor ::= factor_aux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // factor ::= factor_op factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // factor_op ::= NOTB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_op",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // factor_op ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_op",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // factor_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_op",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // factor_aux ::= power 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_aux",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // factor_aux ::= atom 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_aux",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // power ::= atom EXP factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("power",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // atom ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // atom ::= number 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // atom ::= NAME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // number ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("number",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // number ::= LONG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("number",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // number ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("number",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

