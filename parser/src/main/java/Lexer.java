/* The following code was generated by JFlex 1.4.3 on 7/4/15 3:51 PM */

/*SECCIÓN DE CÓDIGO DE USUARIO*/
import java_cup.runtime.*;
import jflex.sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 7/4/15 3:51 PM from the specification file
 * <tt>./language/jflex/python.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int TRIPLE_STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\34\1\3\1\2\1\0\1\3\1\1\16\34\4\0\1\3\1\103"+
    "\1\31\1\4\1\33\1\74\1\75\1\32\1\64\1\65\1\72\1\25"+
    "\1\61\1\26\1\11\1\73\12\6\1\62\1\63\1\101\1\5\1\102"+
    "\2\0\1\15\1\33\1\16\1\33\1\24\1\13\2\33\1\20\2\33"+
    "\1\7\1\33\1\22\1\21\1\30\1\33\1\14\1\33\1\17\3\33"+
    "\1\27\2\33\1\66\1\104\1\67\1\77\1\12\1\0\1\45\1\50"+
    "\1\56\1\35\1\23\1\36\1\47\1\43\1\44\1\33\1\54\1\10"+
    "\1\41\1\57\1\40\1\52\1\33\1\37\1\46\1\51\1\60\1\33"+
    "\1\42\1\55\1\53\1\33\1\70\1\76\1\71\1\100\41\34\2\0"+
    "\4\33\4\0\1\33\2\0\1\34\7\0\1\33\4\0\1\33\5\0"+
    "\27\33\1\0\37\33\1\0\u01ca\33\4\0\14\33\16\0\5\33\7\0"+
    "\1\33\1\0\1\33\21\0\160\34\5\33\1\0\2\33\2\0\4\33"+
    "\10\0\1\33\1\0\3\33\1\0\1\33\1\0\24\33\1\0\123\33"+
    "\1\0\213\33\1\0\5\34\2\0\236\33\11\0\46\33\2\0\1\33"+
    "\7\0\47\33\11\0\55\34\1\0\1\34\1\0\2\34\1\0\2\34"+
    "\1\0\1\34\10\0\33\33\5\0\3\33\15\0\4\34\7\0\1\33"+
    "\4\0\13\34\5\0\53\33\37\34\4\0\2\33\1\34\143\33\1\0"+
    "\1\33\10\34\1\0\6\34\2\33\2\34\1\0\4\34\2\33\12\34"+
    "\3\33\2\0\1\33\17\0\1\34\1\33\1\34\36\33\33\34\2\0"+
    "\131\33\13\34\1\33\16\0\12\34\41\33\11\34\2\33\4\0\1\33"+
    "\5\0\26\33\4\34\1\33\11\34\1\33\3\34\1\33\5\34\22\0"+
    "\31\33\3\34\244\0\4\34\66\33\3\34\1\33\22\34\1\33\7\34"+
    "\12\33\2\34\2\0\12\34\1\0\7\33\1\0\7\33\1\0\3\34"+
    "\1\0\10\33\2\0\2\33\2\0\26\33\1\0\7\33\1\0\1\33"+
    "\3\0\4\33\2\0\1\34\1\33\7\34\2\0\2\34\2\0\3\34"+
    "\1\33\10\0\1\34\4\0\2\33\1\0\3\33\2\34\2\0\12\34"+
    "\4\33\7\0\1\33\5\0\3\34\1\0\6\33\4\0\2\33\2\0"+
    "\26\33\1\0\7\33\1\0\2\33\1\0\2\33\1\0\2\33\2\0"+
    "\1\34\1\0\5\34\4\0\2\34\2\0\3\34\3\0\1\34\7\0"+
    "\4\33\1\0\1\33\7\0\14\34\3\33\1\34\13\0\3\34\1\0"+
    "\11\33\1\0\3\33\1\0\26\33\1\0\7\33\1\0\2\33\1\0"+
    "\5\33\2\0\1\34\1\33\10\34\1\0\3\34\1\0\3\34\2\0"+
    "\1\33\17\0\2\33\2\34\2\0\12\34\1\0\1\33\17\0\3\34"+
    "\1\0\10\33\2\0\2\33\2\0\26\33\1\0\7\33\1\0\2\33"+
    "\1\0\5\33\2\0\1\34\1\33\7\34\2\0\2\34\2\0\3\34"+
    "\10\0\2\34\4\0\2\33\1\0\3\33\2\34\2\0\12\34\1\0"+
    "\1\33\20\0\1\34\1\33\1\0\6\33\3\0\3\33\1\0\4\33"+
    "\3\0\2\33\1\0\1\33\1\0\2\33\3\0\2\33\3\0\3\33"+
    "\3\0\14\33\4\0\5\34\3\0\3\34\1\0\4\34\2\0\1\33"+
    "\6\0\1\34\16\0\12\34\11\0\1\33\7\0\3\34\1\0\10\33"+
    "\1\0\3\33\1\0\27\33\1\0\12\33\1\0\5\33\3\0\1\33"+
    "\7\34\1\0\3\34\1\0\4\34\7\0\2\34\1\0\2\33\6\0"+
    "\2\33\2\34\2\0\12\34\22\0\2\34\1\0\10\33\1\0\3\33"+
    "\1\0\27\33\1\0\12\33\1\0\5\33\2\0\1\34\1\33\7\34"+
    "\1\0\3\34\1\0\4\34\7\0\2\34\7\0\1\33\1\0\2\33"+
    "\2\34\2\0\12\34\1\0\2\33\17\0\2\34\1\0\10\33\1\0"+
    "\3\33\1\0\51\33\2\0\1\33\7\34\1\0\3\34\1\0\4\34"+
    "\1\33\10\0\1\34\10\0\2\33\2\34\2\0\12\34\12\0\6\33"+
    "\2\0\2\34\1\0\22\33\3\0\30\33\1\0\11\33\1\0\1\33"+
    "\2\0\7\33\3\0\1\34\4\0\6\34\1\0\1\34\1\0\10\34"+
    "\22\0\2\34\15\0\60\33\1\34\2\33\7\34\4\0\10\33\10\34"+
    "\1\0\12\34\47\0\2\33\1\0\1\33\2\0\2\33\1\0\1\33"+
    "\2\0\1\33\6\0\4\33\1\0\7\33\1\0\3\33\1\0\1\33"+
    "\1\0\1\33\2\0\2\33\1\0\4\33\1\34\2\33\6\34\1\0"+
    "\2\34\1\33\2\0\5\33\1\0\1\33\1\0\6\34\2\0\12\34"+
    "\2\0\2\33\42\0\1\33\27\0\2\34\6\0\12\34\13\0\1\34"+
    "\1\0\1\34\1\0\1\34\4\0\2\34\10\33\1\0\44\33\4\0"+
    "\24\34\1\0\2\34\5\33\13\34\1\0\44\34\11\0\1\34\71\0"+
    "\53\33\24\34\1\33\12\34\6\0\6\33\4\34\4\33\3\34\1\33"+
    "\3\34\2\33\7\34\3\33\4\34\15\33\14\34\1\33\17\34\2\0"+
    "\46\33\12\0\53\33\1\0\1\33\3\0\u0149\33\1\0\4\33\2\0"+
    "\7\33\1\0\1\33\1\0\4\33\2\0\51\33\1\0\4\33\2\0"+
    "\41\33\1\0\4\33\2\0\7\33\1\0\1\33\1\0\4\33\2\0"+
    "\17\33\1\0\71\33\1\0\4\33\2\0\103\33\2\0\3\34\40\0"+
    "\20\33\20\0\125\33\14\0\u026c\33\2\0\21\33\1\0\32\33\5\0"+
    "\113\33\3\0\3\33\17\0\15\33\1\0\4\33\3\34\13\0\22\33"+
    "\3\34\13\0\22\33\2\34\14\0\15\33\1\0\3\33\1\0\2\34"+
    "\14\0\64\33\40\34\3\0\1\33\3\0\2\33\1\34\2\0\12\34"+
    "\41\0\3\34\2\0\12\34\6\0\130\33\10\0\51\33\1\34\1\33"+
    "\5\0\106\33\12\0\35\33\3\0\14\34\4\0\14\34\12\0\12\34"+
    "\36\33\2\0\5\33\13\0\54\33\4\0\21\34\7\33\2\34\6\0"+
    "\12\34\46\0\27\33\5\34\4\0\65\33\12\34\1\0\35\34\2\0"+
    "\13\34\6\0\12\34\15\0\1\33\130\0\5\34\57\33\21\34\7\33"+
    "\4\0\12\34\21\0\11\34\14\0\3\34\36\33\12\34\3\0\2\33"+
    "\12\34\6\0\46\33\16\34\14\0\44\33\24\34\10\0\12\34\3\0"+
    "\3\33\12\34\44\33\122\0\3\34\1\0\25\34\4\33\1\34\4\33"+
    "\1\34\15\0\300\33\47\34\25\0\4\34\u0116\33\2\0\6\33\2\0"+
    "\46\33\2\0\6\33\2\0\10\33\1\0\1\33\1\0\1\33\1\0"+
    "\1\33\1\0\37\33\2\0\65\33\1\0\7\33\1\0\1\33\3\0"+
    "\3\33\1\0\7\33\3\0\4\33\2\0\6\33\4\0\15\33\5\0"+
    "\3\33\1\0\7\33\16\0\5\34\32\0\5\34\20\0\2\33\23\0"+
    "\1\33\13\0\5\34\5\0\6\34\1\0\1\33\15\0\1\33\20\0"+
    "\15\33\3\0\32\33\26\0\15\34\4\0\1\34\3\0\14\34\21\0"+
    "\1\33\4\0\1\33\2\0\12\33\1\0\1\33\3\0\5\33\6\0"+
    "\1\33\1\0\1\33\1\0\1\33\1\0\4\33\1\0\13\33\2\0"+
    "\4\33\5\0\5\33\4\0\1\33\21\0\51\33\u0a77\0\57\33\1\0"+
    "\57\33\1\0\205\33\6\0\4\33\3\34\16\0\46\33\12\0\66\33"+
    "\11\0\1\33\17\0\1\34\27\33\11\0\7\33\1\0\7\33\1\0"+
    "\7\33\1\0\7\33\1\0\7\33\1\0\7\33\1\0\7\33\1\0"+
    "\7\33\1\0\40\34\57\0\1\33\u01d5\0\3\33\31\0\11\33\6\34"+
    "\1\0\5\33\2\0\5\33\4\0\126\33\2\0\2\34\2\0\3\33"+
    "\1\0\132\33\1\0\4\33\5\0\51\33\3\0\136\33\21\0\33\33"+
    "\65\0\20\33\u0200\0\u19b6\33\112\0\u51cc\33\64\0\u048d\33\103\0\56\33"+
    "\2\0\u010d\33\3\0\20\33\12\34\2\33\24\0\57\33\1\34\14\0"+
    "\2\34\1\0\31\33\10\0\120\33\2\34\45\0\11\33\2\0\147\33"+
    "\2\0\4\33\1\0\2\33\16\0\12\33\120\0\10\33\1\34\3\33"+
    "\1\34\4\33\1\34\27\33\5\34\20\0\1\33\7\0\64\33\14\0"+
    "\2\34\62\33\21\34\13\0\12\34\6\0\22\34\6\33\3\0\1\33"+
    "\4\0\12\34\34\33\10\34\2\0\27\33\15\34\14\0\35\33\3\0"+
    "\4\34\57\33\16\34\16\0\1\33\12\34\46\0\51\33\16\34\11\0"+
    "\3\33\1\34\10\33\2\34\2\0\12\34\6\0\27\33\3\0\1\33"+
    "\1\34\4\0\60\33\1\34\1\33\3\34\2\33\2\34\5\33\2\34"+
    "\1\33\1\34\1\33\30\0\3\33\43\0\6\33\2\0\6\33\2\0"+
    "\6\33\11\0\7\33\1\0\7\33\221\0\43\33\10\34\1\0\2\34"+
    "\2\0\12\34\6\0\u2ba4\33\14\0\27\33\4\0\61\33\u2104\0\u012e\33"+
    "\2\0\76\33\2\0\152\33\46\0\7\33\14\0\5\33\5\0\1\33"+
    "\1\34\12\33\1\0\15\33\1\0\5\33\1\0\1\33\1\0\2\33"+
    "\1\0\2\33\1\0\154\33\41\0\u016b\33\22\0\100\33\2\0\66\33"+
    "\50\0\15\33\3\0\20\34\20\0\7\34\14\0\2\33\30\0\3\33"+
    "\31\0\1\33\6\0\5\33\1\0\207\33\2\0\1\34\4\0\1\33"+
    "\13\0\12\34\7\0\32\33\4\0\1\33\1\0\32\33\13\0\131\33"+
    "\3\0\6\33\2\0\6\33\2\0\6\33\2\0\3\33\3\0\2\33"+
    "\3\0\2\33\22\0\3\34\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\6\2\7"+
    "\1\10\1\7\1\11\1\12\2\13\16\7\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\1\1\36\2\37\1\40\1\41\2\1\2\4\1\42"+
    "\1\43\1\44\1\0\3\7\2\0\6\7\1\45\2\7"+
    "\1\46\1\7\1\47\1\50\1\51\13\7\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\5\0\5\7\1\65\1\66\1\67\1\7\1\70"+
    "\7\7\1\71\2\7\1\72\6\7\1\73\1\74\2\0"+
    "\1\7\1\75\1\76\1\77\1\7\1\100\4\7\1\101"+
    "\4\7\1\102\1\7\1\103\3\7\1\0\1\44\4\7"+
    "\1\104\1\105\3\7\1\106\1\107\1\110\1\111\1\7"+
    "\1\0\1\112\1\113\1\7\1\114\1\115\1\116\1\117"+
    "\1\7\1\0\1\120\1\7\1\0\1\121\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\317\0\317\0\u0159"+
    "\0\u019e\0\u01e3\0\u0228\0\u026d\0\317\0\u02b2\0\317\0\317"+
    "\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b\0\u0450\0\u0495\0\u04da"+
    "\0\u051f\0\u0564\0\u05a9\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u0702"+
    "\0\317\0\317\0\317\0\317\0\317\0\317\0\317\0\317"+
    "\0\317\0\u0747\0\u078c\0\317\0\317\0\317\0\317\0\317"+
    "\0\u07d1\0\u0816\0\u085b\0\u08a0\0\317\0\u08a0\0\u08e5\0\u092a"+
    "\0\u096f\0\u09b4\0\u09f9\0\317\0\317\0\317\0\u0a3e\0\u0a83"+
    "\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc\0\u0c21\0\u0c66\0\u0cab"+
    "\0\u0cf0\0\u0d35\0\u0d7a\0\u0228\0\u0dbf\0\u0e04\0\u0228\0\u0e49"+
    "\0\u0228\0\u0228\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7"+
    "\0\u102c\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185\0\317\0\317"+
    "\0\317\0\317\0\317\0\317\0\317\0\317\0\317\0\317"+
    "\0\317\0\u11ca\0\u120f\0\u1254\0\u1299\0\u12de\0\u1323\0\u1368"+
    "\0\u13ad\0\u13f2\0\u1437\0\317\0\u0228\0\u0228\0\u147c\0\u0228"+
    "\0\u14c1\0\u1506\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f\0\u0228"+
    "\0\u16a4\0\u16e9\0\u0228\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842"+
    "\0\u1887\0\u0228\0\317\0\u18cc\0\u1911\0\u1956\0\u0228\0\u0228"+
    "\0\u0228\0\u199b\0\u0228\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u0228"+
    "\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3\0\u0228\0\u1c08\0\u0228\0\u1c4d"+
    "\0\u1c92\0\u1cd7\0\u1d1c\0\317\0\u1d61\0\u1da6\0\u1deb\0\u1e30"+
    "\0\u0228\0\u0228\0\u1e75\0\u1eba\0\u1eff\0\u0228\0\u0228\0\u0228"+
    "\0\u0228\0\u1f44\0\u1f89\0\u0228\0\u0228\0\u1fce\0\u0228\0\u0228"+
    "\0\u0228\0\u0228\0\u2013\0\u2058\0\u0228\0\u209d\0\u20e2\0\u0228"+
    "\0\u2127";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\11\13\1\16\1\13\1\17\1\20\2\13"+
    "\1\21\1\22\1\13\1\4\1\23\1\24\1\25\1\26"+
    "\1\13\1\27\1\13\1\30\1\31\1\13\1\32\1\33"+
    "\1\34\1\35\1\36\2\13\1\37\1\40\1\13\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\4\1\64\2\4\26\64\1\65\1\66"+
    "\51\64\1\67\31\70\1\71\1\72\31\70\2\4\10\70"+
    "\1\4\6\70\107\0\1\6\102\0\1\10\1\73\1\74"+
    "\102\10\5\0\1\75\105\0\1\12\2\76\1\77\1\100"+
    "\100\0\3\13\1\0\13\13\2\0\2\13\2\0\26\13"+
    "\32\0\3\13\1\0\13\13\2\0\2\13\2\0\12\13"+
    "\1\101\13\13\32\0\2\13\1\102\1\0\13\13\2\0"+
    "\2\13\2\0\22\13\1\103\3\13\55\0\1\104\105\0"+
    "\1\105\60\0\3\13\1\0\11\13\1\106\1\13\2\0"+
    "\2\13\2\0\26\13\32\0\3\13\1\0\13\13\2\0"+
    "\2\13\2\0\4\13\1\107\1\110\3\13\1\111\14\13"+
    "\32\0\3\13\1\0\11\13\1\112\1\13\2\0\2\13"+
    "\2\0\12\13\1\113\13\13\32\0\3\13\1\0\13\13"+
    "\2\0\2\13\2\0\4\13\1\114\21\13\32\0\3\13"+
    "\1\0\13\13\2\0\2\13\2\0\10\13\1\115\1\116"+
    "\14\13\32\0\3\13\1\0\13\13\2\0\2\13\2\0"+
    "\3\13\1\117\2\13\1\120\4\13\1\121\10\13\1\122"+
    "\1\13\32\0\3\13\1\0\13\13\2\0\2\13\2\0"+
    "\13\13\1\123\10\13\1\124\1\13\32\0\2\13\1\125"+
    "\1\0\13\13\2\0\2\13\2\0\26\13\32\0\3\13"+
    "\1\0\13\13\2\0\2\13\2\0\4\13\1\126\21\13"+
    "\32\0\3\13\1\0\13\13\2\0\2\13\2\0\4\13"+
    "\1\127\13\13\1\130\5\13\32\0\3\13\1\0\13\13"+
    "\2\0\2\13\2\0\4\13\1\131\5\13\1\132\13\13"+
    "\32\0\3\13\1\0\13\13\2\0\2\13\2\0\11\13"+
    "\1\133\14\13\32\0\2\13\1\134\1\0\13\13\2\0"+
    "\2\13\2\0\5\13\1\135\20\13\32\0\3\13\1\0"+
    "\13\13\2\0\2\13\2\0\5\13\1\136\20\13\116\0"+
    "\1\137\105\0\1\140\16\0\1\141\73\0\1\142\10\0"+
    "\1\143\74\0\1\144\7\0\1\145\77\0\1\64\2\0"+
    "\26\64\1\0\52\64\32\0\1\146\5\0\1\147\11\0"+
    "\1\150\5\0\1\151\25\0\31\70\2\0\31\70\2\0"+
    "\10\70\1\0\6\70\31\0\1\152\105\0\1\153\54\0"+
    "\1\74\114\0\1\154\105\0\1\155\10\0\1\156\66\0"+
    "\3\13\1\0\13\13\2\0\2\13\2\0\6\13\1\157"+
    "\17\13\32\0\3\13\1\0\13\13\2\0\2\13\2\0"+
    "\11\13\1\160\1\13\1\161\12\13\32\0\3\13\1\0"+
    "\11\13\1\162\1\13\2\0\2\13\2\0\23\13\1\163"+
    "\2\13\55\0\1\164\105\0\1\164\60\0\2\13\1\165"+
    "\1\0\13\13\2\0\2\13\2\0\3\13\1\166\22\13"+
    "\32\0\3\13\1\0\13\13\2\0\2\13\2\0\5\13"+
    "\1\167\20\13\32\0\3\13\1\0\13\13\2\0\2\13"+
    "\2\0\4\13\1\170\21\13\32\0\3\13\1\0\13\13"+
    "\2\0\2\13\2\0\24\13\1\171\1\13\32\0\3\13"+
    "\1\0\13\13\2\0\2\13\2\0\16\13\1\172\7\13"+
    "\32\0\3\13\1\0\13\13\2\0\2\13\2\0\11\13"+
    "\1\173\14\13\32\0\3\13\1\0\13\13\2\0\2\13"+
    "\2\0\11\13\1\174\14\13\32\0\3\13\1\0\13\13"+
    "\2\0\2\13\2\0\16\13\1\175\7\13\32\0\3\13"+
    "\1\0\13\13\2\0\2\13\2\0\17\13\1\176\6\13"+
    "\32\0\3\13\1\0\13\13\2\0\2\13\2\0\13\13"+
    "\1\177\12\13\32\0\3\13\1\0\13\13\2\0\2\13"+
    "\2\0\2\13\1\200\23\13\32\0\3\13\1\0\13\13"+
    "\2\0\2\13\2\0\5\13\1\201\20\13\32\0\3\13"+
    "\1\0\11\13\1\202\1\13\2\0\2\13\2\0\26\13"+
    "\32\0\3\13\1\0\13\13\2\0\2\13\2\0\20\13"+
    "\1\203\5\13\32\0\3\13\1\0\13\13\2\0\2\13"+
    "\2\0\17\13\1\204\6\13\32\0\3\13\1\0\13\13"+
    "\2\0\2\13\2\0\11\13\1\205\14\13\32\0\3\13"+
    "\1\0\13\13\2\0\2\13\2\0\13\13\1\206\12\13"+
    "\32\0\3\13\1\0\11\13\1\207\1\13\2\0\2\13"+
    "\2\0\26\13\32\0\3\13\1\0\13\13\2\0\2\13"+
    "\2\0\12\13\1\210\13\13\32\0\3\13\1\0\13\13"+
    "\2\0\2\13\2\0\24\13\1\211\1\13\32\0\3\13"+
    "\1\0\13\13\2\0\2\13\2\0\16\13\1\212\7\13"+
    "\55\0\1\213\105\0\1\213\76\0\1\156\74\0\1\214"+
    "\117\0\1\215\63\0\3\13\1\0\13\13\2\0\2\13"+
    "\2\0\15\13\1\216\10\13\32\0\3\13\1\0\13\13"+
    "\2\0\2\13\2\0\3\13\1\217\22\13\32\0\3\13"+
    "\1\0\11\13\1\220\1\13\2\0\2\13\2\0\26\13"+
    "\32\0\3\13\1\0\13\13\2\0\2\13\2\0\23\13"+
    "\1\221\2\13\32\0\3\13\1\0\11\13\1\222\1\13"+
    "\2\0\2\13\2\0\26\13\32\0\3\13\1\0\13\13"+
    "\2\0\2\13\2\0\6\13\1\223\17\13\32\0\3\13"+
    "\1\0\13\13\2\0\2\13\2\0\12\13\1\224\13\13"+
    "\32\0\3\13\1\0\13\13\2\0\2\13\2\0\25\13"+
    "\1\225\32\0\3\13\1\0\13\13\2\0\2\13\2\0"+
    "\13\13\1\226\12\13\32\0\2\13\1\227\1\0\13\13"+
    "\2\0\2\13\2\0\26\13\32\0\3\13\1\0\13\13"+
    "\2\0\2\13\2\0\10\13\1\230\15\13\32\0\3\13"+
    "\1\0\13\13\2\0\2\13\2\0\5\13\1\231\20\13"+
    "\32\0\3\13\1\0\11\13\1\232\1\13\2\0\2\13"+
    "\2\0\26\13\32\0\3\13\1\0\13\13\2\0\2\13"+
    "\2\0\15\13\1\233\10\13\32\0\3\13\1\0\13\13"+
    "\2\0\2\13\2\0\12\13\1\234\13\13\32\0\3\13"+
    "\1\0\11\13\1\235\1\13\2\0\2\13\2\0\26\13"+
    "\32\0\3\13\1\0\13\13\2\0\2\13\2\0\24\13"+
    "\1\236\1\13\32\0\3\13\1\0\13\13\2\0\2\13"+
    "\2\0\13\13\1\237\12\13\32\0\2\13\1\240\1\0"+
    "\13\13\2\0\2\13\2\0\26\13\32\0\3\13\1\0"+
    "\13\13\2\0\2\13\2\0\13\13\1\241\12\13\32\0"+
    "\3\13\1\0\13\13\2\0\2\13\2\0\16\13\1\242"+
    "\7\13\41\0\1\243\117\0\1\244\62\0\3\13\1\0"+
    "\13\13\2\0\2\13\2\0\2\13\1\245\23\13\32\0"+
    "\3\13\1\0\13\13\2\0\2\13\2\0\17\13\1\246"+
    "\6\13\32\0\2\13\1\247\1\0\13\13\2\0\2\13"+
    "\2\0\26\13\32\0\3\13\1\0\13\13\2\0\2\13"+
    "\2\0\4\13\1\250\21\13\32\0\3\13\1\0\11\13"+
    "\1\251\1\13\2\0\2\13\2\0\26\13\32\0\3\13"+
    "\1\0\11\13\1\252\1\13\2\0\2\13\2\0\26\13"+
    "\32\0\3\13\1\0\13\13\2\0\2\13\2\0\4\13"+
    "\1\253\21\13\32\0\3\13\1\0\13\13\2\0\2\13"+
    "\2\0\4\13\1\254\21\13\32\0\3\13\1\0\13\13"+
    "\2\0\2\13\2\0\12\13\1\255\13\13\32\0\3\13"+
    "\1\0\13\13\2\0\2\13\2\0\21\13\1\256\4\13"+
    "\32\0\3\13\1\0\13\13\2\0\2\13\2\0\16\13"+
    "\1\257\7\13\32\0\3\13\1\0\13\13\2\0\2\13"+
    "\2\0\2\13\1\260\23\13\32\0\3\13\1\0\13\13"+
    "\2\0\2\13\2\0\13\13\1\261\12\13\32\0\3\13"+
    "\1\0\13\13\2\0\2\13\2\0\11\13\1\262\14\13"+
    "\42\0\1\263\74\0\3\13\1\0\13\13\2\0\2\13"+
    "\2\0\12\13\1\264\13\13\32\0\3\13\1\0\13\13"+
    "\2\0\2\13\2\0\16\13\1\265\7\13\32\0\2\13"+
    "\1\266\1\0\13\13\2\0\2\13\2\0\26\13\32\0"+
    "\3\13\1\0\13\13\2\0\2\13\2\0\24\13\1\267"+
    "\1\13\32\0\3\13\1\0\13\13\2\0\2\13\2\0"+
    "\16\13\1\270\7\13\32\0\3\13\1\0\13\13\2\0"+
    "\2\13\2\0\16\13\1\271\7\13\32\0\2\13\1\272"+
    "\1\0\13\13\2\0\2\13\2\0\26\13\32\0\3\13"+
    "\1\0\13\13\2\0\2\13\2\0\24\13\1\273\1\13"+
    "\43\0\1\274\73\0\3\13\1\0\13\13\2\0\2\13"+
    "\2\0\20\13\1\275\5\13\32\0\3\13\1\0\13\13"+
    "\2\0\2\13\2\0\25\13\1\276\44\0\1\277\72\0"+
    "\3\13\1\0\11\13\1\300\1\13\2\0\2\13\2\0"+
    "\26\13\45\0\1\301\105\0\1\77\62\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8556];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\2\11\5\1\1\11\1\1\2\11"+
    "\20\1\11\11\2\1\5\11\4\1\1\11\6\1\3\11"+
    "\1\1\1\0\3\1\2\0\31\1\13\11\5\0\5\1"+
    "\1\11\26\1\1\11\2\0\25\1\1\0\1\11\16\1"+
    "\1\0\10\1\1\0\2\1\1\0\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();

    private Symbol symbol(int type){
        return new Symbol(type,yyline,yycolumn);
    }

    private  Symbol symbol(int type,Object value){
        return new Symbol(type,yyline,yycolumn,value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2250) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 23: 
          { return symbol(sym1.MOD, yytext());
          }
        case 82: break;
        case 39: 
          { return symbol(sym1.IS, yytext());
          }
        case 83: break;
        case 14: 
          { return symbol(sym1.SEMICOLON, yytext());
          }
        case 84: break;
        case 57: 
          { return symbol(sym1.AND, yytext());
          }
        case 85: break;
        case 16: 
          { return symbol(sym1.RPAREN, yytext());
          }
        case 86: break;
        case 20: 
          { return symbol(sym1.RCURLY, yytext());
          }
        case 87: break;
        case 18: 
          { return symbol(sym1.RBRACKET, yytext());
          }
        case 88: break;
        case 6: 
          { return symbol(sym1.INTEGER, yytext());
          }
        case 89: break;
        case 59: 
          { return symbol(sym1.NOT, yytext());
          }
        case 90: break;
        case 15: 
          { return symbol(sym1.LPAREN, yytext());
          }
        case 91: break;
        case 19: 
          { return symbol(sym1.LCURLY, yytext());
          }
        case 92: break;
        case 28: 
          { return symbol(sym1.MINOR, yytext());
          }
        case 93: break;
        case 46: 
          { return symbol(sym1.MAJOREQ, yytext());
          }
        case 94: break;
        case 35: 
          { return symbol(sym1.LONG, yytext());
          }
        case 95: break;
        case 17: 
          { return symbol(sym1.LBRACKET, yytext());
          }
        case 96: break;
        case 74: 
          { return symbol(sym1.LAMBDA, yytext());
          }
        case 97: break;
        case 24: 
          { return symbol(sym1.ANDB, yytext());
          }
        case 98: break;
        case 43: 
          { return symbol(sym1.DIVE, yytext());
          }
        case 99: break;
        case 52: 
          { string.append('\n');
          }
        case 100: break;
        case 49: 
          { string.append('\"');
          }
        case 101: break;
        case 61: 
          { return symbol(sym1.ELIF, yytext());
          }
        case 102: break;
        case 73: 
          { return symbol(sym1.CLASS, yytext());
          }
        case 103: break;
        case 12: 
          { return symbol(sym1.COMA, yytext());
          }
        case 104: break;
        case 56: 
          { return symbol(sym1.FOR, yytext());
          }
        case 105: break;
        case 42: 
          { return symbol(sym1.EXP, yytext());
          }
        case 106: break;
        case 77: 
          { return symbol(sym1.IMPORT, yytext());
          }
        case 107: break;
        case 69: 
          { return symbol(sym1.WHILE, yytext());
          }
        case 108: break;
        case 29: 
          { return symbol(sym1.MAJOR, yytext());
          }
        case 109: break;
        case 60: 
          { yybegin(YYINITIAL); return symbol(sym1.STRING3, string.toString());
          }
        case 110: break;
        case 50: 
          { string.append('\r');
          }
        case 111: break;
        case 70: 
          { return symbol(sym1.BREAK, yytext());
          }
        case 112: break;
        case 67: 
          { return symbol(sym1.PASS, yytext());
          }
        case 113: break;
        case 11: 
          { string.setLength(0); yybegin(STRING);
          }
        case 114: break;
        case 26: 
          { return symbol(sym1.XORB, yytext());
          }
        case 115: break;
        case 48: 
          { return symbol(sym1.DIFF, yytext());
          }
        case 116: break;
        case 51: 
          { string.append('\t');
          }
        case 117: break;
        case 72: 
          { return symbol(sym1.YIELD, yytext());
          }
        case 118: break;
        case 75: 
          { return symbol(sym1.EXCEPT, yytext());
          }
        case 119: break;
        case 79: 
          { return symbol(sym1.GLOBAL, yytext());
          }
        case 120: break;
        case 10: 
          { return symbol(sym1.MINUS, yytext());
          }
        case 121: break;
        case 41: 
          { return symbol(sym1.AS, yytext());
          }
        case 122: break;
        case 36: 
          { return symbol(sym1.FLOAT, yytext());
          }
        case 123: break;
        case 54: 
          { return symbol(sym1.DEL, yytext());
          }
        case 124: break;
        case 45: 
          { return symbol(sym1.SHIFTL, yytext());
          }
        case 125: break;
        case 71: 
          { return symbol(sym1.PRINT, yytext());
          }
        case 126: break;
        case 33: 
          { string.append(yytext());
          }
        case 127: break;
        case 37: 
          { return symbol(sym1.OR, yytext());
          }
        case 128: break;
        case 65: 
          { return symbol(sym1.WITH, yytext());
          }
        case 129: break;
        case 78: 
          { return symbol(sym1.ASSERT, yytext());
          }
        case 130: break;
        case 1: 
          { throw new Error("Illegal Character < "+yytext()+" >");
          }
        case 131: break;
        case 3: 
          { return symbol(sym1.WHITESPACE, yytext());
          }
        case 132: break;
        case 9: 
          { return symbol(sym1.PLUS, yytext());
          }
        case 133: break;
        case 38: 
          { return symbol(sym1.IF, yytext());
          }
        case 134: break;
        case 27: 
          { return symbol(sym1.NOTB, yytext());
          }
        case 135: break;
        case 25: 
          { return symbol(sym1.ORB, yytext());
          }
        case 136: break;
        case 81: 
          { return symbol(sym1.CONTINUE, yytext());
          }
        case 137: break;
        case 53: 
          { string.setLength(0); yybegin(TRIPLE_STRING);
          }
        case 138: break;
        case 66: 
          { return symbol(sym1.TYPE, yytext());
          }
        case 139: break;
        case 21: 
          { return symbol(sym1.MULT, yytext());
          }
        case 140: break;
        case 32: 
          { string.append('\\');
          }
        case 141: break;
        case 63: 
          { return symbol(sym1.EXEC, yytext());
          }
        case 142: break;
        case 58: 
          { return symbol(sym1.TRY, yytext());
          }
        case 143: break;
        case 34: 
          { return symbol(sym1.EQUALS, yytext());
          }
        case 144: break;
        case 44: 
          { return symbol(sym1.MINOREQ, yytext());
          }
        case 145: break;
        case 2: 
          { return symbol(sym1.NEWLINE, yytext());
          }
        case 146: break;
        case 22: 
          { return symbol(sym1.DIV, yytext());
          }
        case 147: break;
        case 7: 
          { return symbol(sym1.NAME, yytext());
          }
        case 148: break;
        case 64: 
          { return symbol(sym1.FROM, yytext());
          }
        case 149: break;
        case 30: 
          { string.append( yytext() );
          }
        case 150: break;
        case 76: 
          { return symbol(sym1.RETURN, yytext());
          }
        case 151: break;
        case 40: 
          { return symbol(sym1.IN, yytext());
          }
        case 152: break;
        case 13: 
          { return symbol(sym1.COLON, yytext());
          }
        case 153: break;
        case 68: 
          { return symbol(sym1.RAISE, yytext());
          }
        case 154: break;
        case 80: 
          { return symbol(sym1.FINALLY, yytext());
          }
        case 155: break;
        case 8: 
          { return symbol(sym1.DOT, yytext());
          }
        case 156: break;
        case 31: 
          { yybegin(YYINITIAL); return symbol(sym1.STRING, string.toString());
          }
        case 157: break;
        case 55: 
          { return symbol(sym1.DEF, yytext());
          }
        case 158: break;
        case 47: 
          { return symbol(sym1.SHIFTR, yytext());
          }
        case 159: break;
        case 5: 
          { return symbol(sym1.ASSIGN, yytext());
          }
        case 160: break;
        case 62: 
          { return symbol(sym1.ELSE, yytext());
          }
        case 161: break;
        case 4: 
          { 
          }
        case 162: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return symbol(sym1.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
