
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jul 04 17:07:59 UYT 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Scanner;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jul 04 17:07:59 UYT 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\004\005\000\002\006\003\000" +
    "\002\006\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\007\004\000\002\007\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\013\003" +
    "\000\002\013\005\000\002\014\003\000\002\014\003\000" +
    "\002\015\003\000\002\015\005\000\002\016\003\000\002" +
    "\016\003\000\002\017\003\000\002\017\005\000\002\020" +
    "\003\000\002\020\005\000\002\021\003\000\002\021\005" +
    "\000\002\022\003\000\002\022\005\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\024\003\000\002\024" +
    "\005\000\002\025\004\000\002\025\003\000\002\026\003" +
    "\000\002\026\005\000\002\027\003\000\002\027\005\000" +
    "\002\030\003\000\002\031\003\000\002\031\005\000\002" +
    "\032\003\000\002\032\005\000\002\033\003\000\002\034" +
    "\003\000\002\035\003\000\002\035\004\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\037\004\000" +
    "\002\037\005\000\002\040\003\000\002\040\004\000\002" +
    "\040\005\000\002\040\005\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\034\020\032\027\011\032\026\040\051\045" +
    "\033\047\007\050\041\051\037\052\042\066\025\067\014" +
    "\100\036\105\020\001\002\000\004\002\131\001\002\000" +
    "\056\002\ufff9\046\ufff9\054\ufff9\066\ufff9\067\ufff9\070\ufff9" +
    "\071\ufff9\072\127\074\ufff9\075\ufff9\076\ufff9\077\ufff9\101" +
    "\ufff9\102\ufff9\103\ufff9\104\ufff9\106\ufff9\107\ufff9\110\ufff9" +
    "\111\ufff9\112\ufff9\113\ufff9\001\002\000\004\002\uffc7\001" +
    "\002\000\056\002\000\046\000\054\000\066\000\067\000" +
    "\070\000\071\000\072\000\074\000\075\000\076\000\077" +
    "\000\101\000\102\000\103\000\104\000\106\000\107\000" +
    "\110\000\111\000\112\000\113\000\001\002\000\010\002" +
    "\uffd0\046\uffd0\054\125\001\002\000\004\002\uffcb\001\002" +
    "\000\004\002\uffbe\001\002\000\022\045\033\047\007\050" +
    "\041\051\037\052\042\066\025\067\014\100\036\001\002" +
    "\000\022\045\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\066" +
    "\ufff6\067\ufff6\100\ufff6\001\002\000\004\002\uffc8\001\002" +
    "\000\034\002\uffe3\046\uffe3\054\uffe3\076\uffe3\077\122\103" +
    "\uffe3\104\uffe3\106\uffe3\107\uffe3\110\uffe3\111\uffe3\112\uffe3" +
    "\113\uffe3\001\002\000\010\002\uffd1\046\uffd1\054\uffd1\001" +
    "\002\000\024\045\033\047\007\050\041\051\037\052\042" +
    "\066\025\067\014\100\036\105\020\001\002\000\032\002" +
    "\uffe1\046\uffe1\054\uffe1\076\117\103\uffe1\104\uffe1\106\uffe1" +
    "\107\uffe1\110\uffe1\111\uffe1\112\uffe1\113\uffe1\001\002\000" +
    "\036\002\uffe5\046\uffe5\054\uffe5\075\115\076\uffe5\077\uffe5" +
    "\103\uffe5\104\uffe5\106\uffe5\107\uffe5\110\uffe5\111\uffe5\112" +
    "\uffe5\113\uffe5\001\002\000\006\002\uffce\046\113\001\002" +
    "\000\004\002\uffc6\001\002\000\022\045\ufff7\047\ufff7\050" +
    "\ufff7\051\ufff7\052\ufff7\066\ufff7\067\ufff7\100\ufff7\001\002" +
    "\000\026\002\uffca\045\033\047\007\050\041\051\037\052" +
    "\042\066\025\067\014\100\036\105\020\001\002\000\004" +
    "\002\uffbf\001\002\000\046\002\uffeb\046\uffeb\054\uffeb\066" +
    "\106\067\107\075\uffeb\076\uffeb\077\uffeb\101\uffeb\102\uffeb" +
    "\103\uffeb\104\uffeb\106\uffeb\107\uffeb\110\uffeb\111\uffeb\112" +
    "\uffeb\113\uffeb\001\002\000\004\002\uffbd\001\002\000\004" +
    "\002\uffcc\001\002\000\056\002\ufffd\046\ufffd\054\ufffd\066" +
    "\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\074\ufffd\075\ufffd" +
    "\076\ufffd\077\ufffd\101\ufffd\102\ufffd\103\ufffd\104\ufffd\106" +
    "\ufffd\107\ufffd\110\ufffd\111\ufffd\112\ufffd\113\ufffd\001\002" +
    "\000\012\002\uffd3\046\uffd3\054\uffd3\104\104\001\002\000" +
    "\042\002\uffe7\046\uffe7\054\uffe7\075\uffe7\076\uffe7\077\uffe7" +
    "\101\102\102\100\103\uffe7\104\uffe7\106\uffe7\107\uffe7\110" +
    "\uffe7\111\uffe7\112\uffe7\113\uffe7\001\002\000\022\045\ufff5" +
    "\047\ufff5\050\ufff5\051\ufff5\052\ufff5\066\ufff5\067\ufff5\100" +
    "\ufff5\001\002\000\056\002\ufffe\046\ufffe\054\ufffe\066\ufffe" +
    "\067\ufffe\070\ufffe\071\ufffe\072\ufffe\074\ufffe\075\ufffe\076" +
    "\ufffe\077\ufffe\101\ufffe\102\ufffe\103\ufffe\104\ufffe\106\ufffe" +
    "\107\ufffe\110\ufffe\111\ufffe\112\ufffe\113\ufffe\001\002\000" +
    "\030\002\uffd9\046\uffd9\054\uffd9\103\uffd9\104\uffd9\106\073" +
    "\107\072\110\075\111\071\112\074\113\070\001\002\000" +
    "\056\002\uffff\046\uffff\054\uffff\066\uffff\067\uffff\070\uffff" +
    "\071\uffff\072\uffff\074\uffff\075\uffff\076\uffff\077\uffff\101" +
    "\uffff\102\uffff\103\uffff\104\uffff\106\uffff\107\uffff\110\uffff" +
    "\111\uffff\112\uffff\113\uffff\001\002\000\056\002\ufffb\046" +
    "\ufffb\054\ufffb\066\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb" +
    "\074\ufffb\075\ufffb\076\ufffb\077\ufffb\101\ufffb\102\ufffb\103" +
    "\ufffb\104\ufffb\106\ufffb\107\ufffb\110\ufffb\111\ufffb\112\ufffb" +
    "\113\ufffb\001\002\000\054\002\uffef\046\uffef\054\uffef\066" +
    "\uffef\067\uffef\070\064\071\066\074\063\075\uffef\076\uffef" +
    "\077\uffef\101\uffef\102\uffef\103\uffef\104\uffef\106\uffef\107" +
    "\uffef\110\uffef\111\uffef\112\uffef\113\uffef\001\002\000\004" +
    "\002\uffbc\001\002\000\014\002\uffd6\046\uffd6\054\uffd6\103" +
    "\uffd6\104\uffd6\001\002\000\014\002\uffd5\046\uffd5\054\uffd5" +
    "\103\061\104\uffd5\001\002\000\054\002\ufff3\046\ufff3\054" +
    "\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\074\ufff3\075\ufff3" +
    "\076\ufff3\077\ufff3\101\ufff3\102\ufff3\103\ufff3\104\ufff3\106" +
    "\ufff3\107\ufff3\110\ufff3\111\ufff3\112\ufff3\113\ufff3\001\002" +
    "\000\054\002\ufff8\046\ufff8\054\ufff8\066\ufff8\067\ufff8\070" +
    "\ufff8\071\ufff8\074\ufff8\075\ufff8\076\ufff8\077\ufff8\101\ufff8" +
    "\102\ufff8\103\ufff8\104\ufff8\106\ufff8\107\ufff8\110\ufff8\111" +
    "\ufff8\112\ufff8\113\ufff8\001\002\000\026\002\uffc3\045\033" +
    "\047\007\050\041\051\037\052\042\066\025\067\014\100" +
    "\036\105\020\001\002\000\056\002\ufffc\046\ufffc\054\ufffc" +
    "\066\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc\074\ufffc\075" +
    "\ufffc\076\ufffc\077\ufffc\101\ufffc\102\ufffc\103\ufffc\104\ufffc" +
    "\106\ufffc\107\ufffc\110\ufffc\111\ufffc\112\ufffc\113\ufffc\001" +
    "\002\000\006\002\uffc2\054\054\001\002\000\026\002\uffc1" +
    "\045\033\047\007\050\041\051\037\052\042\066\025\067" +
    "\014\100\036\105\020\001\002\000\004\002\uffc0\001\002" +
    "\000\006\002\uffc5\054\057\001\002\000\024\045\033\047" +
    "\007\050\041\051\037\052\042\066\025\067\014\100\036" +
    "\105\020\001\002\000\004\002\uffc4\001\002\000\024\045" +
    "\033\047\007\050\041\051\037\052\042\066\025\067\014" +
    "\100\036\105\020\001\002\000\012\002\uffd4\046\uffd4\054" +
    "\uffd4\104\uffd4\001\002\000\022\045\ufff0\047\ufff0\050\ufff0" +
    "\051\ufff0\052\ufff0\066\ufff0\067\ufff0\100\ufff0\001\002\000" +
    "\022\045\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\066\ufff2" +
    "\067\ufff2\100\ufff2\001\002\000\022\045\033\047\007\050" +
    "\041\051\037\052\042\066\025\067\014\100\036\001\002" +
    "\000\022\045\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\066" +
    "\ufff1\067\ufff1\100\ufff1\001\002\000\046\002\uffee\046\uffee" +
    "\054\uffee\066\uffee\067\uffee\075\uffee\076\uffee\077\uffee\101" +
    "\uffee\102\uffee\103\uffee\104\uffee\106\uffee\107\uffee\110\uffee" +
    "\111\uffee\112\uffee\113\uffee\001\002\000\022\045\uffda\047" +
    "\uffda\050\uffda\051\uffda\052\uffda\066\uffda\067\uffda\100\uffda" +
    "\001\002\000\022\045\uffdc\047\uffdc\050\uffdc\051\uffdc\052" +
    "\uffdc\066\uffdc\067\uffdc\100\uffdc\001\002\000\022\045\uffde" +
    "\047\uffde\050\uffde\051\uffde\052\uffde\066\uffde\067\uffde\100" +
    "\uffde\001\002\000\022\045\uffdf\047\uffdf\050\uffdf\051\uffdf" +
    "\052\uffdf\066\uffdf\067\uffdf\100\uffdf\001\002\000\022\045" +
    "\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\066\uffdb\067\uffdb" +
    "\100\uffdb\001\002\000\022\045\uffdd\047\uffdd\050\uffdd\051" +
    "\uffdd\052\uffdd\066\uffdd\067\uffdd\100\uffdd\001\002\000\022" +
    "\045\033\047\007\050\041\051\037\052\042\066\025\067" +
    "\014\100\036\001\002\000\014\002\uffd8\046\uffd8\054\uffd8" +
    "\103\uffd8\104\uffd8\001\002\000\022\045\uffe8\047\uffe8\050" +
    "\uffe8\051\uffe8\052\uffe8\066\uffe8\067\uffe8\100\uffe8\001\002" +
    "\000\022\045\033\047\007\050\041\051\037\052\042\066" +
    "\025\067\014\100\036\001\002\000\022\045\uffe9\047\uffe9" +
    "\050\uffe9\051\uffe9\052\uffe9\066\uffe9\067\uffe9\100\uffe9\001" +
    "\002\000\036\002\uffe6\046\uffe6\054\uffe6\075\uffe6\076\uffe6" +
    "\077\uffe6\103\uffe6\104\uffe6\106\uffe6\107\uffe6\110\uffe6\111" +
    "\uffe6\112\uffe6\113\uffe6\001\002\000\024\045\033\047\007" +
    "\050\041\051\037\052\042\066\025\067\014\100\036\105" +
    "\020\001\002\000\010\002\uffd2\046\uffd2\054\uffd2\001\002" +
    "\000\022\045\uffed\047\uffed\050\uffed\051\uffed\052\uffed\066" +
    "\uffed\067\uffed\100\uffed\001\002\000\022\045\uffec\047\uffec" +
    "\050\uffec\051\uffec\052\uffec\066\uffec\067\uffec\100\uffec\001" +
    "\002\000\022\045\033\047\007\050\041\051\037\052\042" +
    "\066\025\067\014\100\036\001\002\000\042\002\uffea\046" +
    "\uffea\054\uffea\075\uffea\076\uffea\077\uffea\101\uffea\102\uffea" +
    "\103\uffea\104\uffea\106\uffea\107\uffea\110\uffea\111\uffea\112" +
    "\uffea\113\uffea\001\002\000\004\002\uffc9\001\002\000\024" +
    "\045\033\047\007\050\041\051\037\052\042\066\025\067" +
    "\014\100\036\105\020\001\002\000\004\002\uffcd\001\002" +
    "\000\022\045\033\047\007\050\041\051\037\052\042\066" +
    "\025\067\014\100\036\001\002\000\034\002\uffe4\046\uffe4" +
    "\054\uffe4\076\uffe4\077\uffe4\103\uffe4\104\uffe4\106\uffe4\107" +
    "\uffe4\110\uffe4\111\uffe4\112\uffe4\113\uffe4\001\002\000\022" +
    "\045\033\047\007\050\041\051\037\052\042\066\025\067" +
    "\014\100\036\001\002\000\030\002\uffe0\046\uffe0\054\uffe0" +
    "\103\uffe0\104\uffe0\106\uffe0\107\uffe0\110\uffe0\111\uffe0\112" +
    "\uffe0\113\uffe0\001\002\000\014\002\uffd7\046\uffd7\054\uffd7" +
    "\103\uffd7\104\uffd7\001\002\000\022\045\033\047\007\050" +
    "\041\051\037\052\042\066\025\067\014\100\036\001\002" +
    "\000\032\002\uffe2\046\uffe2\054\uffe2\076\uffe2\103\uffe2\104" +
    "\uffe2\106\uffe2\107\uffe2\110\uffe2\111\uffe2\112\uffe2\113\uffe2" +
    "\001\002\000\054\002\ufff4\046\ufff4\054\ufff4\066\ufff4\067" +
    "\ufff4\070\ufff4\071\ufff4\074\ufff4\075\ufff4\076\ufff4\077\ufff4" +
    "\101\ufff4\102\ufff4\103\ufff4\104\ufff4\106\ufff4\107\ufff4\110" +
    "\ufff4\111\ufff4\112\ufff4\113\ufff4\001\002\000\024\045\033" +
    "\047\007\050\041\051\037\052\042\066\025\067\014\100" +
    "\036\105\020\001\002\000\006\002\uffcf\046\uffcf\001\002" +
    "\000\022\045\033\047\007\050\041\051\037\052\042\066" +
    "\025\067\014\100\036\001\002\000\054\002\ufffa\046\ufffa" +
    "\054\ufffa\066\ufffa\067\ufffa\070\ufffa\071\ufffa\074\ufffa\075" +
    "\ufffa\076\ufffa\077\ufffa\101\ufffa\102\ufffa\103\ufffa\104\ufffa" +
    "\106\ufffa\107\ufffa\110\ufffa\111\ufffa\112\ufffa\113\ufffa\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\066\002\051\003\004\004\047\005\012\006" +
    "\046\007\042\013\027\015\034\017\021\020\015\021\020" +
    "\022\037\024\044\025\045\026\033\027\016\030\007\031" +
    "\022\032\026\033\014\034\005\035\023\036\030\040\011" +
    "\041\043\044\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\002\051\003" +
    "\004\004\047\005\012\006\046\007\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\002\051\003\004\004\047\005\012\006\046" +
    "\007\042\013\027\015\034\017\021\020\015\021\020\022" +
    "\037\024\044\025\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\002\051\003\004\004\047\005\012\006\046" +
    "\007\042\013\027\015\034\017\021\020\015\021\020\022" +
    "\037\024\044\025\045\026\033\027\016\030\007\031\111" +
    "\001\001\000\002\001\001\000\004\014\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\002\051\003\004\004\047\005" +
    "\012\006\046\007\042\013\027\015\034\017\021\020\015" +
    "\021\020\022\037\024\044\025\045\026\033\027\016\030" +
    "\052\001\001\000\002\001\001\000\004\037\054\001\001" +
    "\000\044\002\051\003\004\004\047\005\012\006\046\007" +
    "\042\013\027\015\034\017\021\020\015\021\020\022\037" +
    "\024\044\025\045\026\033\027\016\030\055\001\001\000" +
    "\002\001\001\000\004\037\057\001\001\000\044\002\051" +
    "\003\004\004\047\005\012\006\046\007\042\013\027\015" +
    "\034\017\021\020\015\021\020\022\037\024\044\025\045" +
    "\026\033\027\016\030\055\001\001\000\002\001\001\000" +
    "\040\002\051\003\004\004\047\005\012\006\046\007\042" +
    "\013\027\015\034\017\021\020\015\021\020\022\037\024" +
    "\044\025\045\026\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\002\051\003\004\004" +
    "\047\005\012\006\046\007\042\013\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\002\051\003\004\004\047\005" +
    "\012\006\046\007\042\013\027\015\034\017\021\020\015" +
    "\021\020\022\037\024\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\002\051\003\004\004\047\005\012" +
    "\006\046\007\042\013\027\015\034\017\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\002\051\003\004" +
    "\004\047\005\012\006\046\007\042\013\027\015\034\017" +
    "\021\020\015\021\020\022\037\024\044\025\045\026\033" +
    "\027\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\002\051\003\004\004\047\005\012" +
    "\006\046\007\042\013\027\015\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\002\051\003\004\004\047" +
    "\005\012\006\046\007\042\013\027\015\034\017\021\020" +
    "\015\021\020\022\037\024\044\025\045\026\033\027\016" +
    "\030\007\031\113\001\001\000\002\001\001\000\026\002" +
    "\051\003\004\004\047\005\012\006\046\007\042\013\027" +
    "\015\034\017\021\020\115\001\001\000\002\001\001\000" +
    "\032\002\051\003\004\004\047\005\012\006\046\007\042" +
    "\013\027\015\034\017\021\020\015\021\020\022\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\002\051" +
    "\003\004\004\047\005\012\006\046\007\042\013\027\015" +
    "\034\017\021\020\015\021\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\002\051\003\004\004\047\005" +
    "\012\006\046\007\042\013\027\015\034\017\021\020\015" +
    "\021\020\022\037\024\044\025\045\026\033\027\016\030" +
    "\007\031\125\001\001\000\002\001\001\000\016\002\051" +
    "\003\004\004\047\005\012\006\046\007\127\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.out.println("Error de sintaxis "+s.sym);
        System.out.println(s.value);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error de sintaxis "+s.sym);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // program ::= small_stmt 
            {
              Object RESULT =null;
		 System.out.println("EL PROGRAMA ES CORRECTO"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // small_stmt ::= flow_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // small_stmt ::= print_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // small_stmt ::= expr_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("small_stmt",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // print_stmt ::= PRINT test print_stmt_aux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // print_stmt ::= PRINT test COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // print_stmt ::= PRINT test 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // print_stmt ::= PRINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // print_stmt_aux ::= COMA test print_stmt_aux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt_aux",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // print_stmt_aux ::= COMA test 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt_aux",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // flow_stmt ::= return_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // flow_stmt ::= continue_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // flow_stmt ::= break_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("flow_stmt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // return_stmt ::= RETURN testlist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // return_stmt ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // continue_stmt ::= CONTINUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("continue_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // break_stmt ::= BREAK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr_stmt ::= testlist ASSIGN testlist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr_stmt ::= testlist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // testlist ::= test COMA testlist 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("testlist",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // testlist ::= test 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("testlist",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // test ::= or_test 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("test",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // or_test ::= and_test OR or_test 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("or_test",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // or_test ::= and_test 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("or_test",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // and_test ::= not_test AND and_test 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("and_test",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // and_test ::= not_test 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("and_test",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // not_test ::= comparison 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("not_test",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // not_test ::= NOT not_test 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("not_test",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comparison ::= expr comp_op comparison 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comparison ::= expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comp_op ::= MAJOREQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comp_op ::= MINOREQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comp_op ::= MAJOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comp_op ::= MINOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comp_op ::= DIFF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comp_op ::= EQUALS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= xor_expr ORB expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= xor_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // xor_expr ::= and_expr XORB xor_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("xor_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // xor_expr ::= and_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("xor_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // and_expr ::= shift_expr ANDB and_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("and_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // and_expr ::= shift_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("and_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // shift_expr ::= arith_expr shift_op shift_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shift_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // shift_expr ::= arith_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shift_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // shift_op ::= SHIFTR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shift_op",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // shift_op ::= SHIFTL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shift_op",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // arith_expr ::= term arith_op arith_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // arith_expr ::= term 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // arith_op ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // arith_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // term ::= factor term_op term 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // term ::= factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // term_op ::= MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // term_op ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // term_op ::= MULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // factor ::= factor_aux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // factor ::= factor_op factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // factor_op ::= NOTB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_op",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // factor_op ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_op",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // factor_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_op",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // factor_aux ::= power 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_aux",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // factor_aux ::= atom 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_aux",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // power ::= atom EXP factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("power",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // atom ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // atom ::= number 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // atom ::= NAME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // number ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("number",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // number ::= LONG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("number",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // number ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("number",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

