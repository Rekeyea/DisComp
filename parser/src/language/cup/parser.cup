// CUP specification for a simple expression evaluator (no actions)

import java_cup.runtime.*;
import java.util.Scanner;

parser code
{:
    public void syntax_error(Symbol s){
        System.out.println("Error de sintaxis");
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error de sintaxis");
    }
:}


/* Terminals (tokens returned by the scanner). */

terminal           DEL, FROM, WHILE, AS, ELIF, GLOBAL, WITH, ASSERT, ELSE, IF, PASS, YIELD, BREAK, EXCEPT, IMPORT, CLASS, EXEC, IN, RAISE, CONTINUE, FINALLY, IS, RETURN, DEF, FOR, LAMBDA, TRY, TYPE, PRINT;
terminal           NEWLINE, WHITESPACE, TAB, COMMENT, NAME, ASSIGN, INTEGER, LONG, FLOAT, STRING, STRING3;
terminal           COMA, DOT, COLON, SEMICOLON, RPAREN, LPAREN, RBRACKET, LBRACKET, RCURLY, LCURLY;
terminal           PLUS, MINUS, MULT, DIV, EXP, DIVE, MOD;
terminal           ANDB, ORB, XORB, NOTB, SHIFTL, SHIFTR;
terminal           AND, OR, NOT, EQUALS, DIFF, MINOR, MAJOR, MINOREQ, MAJOREQ;

/* Non-terminals */
non terminal number;
non terminal atom;
non terminal factor_op_aux;
non terminal factor ;
non terminal power_exp_factor;
non terminal power ;
non terminal term_op_factor;
non terminal term_factor ;
non terminal term_factor_repeat_aux;
non terminal term_factor_repeat ;
non terminal term ;
non terminal arith_op;
non terminal arith_term;
non terminal arith_term_repeat_aux;
non terminal arith_term_repeat ;
non terminal arith_expr ;
non terminal shift_op ;
non terminal shift_op_expr;
non terminal shift_op_expr_repeat_aux;
non terminal shift_op_expr_repeat ;
non terminal shift_expr ;
non terminal and_shift_expr;
non terminal and_expr ;
non terminal xor_and_expr;
non terminal xor_and_expr_repeat_aux;
non terminal xor_and_expr_repeat ;
non terminal xor_expr ;
non terminal or_xor_expr;
non terminal or_xor_expr_aux_repeat;
non terminal or_xor_expr_repeat ;
non terminal expr ;
non terminal comp_op;
non terminal comp_op_expr;
non terminal comp_op_expr_aux_repeat;
non terminal comp_op_expr_repeat ;
non terminal comparison ;
non terminal program ;
non terminal and_shift_expr_repeat_aux;
non terminal and_shift_expr_repeat;

/* The grammar */


/*number ::= INTEGER | LONG | FLOAT{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
atom ::= NAME | number | STRING{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
factor_op_aux ::= PLUS | MINUS | NOTB{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
factor ::= factor_op_aux factor | power{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
power_exp_factor ::= EXP factor{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
power ::= atom power_exp_factor|{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
term_op_factor ::= MULT|DIV|MOD{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
term_factor ::= term_op_factor factor{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
term_factor_repeat_aux ::= term_factor term_factor_repeat{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
term_factor_repeat ::= |term_factor_repeat_aux{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
term ::= factor term_factor_repeat{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
arith_op ::= PLUS|MINUS{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
arith_term ::= arith_op term{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
arith_term_repeat_aux ::= arith_term arith_term_repeat{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
arith_term_repeat ::= |arith_term_repeat_aux{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
arith_expr ::= term arith_term_repeat{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
shift_op ::= SHIFTL|SHIFTR{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
shift_op_expr ::= shift_op arith_expr{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
shift_op_expr_repeat_aux ::= shift_op_expr shift_op_expr_repeat{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
shift_op_expr_repeat ::= |shift_op_expr_repeat_aux{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
shift_expr ::= arith_expr shift_op_expr_repeat{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
and_shift_expr ::= ANDB shift_expr{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
and_shift_expr_repeat_aux ::= and_shift_expr and_shift_expr_repeat{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
and_shift_expr_repeat ::= |and_shift_expr_repeat_aux{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
and_expr ::= shift_expr and_shift_expr_repeat{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
xor_and_expr ::= XORB and_expr{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
xor_and_expr_repeat_aux ::= xor_and_expr xor_and_expr_repeat{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
xor_and_expr_repeat ::= |xor_and_expr_repeat_aux{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
xor_expr ::= and_expr xor_and_expr_repeat{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
or_xor_expr ::= ORB xor_expr{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
or_xor_expr_aux_repeat ::= or_xor_expr or_xor_expr_repeat{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
or_xor_expr_repeat ::= |or_xor_expr_aux_repeat{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
expr ::= xor_expr or_xor_expr_repeat{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
comp_op ::= MINOR | MAJOR | MINOREQ | MAJOREQ | DIFF | EQUALS{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
comp_op_expr ::= comp_op expr{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
comp_op_expr_aux_repeat ::= comp_op_expr comp_op_expr_repeat{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
comp_op_expr_repeat ::= | comp_op_expr_aux_repeat{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
comparison ::= expr comp_op_expr_repeat{:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};
program ::= comparison NEWLINE {:System.out.println("ESTE ES UN PROGRAMA CORRECTO"); :};*/

program ::= NAME EQUALS INTEGER PLUS INTEGER {:System.out.println("PROGRAMA CORRECTO"):};
