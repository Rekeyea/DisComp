// CUP specification for a simple expression evaluator (no actions)

import java_cup.runtime.*;
import java.util.Scanner;

parser code
{:
    public void syntax_error(Symbol s){
        System.out.println("Error de sintaxis "+s.sym);
        System.out.println(s.value);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error de sintaxis "+s.sym);
    }
:}


/* Terminals (tokens returned by the scanner). */

terminal           DEL, FROM, WHILE, AS, ELIF, GLOBAL, WITH, ASSERT, ELSE, IF, PASS, YIELD, BREAK, EXCEPT, IMPORT, CLASS, EXEC, IN, RAISE, CONTINUE, FINALLY, IS, RETURN, DEF, FOR, LAMBDA, TRY, TYPE, PRINT;
terminal           NEWLINE, WHITESPACE, TAB, COMMENT, NAME, ASSIGN, INTEGER, LONG, FLOAT, STRING, STRING3;
terminal           COMA, DOT, COLON, SEMICOLON, RPAREN, LPAREN, RBRACKET, LBRACKET, RCURLY, LCURLY;
terminal           PLUS, MINUS, MULT, DIV, EXP, DIVE, MOD;
terminal           ANDB, ORB, XORB, NOTB, SHIFTL, SHIFTR;
terminal           AND, OR, NOT, EQUALS, DIFF, MINOR, MAJOR, MINOREQ, MAJOREQ;
terminal            INDENT, DEDENT;

/* Non-terminals */

non terminal number;
non terminal atom;
non terminal power;
non terminal factor_op;
non terminal factor_aux;
non terminal factor;

non terminal term_op;
non terminal term_factor;
non terminal term_factor_repeat;
non terminal term;

non terminal arith_op;
non terminal arith_expr;

non terminal shift_op;
non terminal shift_expr;

non terminal and_expr;

non terminal xor_expr;

non terminal expr;

non terminal comp_op;
non terminal comparison;

non terminal not_test;

non terminal and_test;

non terminal or_test;

non terminal test;

non terminal testlist;

non terminal expr_stmt;

non terminal exprlist_repeat;
non terminal exprlist;

non terminal break_stmt;
non terminal continue_stmt;
non terminal return_stmt;
non terminal flow_stmt;

non terminal print_stmt_aux;
non terminal print_stmt;

non terminal small_stmt;
non terminal small_stmt_aux;

non terminal simple_stmt_aux;
non terminal simple_stmt;

non terminal program;

/* The grammar */

start with program;

number ::= INTEGER | LONG | FLOAT;
atom ::= NAME
        | number
        | STRING;

/* ************ FACTOR DEFINITION *****************
************************************************** */


power ::= atom EXP factor;
factor_aux ::=  atom
                | power;
factor_op ::=   PLUS
                | MINUS
                | NOTB;
factor ::= factor_op factor | factor_aux;



/* ************************************************
************************************************** */



/***************  TERM DEFINITION  ***********************
***********************************************************/

term_op ::=  MULT
            | DIV
            | MOD;
term ::=    factor
            | factor term_op term;

/* ************************************************
************************************************** */


/***************  ARITHMETIC EXPRESSIONS  *****************
***********************************************************/

arith_op ::=    PLUS
                | MINUS;
arith_expr ::=  term
                | term arith_op arith_expr;


/* ************************************************
************************************************** */

/***************  SHIFT EXPRESSIONS  *****************
***********************************************************/

shift_op ::=    SHIFTL
                | SHIFTR;
shift_expr ::=  arith_expr
                | arith_expr shift_op shift_expr;


/* ************************************************
************************************************** */

/***************  BITWISE AND EXPRESSIONS  *****************
***********************************************************/


and_expr ::=    shift_expr
                | shift_expr ANDB and_expr;


/* ************************************************
************************************************** */


/***************  BITWISE XOR EXPRESSIONS  *****************
***********************************************************/


xor_expr ::=    and_expr
                | and_expr XORB xor_expr;


/* ************************************************
************************************************** */


/***************  BITWISE OR EXPRESSIONS  *****************
***********************************************************/


expr ::=    xor_expr
            | xor_expr ORB expr;


/* ************************************************
************************************************** */


/***************  COMPARISON  *****************************
***********************************************************/

comp_op ::= EQUALS
            |DIFF
            |MINOR
            |MAJOR
            |MINOREQ
            |MAJOREQ;
comparison ::=  expr
                | expr comp_op comparison;


/* ************************************************
************************************************** */


/***************  NOT TESTS  *****************
***********************************************************/


not_test ::=    NOT not_test
                | comparison;


/* ************************************************
************************************************** */


/***************  AND TESTS  *****************
***********************************************************/


and_test ::=    not_test
                | not_test AND and_test;


/* ************************************************
************************************************** */


/***************  OR TESTS  *****************
***********************************************************/


or_test ::=    and_test
               | and_test OR or_test;


/* ************************************************
************************************************** */


/***************  TESTS  *****************
***********************************************************/


test ::=    or_test;


/* ************************************************
************************************************** */

/***************  TESTS LISTS *****************
***********************************************************/


testlist ::=   test
                |test COMA testlist;


/* ************************************************
************************************************** */



/***************  EXPRESSION LISTS *****************
***********************************************************/

exprlist_repeat ::= COMA expr
                    |COMA expr COMA
                    |COMA expr exprlist_repeat;
exprlist ::=   expr
               |expr exprlist_repeat;


/* ************************************************
************************************************** */




/***************  EXPRESSION STATEMENTS  *****************
***********************************************************/


expr_stmt ::=   testlist
                | testlist ASSIGN testlist;


/* ************************************************
************************************************** */



/***************  FLOW STATEMENTS  *****************
***********************************************************/

break_stmt ::= BREAK;
continue_stmt ::= CONTINUE;
return_stmt ::= RETURN
                |RETURN testlist;
flow_stmt ::= break_stmt | continue_stmt | return_stmt;


/* ************************************************
************************************************** */



/***************  PRINT STATEMENTS  *****************
***********************************************************/


print_stmt_aux ::=  COMA test
                    |COMA test COMA
                    |COMA test print_stmt_aux;

print_stmt ::=  PRINT
                | PRINT test
                | PRINT test COMA
                | PRINT test print_stmt_aux;


/* ************************************************
************************************************** */



/***************  SMALL STATEMENTS  *****************
***********************************************************/

small_stmt ::= expr_stmt | print_stmt | flow_stmt;

/* ************************************************
************************************************** */



/***************  SIMPLE STATEMENTS  *****************
***********************************************************/

simple_stmt_aux ::= SEMICOLON small_stmt
                    |SEMICOLON small_stmt SEMICOLON
                    |SEMICOLON small_stmt simple_stmt_aux;
simple_stmt ::= small_stmt NEWLINE
                | small_stmt simple_stmt_aux NEWLINE;

/* ************************************************
************************************************** */


/***************  STATEMENTS  *****************************
***********************************************************/
/*
stmt ::= simple_stmt | compund_stmt;
stmt_repeat ::= stmt | stmt stmt_repeat;
suite ::= simple_stmt | NEWLINE INDENT stmt_repeat DEDENT;
if_stmt ::= IF test COLON suite
            |IF test COLON suite ELSE COLON suite;
while_stmt::= WHILE test COLON suite;
for_stmt::= FOR exprlist IN testlist COLON suite;
compund_stmt ::= if_stmt | while_stmt | for_stmt;
*/
/* ************************************************
************************************************** */



program ::= simple_stmt{: System.out.println("EL PROGRAMA ES CORRECTO"); :};